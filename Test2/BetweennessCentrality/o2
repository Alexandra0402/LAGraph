SuiteSparse:GraphBLAS v4.0.3 [Jan 19, 2021]
threads to test:  40
matrix: /home/faculty/davis/GAP/GAP-kron/GAP-kron.grb
[.grb]
Reading binary file: /home/faculty/davis/GAP/GAP-kron/GAP-kron.grb
 [ GxB_Matrix_import_CSR 
   1.9e-05 sec ]
 [ GxB_set 
   0.0202 sec ]
sources: /home/faculty/davis/GAP/GAP-kron/GAP-kron_sources.mtx
    GraphBLAS type: type double size: 8
 [ *_setElement (wait: 0 zombies, 64 pending) 
   6.96e-05 sec ]
 [ GrB_apply (shallow-op) 
   3.91 sec ]
read time: 39.1056
 [ GrB_Matrix_nvals 
   9.9e-07 sec ]
Graph: kind: undirected, nodes: 134217726 entries: 4223264644 type: bool
    pattern symmetry: symmetric
 [ GrB_Matrix_nvals 
   5.62e-07 sec ]

Trial 1 : sources: [ 2338012 31997659 23590940 43400604 ]
 [ GxB_set (sparse to bitmap) 
   0.0934 sec ]
 [ GrB_mxm (wait: 0 zombies, 4 pending) (generic with typecast) (hyper to sparse) C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 2587 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   0.000304 sec ]
 [ GrB_Matrix_nvals 
   5.27e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   3.87e-05 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.000884 sec ]
 [ GxB_set 
   1.58e-06 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 3.72225e+07 (use dense mask in-place) (nthreads 40 coarse hash: 2 fine: 158) 
   0.193 sec ]
 [ GrB_Matrix_nvals 
   2.9e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   0.0341 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.0371 sec ]
 [ GxB_set 
   1.07e-06 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 6.41067e+09 (use dense mask) (nthreads 40 fine: 159) 
   12.7 sec ]
 [ GrB_Matrix_nvals 
   6.19e-07 sec ]
 [ GrB_apply (shallow-op) (sparse to bitmap) 
   0.137 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.116 sec ]
 [ GxB_set (sparse to bitmap) 
   0.13 sec ]
 [ GrB_mxm C<!M>=A'*B, dot_product (B<!B>=S'*B) 
   0.598 sec ]
 [ GrB_Matrix_nvals 
   7.73e-07 sec ]
 [ GrB_apply (A bitmap) (shallow-op) 
   0.0832 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.12 sec ]
 [ GxB_set 
   6.29e-07 sec ]
 [ GrB_mxm C<!M>=A'*B, dot_product (B<!B>=S'*B) 
   0.152 sec ]
 [ GrB_Matrix_nvals 
   3.91e-07 sec ]
 [ GrB_apply (A bitmap) (shallow-op) (bitmap to sparse) 
   0.104 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.0307 sec ]
 [ GxB_set (bitmap to sparse) 
   0.0471 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 380572 (use dense mask in-place) (nthreads 5 coarse hash: 2 fine hash: 3) 
   0.0359 sec ]
 [ GrB_Matrix_nvals 
   5.16e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   0.000101 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   9.53e-05 sec ]
 [ GxB_set 
   4.89e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 1029 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   0.000269 sec ]
 [ GrB_Matrix_nvals 
   1.11e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   3.16e-05 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   2.55e-05 sec ]
 [ GxB_set 
   2.51e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 7 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   5.68e-05 sec ]
 [ GrB_Matrix_nvals 
   1.08e-07 sec ]

===================== backtrack phase
 [ GrB_assign WAIT8: 0 WAIT9: 0 (C empty) (pending: 0) Method 21: (C full) = scalar 
   0.0797 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.000565 sec ]
 [ GrB_Matrix_nvals 
   5.5e-07 sec ]
 [ GrB_Matrix_nvals 
   1.35e-07 sec ]
 [ GxB_set 
   8.86e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 7 mwork 1007 (discard mask) (intensity: 1.66e-09 workspace/(nnz(A)+nnz(B)): 0.0318) (nthreads 1 coarse hash: 1) (mask later) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (hyper to sparse) (C(:,:)<any mask>: C_replace early) (C empty) (pending: 0) Method 06s: C(:,:)<M> = Z ; using S (wait: 0 zombies, 0 pending, jumbled) 
   0.000588 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 7 pending) (hyper to sparse) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.00258 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.00396 sec ]
 [ GrB_Matrix_nvals 
   3.23e-07 sec ]
 [ GrB_Matrix_nvals 
   2.51e-07 sec ]
 [ GxB_set 
   9.14e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 1029 mwork 377880 (discard mask) (intensity: 2.44e-07 workspace/(nnz(A)+nnz(B)): 0.0318) (nthreads 1 coarse hash: 1) (mask later) (wait: 0 zombies, 0 pending, jumbled) masker:(S:H{S}=S) 
   0.0017 sec ]
 [ GrB_eWiseMult emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.00089 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.00459 sec ]
 [ GrB_Matrix_nvals 
   1.79e-07 sec ]
 [ GrB_Matrix_nvals 
   1.23e-07 sec ]
 [ GxB_set 
   1.89e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{B}=S*S) axbwork 380572 (use dense mask in-place) (nthreads 5 coarse hash: 2 fine hash: 3) 
   0.0904 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 0 pending, jumbled) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.0299 sec ]
 [ GrB_eWiseMult emult:(B<B>=F.*B) masker:(B:H{B}=B) (bitmap to sparse) 
   0.534 sec ]
 [ GrB_Matrix_nvals 
   4.98e-07 sec ]
 [ GrB_Matrix_nvals 
   1.66e-07 sec ]
 [ GxB_set 
   3.17e-06 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{B}=S*S) axbwork 1.41549e+08 (use dense mask) (nthreads 40 fine: 135) 
   1.14 sec ]
 [ GrB_eWiseMult emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.124 sec ]
 [ GrB_eWiseMult emult:(B<B>=F.*B) masker:(B:H{B}=B) (bitmap to sparse) 
   0.728 sec ]
 [ GrB_Matrix_nvals 
   5.14e-07 sec ]
 [ GrB_Matrix_nvals 
   2.15e-07 sec ]
 [ GxB_set (sparse to bitmap) 
   0.128 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product dot3 (S{S}=S'*B) nthreads 40 ntasks 1280 (sparse to bitmap) 
   6.92 sec ]
 [ GrB_eWiseMult emult:(B<.>=B.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.159 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (pending: 0) Method: bitmap_subassign Method:bit4:whole C<M,struct,replace> = A 
   0.122 sec ]
 [ GrB_Matrix_nvals 
   5.53e-07 sec ]
 [ GrB_Matrix_nvals 
   2.42e-07 sec ]
 [ GxB_set 
   7.01e-07 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product dot3 (S{S}=S'*B) nthreads 40 ntasks 518 (sparse to bitmap) 
   0.0758 sec ]
 [ GrB_eWiseMult emult:(B<.>=B.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.124 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 (C empty) (pending: 0) Method 21: (C full) = scalar 
   0.0187 sec ]
 [ GrB_reduce C=A*B, saxpy (B=F*F) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT1: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.245 sec ]
BC time 40:      25.2540 (sec)

Trial 2 : sources: [ 75337937 169867 104041220 94177942 ]
 [ GxB_set (sparse to bitmap) 
   0.0591 sec ]
 [ GrB_mxm (wait: 0 zombies, 4 pending) (generic with typecast) (hyper to sparse) C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 17 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   8.49e-05 sec ]
 [ GrB_Matrix_nvals 
   6.43e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   2.74e-05 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   2.41e-05 sec ]
 [ GxB_set 
   5.81e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 401186 (use dense mask in-place) (nthreads 6 coarse hash: 2 fine hash: 5) 
   0.0208 sec ]
 [ GrB_Matrix_nvals 
   2e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   0.0249 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.00352 sec ]
 [ GxB_set 
   4.13e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 2.00132e+09 (use dense mask) (nthreads 40 fine: 154) 
   5.33 sec ]
 [ GrB_Matrix_nvals 
   5.05e-07 sec ]
 [ GrB_apply (shallow-op) (sparse to bitmap) 
   0.1 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.104 sec ]
 [ GxB_set (sparse to bitmap) 
   0.114 sec ]
 [ GrB_mxm C<!M>=A'*B, dot_product (B<!B>=S'*B) 
   1.83 sec ]
 [ GrB_Matrix_nvals 
   4.41e-07 sec ]
 [ GrB_apply (A bitmap) (shallow-op) 
   0.131 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.183 sec ]
 [ GxB_set 
   8.03e-07 sec ]
 [ GrB_mxm C<!M>=A'*B, dot_product (B<!B>=S'*B) 
   0.165 sec ]
 [ GrB_Matrix_nvals 
   3.11e-07 sec ]
 [ GrB_apply (A bitmap) (shallow-op) (bitmap to sparse) 
   0.105 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.0404 sec ]
 [ GxB_set (bitmap to sparse) 
   0.0521 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 2.61675e+06 (use dense mask in-place) (nthreads 39 coarse hash: 2 fine hash: 38) 
   0.0759 sec ]
 [ GrB_Matrix_nvals 
   4.82e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   0.00047 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.000484 sec ]
 [ GxB_set 
   4.72e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 6806 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   0.00154 sec ]
 [ GrB_Matrix_nvals 
   2.39e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   1.77e-05 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   2.06e-05 sec ]
 [ GxB_set 
   2.71e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 28 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   4.47e-05 sec ]
 [ GrB_Matrix_nvals 
   1.23e-07 sec ]

===================== backtrack phase
 [ GrB_assign WAIT8: 0 WAIT9: 0 (C empty) (pending: 0) Method 21: (C full) = scalar 
   0.0763 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.00235 sec ]
 [ GrB_Matrix_nvals 
   3.67e-07 sec ]
 [ GrB_Matrix_nvals 
   1.24e-07 sec ]
 [ GxB_set 
   5.19e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 28 mwork 6777 (discard mask) (intensity: 6.63e-09 workspace/(nnz(A)+nnz(B)): 0.0318) (nthreads 1 coarse hash: 1) (mask later) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (hyper to sparse) (C(:,:)<any mask>: C_replace early) (C empty) (pending: 0) Method 06s: C(:,:)<M> = Z ; using S (wait: 0 zombies, 0 pending, jumbled) 
   0.000227 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 28 pending) (hyper to sparse) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.000716 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.00103 sec ]
 [ GrB_Matrix_nvals 
   1.38e-07 sec ]
 [ GrB_Matrix_nvals 
   1.2e-07 sec ]
 [ GxB_set 
   2.55e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 6806 mwork 2.51566e+06 (discard mask) (intensity: 1.61e-06 workspace/(nnz(A)+nnz(B)): 0.0318) (nthreads 1 coarse hash: 1) (mask later) (wait: 0 zombies, 0 pending, jumbled) masker:(S:H{S}=S) 
   0.00616 sec ]
 [ GrB_eWiseMult emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.00133 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.0189 sec ]
 [ GrB_Matrix_nvals 
   3.27e-07 sec ]
 [ GrB_Matrix_nvals 
   3.43e-07 sec ]
 [ GxB_set 
   5.94e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{B}=S*S) axbwork 2.61675e+06 (use dense mask in-place) (nthreads 39 coarse hash: 2 fine hash: 38) 
   0.141 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 0 pending, jumbled) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.168 sec ]
 [ GrB_eWiseMult emult:(B<B>=F.*B) masker:(B:H{B}=B) (bitmap to sparse) 
   0.689 sec ]
 [ GrB_Matrix_nvals 
   5.07e-07 sec ]
 [ GrB_Matrix_nvals 
   1.71e-07 sec ]
 [ GxB_set (sparse to bitmap) 
   0.122 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product (B{B}=S'*B) 
   13.4 sec ]
 [ GrB_eWiseMult emult:(B<.>=B.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.34 sec ]
 [ GrB_eWiseMult emult:(B<B>=F.*B) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (pending: 0) Method: bitmap_subassign Method:bit2:whole C<M,bitmap,struct,replace> = A 
   0.407 sec ]
 [ GrB_Matrix_nvals 
   6.78e-07 sec ]
 [ GrB_Matrix_nvals 
   4.85e-07 sec ]
 [ GxB_set 
   4.57e-07 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product dot3 (S{S}=S'*B) nthreads 40 ntasks 1280 (sparse to bitmap) 
   2.89 sec ]
 [ GrB_eWiseMult emult:(B<.>=B.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.129 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (pending: 0) Method: bitmap_subassign Method:bit4:whole C<M,struct,replace> = A 
   0.0786 sec ]
 [ GrB_Matrix_nvals 
   4.3e-07 sec ]
 [ GrB_Matrix_nvals 
   2.36e-07 sec ]
 [ GxB_set (bitmap to sparse) 
   0.0478 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 9.92891e+07 mwork 17 (use mask) (nthreads 40 coarse hash: 1 fine: 159) 
   0.124 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 0 pending, jumbled) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.00233 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 (C empty) (pending: 0) Method 21: (C full) = scalar 
   0.0183 sec ]
 [ GrB_reduce C=A*B, saxpy (B=F*F) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT1: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.215 sec ]
BC time 40:      27.3655 (sec)

Trial 3 : sources: [ 32871357 56230002 69883037 9346345 ]
 [ GxB_set (sparse to bitmap) 
   0.059 sec ]
 [ GrB_mxm (wait: 0 zombies, 4 pending) (generic with typecast) (hyper to sparse) C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 75 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   8.26e-05 sec ]
 [ GrB_Matrix_nvals 
   6.53e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   2.51e-05 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   2.89e-05 sec ]
 [ GxB_set 
   5.77e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 574103 (use dense mask in-place) (nthreads 8 coarse hash: 2 fine hash: 9) 
   0.0143 sec ]
 [ GrB_Matrix_nvals 
   4.44e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   0.0373 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.00295 sec ]
 [ GxB_set 
   3.69e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 1.84521e+09 (use dense mask) (nthreads 40 fine: 153) 
   5.01 sec ]
 [ GrB_Matrix_nvals 
   4.16e-07 sec ]
 [ GrB_apply (shallow-op) (sparse to bitmap) 
   0.094 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.0937 sec ]
 [ GxB_set (sparse to bitmap) 
   0.104 sec ]
 [ GrB_mxm C<!M>=A'*B, dot_product (B<!B>=S'*B) 
   3.51 sec ]
 [ GrB_Matrix_nvals 
   4.54e-07 sec ]
 [ GrB_apply (A bitmap) (shallow-op) 
   0.117 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.151 sec ]
 [ GxB_set 
   1.31e-06 sec ]
 [ GrB_mxm C<!M>=A'*B, dot_product (B<!B>=S'*B) 
   0.195 sec ]
 [ GrB_Matrix_nvals 
   3.71e-07 sec ]
 [ GrB_apply (A bitmap) (shallow-op) (bitmap to sparse) 
   0.107 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.0473 sec ]
 [ GxB_set (bitmap to sparse) 
   0.0588 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 8.0516e+06 (use dense mask in-place) (nthreads 40 coarse hash: 1 fine hash: 123) 
   0.126 sec ]
 [ GrB_Matrix_nvals 
   6.16e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   0.00161 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.00113 sec ]
 [ GxB_set 
   3.66e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 20818 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   0.00363 sec ]
 [ GrB_Matrix_nvals 
   1.82e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   1.7e-05 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   1.84e-05 sec ]
 [ GxB_set 
   2.28e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 65 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   4.29e-05 sec ]
 [ GrB_Matrix_nvals 
   7.4e-08 sec ]

===================== backtrack phase
 [ GrB_assign WAIT8: 0 WAIT9: 0 (C empty) (pending: 0) Method 21: (C full) = scalar 
   0.0774 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.000512 sec ]
 [ GrB_Matrix_nvals 
   1.83e-07 sec ]
 [ GrB_Matrix_nvals 
   6.19e-08 sec ]
 [ GxB_set 
   4.76e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 65 mwork 20581 (discard mask) (intensity: 1.54e-08 workspace/(nnz(A)+nnz(B)): 0.0318) (nthreads 1 coarse hash: 1) (mask later) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (hyper to sparse) (C(:,:)<any mask>: C_replace early) (C empty) (pending: 0) Method 06s: C(:,:)<M> = Z ; using S (wait: 0 zombies, 0 pending, jumbled) 
   0.000261 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 65 pending) (hyper to sparse) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.000581 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.001 sec ]
 [ GrB_Matrix_nvals 
   1.75e-07 sec ]
 [ GrB_Matrix_nvals 
   1.75e-07 sec ]
 [ GxB_set 
   3.32e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 20818 mwork 6.90249e+06 (discard mask) (intensity: 4.93e-06 workspace/(nnz(A)+nnz(B)): 0.0318) (nthreads 1 coarse hash: 1) (mask later) (wait: 0 zombies, 0 pending, jumbled) masker:(S:H{S}=S) 
   0.0227 sec ]
 [ GrB_eWiseMult emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.00174 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.0391 sec ]
 [ GrB_Matrix_nvals 
   4.37e-07 sec ]
 [ GrB_Matrix_nvals 
   1.58e-07 sec ]
 [ GxB_set 
   4.02e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{B}=S*S) axbwork 8.0516e+06 (use dense mask in-place) (nthreads 40 coarse hash: 1 fine hash: 123) 
   0.195 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 0 pending, jumbled) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.466 sec ]
 [ GrB_eWiseMult emult:(B<B>=F.*B) masker:(B:H{B}=B) (bitmap to sparse) 
   0.694 sec ]
 [ GrB_Matrix_nvals 
   4.57e-07 sec ]
 [ GrB_Matrix_nvals 
   1.46e-07 sec ]
 [ GxB_set (sparse to bitmap) 
   0.12 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product (B{B}=S'*B) 
   13.5 sec ]
 [ GrB_eWiseMult emult:(B<.>=B.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.315 sec ]
 [ GrB_eWiseMult emult:(B<B>=F.*B) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (pending: 0) Method: bitmap_subassign Method:bit2:whole C<M,bitmap,struct,replace> = A 
   0.466 sec ]
 [ GrB_Matrix_nvals 
   4.59e-07 sec ]
 [ GrB_Matrix_nvals 
   2.29e-07 sec ]
 [ GxB_set 
   8.4e-07 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product dot3 (S{S}=S'*B) nthreads 40 ntasks 1280 (sparse to bitmap) 
   2.7 sec ]
 [ GrB_eWiseMult emult:(B<.>=B.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.126 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (pending: 0) Method: bitmap_subassign Method:bit4:whole C<M,struct,replace> = A 
   0.0625 sec ]
 [ GrB_Matrix_nvals 
   4.66e-07 sec ]
 [ GrB_Matrix_nvals 
   2.19e-07 sec ]
 [ GxB_set (bitmap to sparse) 
   0.0541 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 5.89397e+08 mwork 75 (use mask) (nthreads 40 coarse: 1 coarse hash: 1 fine: 159) 
   0.425 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 0 pending, jumbled) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.000731 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 (C empty) (pending: 0) Method 21: (C full) = scalar 
   0.019 sec ]
 [ GrB_reduce C=A*B, saxpy (B=F*F) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT1: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.243 sec ]
BC time 40:      29.3539 (sec)

Trial 4 : sources: [ 48915358 122571173 6183279 86323663 ]
 [ GxB_set (sparse to bitmap) 
   0.0606 sec ]
 [ GrB_mxm (wait: 0 zombies, 4 pending) (generic with typecast) (hyper to sparse) C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 12 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   8.36e-05 sec ]
 [ GrB_Matrix_nvals 
   7.72e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   2.75e-05 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   2.54e-05 sec ]
 [ GxB_set 
   7.05e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 139380 (use dense mask in-place) (nthreads 2 coarse hash: 2) 
   0.00523 sec ]
 [ GrB_Matrix_nvals 
   2.2e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   0.00319 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.00303 sec ]
 [ GxB_set 
   2.77e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 1.13094e+09 (use dense mask) (nthreads 40 fine: 151) 
   3.38 sec ]
 [ GrB_Matrix_nvals 
   6.36e-07 sec ]
 [ GrB_apply (shallow-op) (sparse to bitmap) 
   0.0852 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.0833 sec ]
 [ GxB_set (sparse to bitmap) 
   0.0954 sec ]
 [ GrB_mxm C<!M>=A'*B, dot_product (B<!B>=S'*B) 
   4.36 sec ]
 [ GrB_Matrix_nvals 
   3.54e-07 sec ]
 [ GrB_apply (A bitmap) (shallow-op) 
   0.126 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.175 sec ]
 [ GxB_set 
   6.24e-07 sec ]
 [ GrB_mxm C<!M>=A'*B, dot_product (B<!B>=S'*B) 
   0.218 sec ]
 [ GrB_Matrix_nvals 
   4.31e-07 sec ]
 [ GrB_apply (A bitmap) (shallow-op) (bitmap to sparse) 
   0.119 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.0492 sec ]
 [ GxB_set (bitmap to sparse) 
   0.0652 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 1.44791e+07 (use dense mask in-place) (nthreads 40 coarse hash: 2 fine hash: 156) 
   0.205 sec ]
 [ GrB_Matrix_nvals 
   4.74e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   0.00335 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.00172 sec ]
 [ GxB_set 
   2.45e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 37505 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   0.00676 sec ]
 [ GrB_Matrix_nvals 
   2.05e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   2.25e-05 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   2.42e-05 sec ]
 [ GxB_set 
   2.08e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 110 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   5.28e-05 sec ]
 [ GrB_Matrix_nvals 
   1.61e-07 sec ]

===================== backtrack phase
 [ GrB_assign WAIT8: 0 WAIT9: 0 (C empty) (pending: 0) Method 21: (C full) = scalar 
   0.0751 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.000488 sec ]
 [ GrB_Matrix_nvals 
   2.13e-07 sec ]
 [ GrB_Matrix_nvals 
   1.31e-07 sec ]
 [ GxB_set 
   3.22e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 110 mwork 37351 (discard mask) (intensity: 2.6e-08 workspace/(nnz(A)+nnz(B)): 0.0318) (nthreads 1 coarse hash: 1) (mask later) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (hyper to sparse) (C(:,:)<any mask>: C_replace early) (C empty) (pending: 0) Method 06s: C(:,:)<M> = Z ; using S (wait: 0 zombies, 0 pending, jumbled) 
   0.000293 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 110 pending) (hyper to sparse) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.000617 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.00263 sec ]
 [ GrB_Matrix_nvals 
   1.71e-07 sec ]
 [ GrB_Matrix_nvals 
   1.29e-07 sec ]
 [ GxB_set 
   2.67e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 37505 mwork 1.09321e+07 (discard mask) (intensity: 8.88e-06 workspace/(nnz(A)+nnz(B)): 0.0318) (nthreads 1 coarse hash: 1) (mask later) (wait: 0 zombies, 0 pending, jumbled) masker:(S:H{S}=S) 
   0.0363 sec ]
 [ GrB_eWiseMult emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.00748 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.0443 sec ]
 [ GrB_Matrix_nvals 
   2.3e-07 sec ]
 [ GrB_Matrix_nvals 
   1.39e-07 sec ]
 [ GxB_set 
   2.96e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{B}=S*S) axbwork 1.44791e+07 (use dense mask in-place) (nthreads 40 coarse hash: 2 fine hash: 156) 
   0.344 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 0 pending, jumbled) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.644 sec ]
 [ GrB_eWiseMult emult:(B<B>=F.*B) masker:(B:H{B}=B) (bitmap to sparse) 
   0.699 sec ]
 [ GrB_Matrix_nvals 
   5.5e-07 sec ]
 [ GrB_Matrix_nvals 
   1.96e-07 sec ]
 [ GxB_set (sparse to bitmap) 
   0.124 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product (B{B}=S'*B) 
   13.8 sec ]
 [ GrB_eWiseMult emult:(B<.>=B.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.285 sec ]
 [ GrB_eWiseMult emult:(B<B>=F.*B) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (pending: 0) Method: bitmap_subassign Method:bit2:whole C<M,bitmap,struct,replace> = A 
   0.393 sec ]
 [ GrB_Matrix_nvals 
   3.91e-07 sec ]
 [ GrB_Matrix_nvals 
   2.49e-07 sec ]
 [ GxB_set 
   4.38e-07 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product dot3 (S{S}=S'*B) nthreads 40 ntasks 1280 (sparse to bitmap) 
   1.67 sec ]
 [ GrB_eWiseMult emult:(B<.>=B.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.125 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (pending: 0) Method: bitmap_subassign Method:bit4:whole C<M,struct,replace> = A 
   0.0703 sec ]
 [ GrB_Matrix_nvals 
   4.75e-07 sec ]
 [ GrB_Matrix_nvals 
   2.07e-07 sec ]
 [ GxB_set (bitmap to sparse) 
   0.0538 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 2.55891e+07 mwork 12 (use mask) (nthreads 40 coarse hash: 2 fine: 158) 
   0.0886 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 0 pending, jumbled) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.00564 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 (C empty) (pending: 0) Method 21: (C full) = scalar 
   0.0184 sec ]
 [ GrB_reduce C=A*B, saxpy (B=F*F) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT1: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.252 sec ]
BC time 40:      27.9282 (sec)

Trial 5 : sources: [ 106725780 92389938 16210738 59816700 ]
 [ GxB_set (sparse to bitmap) 
   0.0635 sec ]
 [ GrB_mxm (wait: 0 zombies, 4 pending) (generic with typecast) (hyper to sparse) C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 99 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   0.000123 sec ]
 [ GrB_Matrix_nvals 
   7.09e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   3.39e-05 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   3.39e-05 sec ]
 [ GxB_set 
   5.88e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 1.78226e+06 (use dense mask in-place) (nthreads 27 coarse hash: 1 fine hash: 28) 
   0.022 sec ]
 [ GrB_Matrix_nvals 
   2.66e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   0.0596 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.00711 sec ]
 [ GxB_set 
   6.82e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 4.86479e+09 (use dense mask) (nthreads 40 fine: 157) 
   12.6 sec ]
 [ GrB_Matrix_nvals 
   5.79e-07 sec ]
 [ GrB_apply (shallow-op) (sparse to bitmap) 
   0.13 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.118 sec ]
 [ GxB_set (sparse to bitmap) 
   0.127 sec ]
 [ GrB_mxm C<!M>=A'*B, dot_product (B<!B>=S'*B) 
   0.687 sec ]
 [ GrB_Matrix_nvals 
   3.65e-07 sec ]
 [ GrB_apply (A bitmap) (shallow-op) 
   0.0907 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.148 sec ]
 [ GxB_set 
   7.8e-07 sec ]
 [ GrB_mxm C<!M>=A'*B, dot_product (B<!B>=S'*B) 
   0.154 sec ]
 [ GrB_Matrix_nvals 
   4.07e-07 sec ]
 [ GrB_apply (A bitmap) (shallow-op) (bitmap to sparse) 
   0.102 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.0331 sec ]
 [ GxB_set (bitmap to sparse) 
   0.0522 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 517595 (use dense mask in-place) (nthreads 7 coarse hash: 3 fine hash: 6) 
   0.0265 sec ]
 [ GrB_Matrix_nvals 
   4.43e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   8.47e-05 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.000111 sec ]
 [ GxB_set 
   3.06e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 1368 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   0.000259 sec ]
 [ GrB_Matrix_nvals 
   6.22e-08 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   1.28e-05 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   1.41e-05 sec ]
 [ GxB_set 
   1.78e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 5 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   3.17e-05 sec ]
 [ GrB_Matrix_nvals 
   4.91e-08 sec ]

===================== backtrack phase
 [ GrB_assign WAIT8: 0 WAIT9: 0 (C empty) (pending: 0) Method 21: (C full) = scalar 
   0.0799 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.00191 sec ]
 [ GrB_Matrix_nvals 
   3.8e-07 sec ]
 [ GrB_Matrix_nvals 
   3.8e-07 sec ]
 [ GxB_set 
   8.09e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 5 mwork 1086 (discard mask) (intensity: 1.18e-09 workspace/(nnz(A)+nnz(B)): 0.0318) (nthreads 1 coarse hash: 1) (mask later) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (hyper to sparse) (C(:,:)<any mask>: C_replace early) (C empty) (pending: 0) Method 06s: C(:,:)<M> = Z ; using S (wait: 0 zombies, 0 pending, jumbled) 
   0.000219 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 5 pending) (hyper to sparse) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.0007 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.000828 sec ]
 [ GrB_Matrix_nvals 
   1.84e-07 sec ]
 [ GrB_Matrix_nvals 
   5.4e-08 sec ]
 [ GxB_set 
   2.6e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 1368 mwork 512193 (discard mask) (intensity: 3.24e-07 workspace/(nnz(A)+nnz(B)): 0.0318) (nthreads 1 coarse hash: 1) (mask later) (wait: 0 zombies, 0 pending, jumbled) masker:(S:H{S}=S) 
   0.00125 sec ]
 [ GrB_eWiseMult emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.00115 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.00541 sec ]
 [ GrB_Matrix_nvals 
   2.68e-07 sec ]
 [ GrB_Matrix_nvals 
   1.27e-07 sec ]
 [ GxB_set 
   1.58e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{B}=S*S) axbwork 517595 (use dense mask in-place) (nthreads 7 coarse hash: 3 fine hash: 6) 
   0.069 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 0 pending, jumbled) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.0378 sec ]
 [ GrB_eWiseMult emult:(B<B>=F.*B) masker:(B:H{B}=B) (bitmap to sparse) 
   0.594 sec ]
 [ GrB_Matrix_nvals 
   4.63e-07 sec ]
 [ GrB_Matrix_nvals 
   1.44e-07 sec ]
 [ GxB_set 
   1.73e-06 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{B}=S*S) axbwork 1.88152e+08 (use dense mask) (nthreads 40 fine: 138) 
   1.32 sec ]
 [ GrB_eWiseMult emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.133 sec ]
 [ GrB_eWiseMult emult:(B<B>=F.*B) masker:(B:H{B}=B) (bitmap to sparse) 
   0.74 sec ]
 [ GrB_Matrix_nvals 
   4.61e-07 sec ]
 [ GrB_Matrix_nvals 
   1.49e-07 sec ]
 [ GxB_set (sparse to bitmap) 
   0.128 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product dot3 (S{S}=S'*B) nthreads 40 ntasks 1280 (sparse to bitmap) 
   6.85 sec ]
 [ GrB_eWiseMult emult:(B<.>=B.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.132 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (pending: 0) Method: bitmap_subassign Method:bit4:whole C<M,struct,replace> = A 
   0.0663 sec ]
 [ GrB_Matrix_nvals 
   4.67e-07 sec ]
 [ GrB_Matrix_nvals 
   2.28e-07 sec ]
 [ GxB_set (bitmap to sparse) 
   0.0343 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 1.10389e+09 mwork 99 (use mask) (nthreads 40 coarse: 1 fine: 160) 
   0.72 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 0 pending, jumbled) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.000909 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 (C empty) (pending: 0) Method 21: (C full) = scalar 
   0.0186 sec ]
 [ GrB_reduce C=A*B, saxpy (B=F*F) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT1: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.211 sec ]
BC time 40:      25.6876 (sec)

Trial 6 : sources: [ 111669929 102831411 113384800 43872564 ]
 [ GxB_set (sparse to bitmap) 
   0.0614 sec ]
 [ GrB_mxm (wait: 0 zombies, 4 pending) (generic with typecast) (hyper to sparse) C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 78 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   8.32e-05 sec ]
 [ GrB_Matrix_nvals 
   3.3e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   2.99e-05 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   2.95e-05 sec ]
 [ GxB_set 
   5.39e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 1.2014e+06 (use dense mask in-place) (nthreads 18 coarse hash: 1 fine hash: 19) 
   0.023 sec ]
 [ GrB_Matrix_nvals 
   3.51e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   0.0833 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.00426 sec ]
 [ GxB_set 
   5.93e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 2.22428e+09 (use dense mask) (nthreads 40 fine: 153) 
   5.67 sec ]
 [ GrB_Matrix_nvals 
   5.16e-07 sec ]
 [ GrB_apply (shallow-op) (sparse to bitmap) 
   0.0988 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.098 sec ]
 [ GxB_set (sparse to bitmap) 
   0.111 sec ]
 [ GrB_mxm C<!M>=A'*B, dot_product (B<!B>=S'*B) 
   2.58 sec ]
 [ GrB_Matrix_nvals 
   5.31e-07 sec ]
 [ GrB_apply (A bitmap) (shallow-op) 
   0.107 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.156 sec ]
 [ GxB_set 
   7.54e-07 sec ]
 [ GrB_mxm C<!M>=A'*B, dot_product (B<!B>=S'*B) 
   0.173 sec ]
 [ GrB_Matrix_nvals 
   3.49e-07 sec ]
 [ GrB_apply (A bitmap) (shallow-op) (bitmap to sparse) 
   0.105 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.047 sec ]
 [ GxB_set (bitmap to sparse) 
   0.0649 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 4.23922e+06 (use dense mask in-place) (nthreads 40 coarse hash: 1 fine hash: 66) 
   0.0862 sec ]
 [ GrB_Matrix_nvals 
   4.33e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   0.000845 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.000802 sec ]
 [ GxB_set 
   5.02e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 10893 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   0.00205 sec ]
 [ GrB_Matrix_nvals 
   1.22e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   1.35e-05 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   1.6e-05 sec ]
 [ GxB_set 
   1.14e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 41 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   3.39e-05 sec ]
 [ GrB_Matrix_nvals 
   6.38e-08 sec ]

===================== backtrack phase
 [ GrB_assign WAIT8: 0 WAIT9: 0 (C empty) (pending: 0) Method 21: (C full) = scalar 
   0.0755 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.00818 sec ]
 [ GrB_Matrix_nvals 
   3.21e-07 sec ]
 [ GrB_Matrix_nvals 
   1.26e-07 sec ]
 [ GxB_set 
   3.25e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 41 mwork 10752 (discard mask) (intensity: 9.71e-09 workspace/(nnz(A)+nnz(B)): 0.0318) (nthreads 1 coarse hash: 1) (mask later) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (hyper to sparse) (C(:,:)<any mask>: C_replace early) (C empty) (pending: 0) Method 06s: C(:,:)<M> = Z ; using S (wait: 0 zombies, 0 pending, jumbled) 
   0.000234 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 41 pending) (hyper to sparse) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.00076 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.000762 sec ]
 [ GrB_Matrix_nvals 
   2.02e-07 sec ]
 [ GrB_Matrix_nvals 
   5.49e-08 sec ]
 [ GxB_set 
   2.77e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 10893 mwork 4.0171e+06 (discard mask) (intensity: 2.58e-06 workspace/(nnz(A)+nnz(B)): 0.0318) (nthreads 1 coarse hash: 1) (mask later) (wait: 0 zombies, 0 pending, jumbled) masker:(S:H{S}=S) 
   0.00951 sec ]
 [ GrB_eWiseMult emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.00131 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.0332 sec ]
 [ GrB_Matrix_nvals 
   3.44e-07 sec ]
 [ GrB_Matrix_nvals 
   1.48e-07 sec ]
 [ GxB_set 
   4.32e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{B}=S*S) axbwork 4.23922e+06 (use dense mask in-place) (nthreads 40 coarse hash: 1 fine hash: 66) 
   0.135 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 0 pending, jumbled) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.24 sec ]
 [ GrB_eWiseMult emult:(B<B>=F.*B) masker:(B:H{B}=B) (bitmap to sparse) 
   0.654 sec ]
 [ GrB_Matrix_nvals 
   4.48e-07 sec ]
 [ GrB_Matrix_nvals 
   1.73e-07 sec ]
 [ GxB_set (sparse to bitmap) 
   0.126 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product (B{B}=S'*B) 
   13.4 sec ]
 [ GrB_eWiseMult emult:(B<.>=B.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.323 sec ]
 [ GrB_eWiseMult emult:(B<B>=F.*B) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (pending: 0) Method: bitmap_subassign Method:bit2:whole C<M,bitmap,struct,replace> = A 
   0.41 sec ]
 [ GrB_Matrix_nvals 
   4.78e-07 sec ]
 [ GrB_Matrix_nvals 
   4.73e-07 sec ]
 [ GxB_set 
   6.57e-07 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product dot3 (S{S}=S'*B) nthreads 40 ntasks 1280 (sparse to bitmap) 
   3.11 sec ]
 [ GrB_eWiseMult emult:(B<.>=B.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.129 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (pending: 0) Method: bitmap_subassign Method:bit4:whole C<M,struct,replace> = A 
   0.0935 sec ]
 [ GrB_Matrix_nvals 
   3.68e-07 sec ]
 [ GrB_Matrix_nvals 
   1.62e-07 sec ]
 [ GxB_set (bitmap to sparse) 
   0.0534 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 1.00011e+09 mwork 78 (use mask) (nthreads 40 coarse hash: 1 fine: 160) 
   0.433 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 0 pending, jumbled) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.00856 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 (C empty) (pending: 0) Method 21: (C full) = scalar 
   0.0204 sec ]
 [ GrB_reduce C=A*B, saxpy (B=F*F) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT1: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.25 sec ]
BC time 40:      29.1215 (sec)

Trial 7 : sources: [ 80508827 26105648 8807516 118452455 ]
 [ GxB_set (sparse to bitmap) 
   0.0614 sec ]
 [ GrB_mxm (wait: 0 zombies, 4 pending) (generic with typecast) (hyper to sparse) C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 54 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   8.22e-05 sec ]
 [ GrB_Matrix_nvals 
   1.03e-06 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   2.89e-05 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   2.89e-05 sec ]
 [ GxB_set 
   6.38e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 843023 (use dense mask in-place) (nthreads 12 coarse hash: 1 fine hash: 13) 
   0.0216 sec ]
 [ GrB_Matrix_nvals 
   4.1e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   0.0394 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.00365 sec ]
 [ GxB_set 
   5.93e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 3.00138e+09 (use dense mask) (nthreads 40 fine: 156) 
   8.37 sec ]
 [ GrB_Matrix_nvals 
   7.65e-07 sec ]
 [ GrB_apply (shallow-op) (sparse to bitmap) 
   0.105 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.103 sec ]
 [ GxB_set (sparse to bitmap) 
   0.113 sec ]
 [ GrB_mxm C<!M>=A'*B, dot_product (B<!B>=S'*B) 
   2 sec ]
 [ GrB_Matrix_nvals 
   2.69e-07 sec ]
 [ GrB_apply (A bitmap) (shallow-op) 
   0.102 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.129 sec ]
 [ GxB_set 
   8.78e-07 sec ]
 [ GrB_mxm C<!M>=A'*B, dot_product (B<!B>=S'*B) 
   0.165 sec ]
 [ GrB_Matrix_nvals 
   1.81e-07 sec ]
 [ GrB_apply (A bitmap) (shallow-op) (bitmap to sparse) 
   0.0768 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.0347 sec ]
 [ GxB_set (bitmap to sparse) 
   0.0389 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 3.44721e+06 (use dense mask in-place) (nthreads 40 coarse hash: 2 fine hash: 51) 
   0.0675 sec ]
 [ GrB_Matrix_nvals 
   4.6e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   0.000661 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.000564 sec ]
 [ GxB_set 
   4.62e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 8860 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   0.00149 sec ]
 [ GrB_Matrix_nvals 
   6.68e-08 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   1.36e-05 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   1.59e-05 sec ]
 [ GxB_set 
   1.48e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 30 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   3.35e-05 sec ]
 [ GrB_Matrix_nvals 
   5.98e-08 sec ]

===================== backtrack phase
 [ GrB_assign WAIT8: 0 WAIT9: 0 (C empty) (pending: 0) Method 21: (C full) = scalar 
   0.0742 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.000503 sec ]
 [ GrB_Matrix_nvals 
   3.5e-07 sec ]
 [ GrB_Matrix_nvals 
   1.29e-07 sec ]
 [ GxB_set 
   4.21e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 30 mwork 8668 (discard mask) (intensity: 7.1e-09 workspace/(nnz(A)+nnz(B)): 0.0318) (nthreads 1 coarse hash: 1) (mask later) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (hyper to sparse) (C(:,:)<any mask>: C_replace early) (C empty) (pending: 0) Method 06s: C(:,:)<M> = Z ; using S (wait: 0 zombies, 0 pending, jumbled) 
   0.000231 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 30 pending) (hyper to sparse) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.000517 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.000725 sec ]
 [ GrB_Matrix_nvals 
   1.3e-07 sec ]
 [ GrB_Matrix_nvals 
   2.7e-07 sec ]
 [ GxB_set 
   3.23e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 8860 mwork 3.18414e+06 (discard mask) (intensity: 2.1e-06 workspace/(nnz(A)+nnz(B)): 0.0318) (nthreads 1 coarse hash: 1) (mask later) (wait: 0 zombies, 0 pending, jumbled) masker:(S:H{S}=S) 
   0.00809 sec ]
 [ GrB_eWiseMult emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.00114 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.0218 sec ]
 [ GrB_Matrix_nvals 
   2.89e-07 sec ]
 [ GrB_Matrix_nvals 
   1.49e-07 sec ]
 [ GxB_set 
   3.42e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{B}=S*S) axbwork 3.44721e+06 (use dense mask in-place) (nthreads 40 coarse hash: 2 fine hash: 51) 
   0.126 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 0 pending, jumbled) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.264 sec ]
 [ GrB_eWiseMult emult:(B<B>=F.*B) masker:(B:H{B}=B) (bitmap to sparse) 
   0.566 sec ]
 [ GrB_Matrix_nvals 
   6.13e-07 sec ]
 [ GrB_Matrix_nvals 
   1.65e-07 sec ]
 [ GxB_set 
   1.35e-06 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{B}=S*S) axbwork 8.55676e+08 (use dense mask) (nthreads 40 fine: 148) 
   2.94 sec ]
 [ GrB_eWiseMult emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.131 sec ]
 [ GrB_eWiseMult emult:(B<B>=F.*B) masker:(B:H{B}=B) (bitmap to sparse) 
   0.544 sec ]
 [ GrB_Matrix_nvals 
   6.68e-07 sec ]
 [ GrB_Matrix_nvals 
   1.97e-07 sec ]
 [ GxB_set (sparse to bitmap) 
   0.113 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product dot3 (S{S}=S'*B) nthreads 40 ntasks 1280 (sparse to bitmap) 
   4.33 sec ]
 [ GrB_eWiseMult emult:(B<.>=B.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.115 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (pending: 0) Method: bitmap_subassign Method:bit4:whole C<M,struct,replace> = A 
   0.0545 sec ]
 [ GrB_Matrix_nvals 
   3.69e-07 sec ]
 [ GrB_Matrix_nvals 
   2.77e-07 sec ]
 [ GxB_set (bitmap to sparse) 
   0.0314 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 4.8536e+08 mwork 54 (use mask) (nthreads 40 coarse: 1 fine: 157) 
   0.554 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 0 pending, jumbled) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.000633 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 (C empty) (pending: 0) Method 21: (C full) = scalar 
   0.0181 sec ]
 [ GrB_reduce C=A*B, saxpy (B=F*F) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT1: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.222 sec ]
BC time 40:      21.6757 (sec)

Trial 8 : sources: [ 121818859 42361928 29493053 98461503 ]
 [ GxB_set (sparse to bitmap) 
   0.0615 sec ]
 [ GrB_mxm (wait: 0 zombies, 4 pending) (generic with typecast) (hyper to sparse) C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 6 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   7.72e-05 sec ]
 [ GrB_Matrix_nvals 
   9.03e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   3.31e-05 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   2.4e-05 sec ]
 [ GxB_set 
   6.13e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 21490 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   0.00136 sec ]
 [ GrB_Matrix_nvals 
   1.46e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   0.000261 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.000961 sec ]
 [ GxB_set 
   2.1e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 2.95621e+08 (use dense mask) (nthreads 40 fine: 140) 
   1.09 sec ]
 [ GrB_Matrix_nvals 
   4.34e-07 sec ]
 [ GrB_apply (shallow-op) (sparse to bitmap) 
   0.0708 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.0895 sec ]
 [ GxB_set (sparse to bitmap) 
   0.099 sec ]
 [ GrB_mxm C<!M>=A'*B, dot_product (B<!B>=S'*B) 
   3.04 sec ]
 [ GrB_Matrix_nvals 
   4.1e-07 sec ]
 [ GrB_apply (A bitmap) (shallow-op) 
   0.102 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.129 sec ]
 [ GxB_set 
   1.23e-06 sec ]
 [ GrB_mxm C<!M>=A'*B, dot_product (B<!B>=S'*B) 
   0.168 sec ]
 [ GrB_Matrix_nvals 
   3.65e-07 sec ]
 [ GrB_apply (A bitmap) (shallow-op) (bitmap to sparse) 
   0.0743 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.0441 sec ]
 [ GxB_set (bitmap to sparse) 
   0.0392 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 4.92732e+06 (use dense mask in-place) (nthreads 40 fine hash: 77) 
   0.0687 sec ]
 [ GrB_Matrix_nvals 
   4.52e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   0.000903 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.000938 sec ]
 [ GxB_set 
   3.92e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 12763 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   0.00254 sec ]
 [ GrB_Matrix_nvals 
   1.77e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   1.4e-05 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   1.79e-05 sec ]
 [ GxB_set 
   1.4e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 46 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   3.72e-05 sec ]
 [ GrB_Matrix_nvals 
   5.01e-08 sec ]

===================== backtrack phase
 [ GrB_assign WAIT8: 0 WAIT9: 0 (C empty) (pending: 0) Method 21: (C full) = scalar 
   0.0745 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.000505 sec ]
 [ GrB_Matrix_nvals 
   4.17e-07 sec ]
 [ GrB_Matrix_nvals 
   2.01e-07 sec ]
 [ GxB_set 
   4.14e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 46 mwork 12715 (discard mask) (intensity: 1.09e-08 workspace/(nnz(A)+nnz(B)): 0.0318) (nthreads 1 coarse hash: 1) (mask later) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (hyper to sparse) (C(:,:)<any mask>: C_replace early) (C empty) (pending: 0) Method 06s: C(:,:)<M> = Z ; using S (wait: 0 zombies, 0 pending, jumbled) 
   0.000252 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 46 pending) (hyper to sparse) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.000621 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.000839 sec ]
 [ GrB_Matrix_nvals 
   2.16e-07 sec ]
 [ GrB_Matrix_nvals 
   1.39e-07 sec ]
 [ GxB_set 
   2.84e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 12763 mwork 4.7126e+06 (discard mask) (intensity: 3.02e-06 workspace/(nnz(A)+nnz(B)): 0.0318) (nthreads 1 coarse hash: 1) (mask later) (wait: 0 zombies, 0 pending, jumbled) masker:(S:H{S}=S) 
   0.0107 sec ]
 [ GrB_eWiseMult emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.00169 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.0319 sec ]
 [ GrB_Matrix_nvals 
   2.62e-07 sec ]
 [ GrB_Matrix_nvals 
   3.34e-07 sec ]
 [ GxB_set 
   3.72e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{B}=S*S) axbwork 4.92732e+06 (use dense mask in-place) (nthreads 40 fine hash: 77) 
   0.0894 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 0 pending, jumbled) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.184 sec ]
 [ GrB_eWiseMult emult:(B<B>=F.*B) masker:(B:H{B}=B) (bitmap to sparse) 
   0.589 sec ]
 [ GrB_Matrix_nvals 
   5e-07 sec ]
 [ GrB_Matrix_nvals 
   1.49e-07 sec ]
 [ GxB_set (sparse to bitmap) 
   0.128 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product (B{B}=S'*B) 
   14.9 sec ]
 [ GrB_eWiseMult emult:(B<.>=B.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.312 sec ]
 [ GrB_eWiseMult emult:(B<B>=F.*B) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (pending: 0) Method: bitmap_subassign Method:bit2:whole C<M,bitmap,struct,replace> = A 
   0.346 sec ]
 [ GrB_Matrix_nvals 
   3.77e-07 sec ]
 [ GrB_Matrix_nvals 
   3.95e-07 sec ]
 [ GxB_set 
   3.9e-07 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product dot3 (S{S}=S'*B) nthreads 40 ntasks 1276 (sparse to bitmap) 
   0.453 sec ]
 [ GrB_eWiseMult emult:(B<.>=B.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.108 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (pending: 0) Method: bitmap_subassign Method:bit4:whole C<M,struct,replace> = A 
   0.0453 sec ]
 [ GrB_Matrix_nvals 
   5.91e-07 sec ]
 [ GrB_Matrix_nvals 
   2.24e-07 sec ]
 [ GxB_set (bitmap to sparse) 
   0.0315 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 1.70092e+06 mwork 6 (use mask) (nthreads 25 coarse hash: 1 fine hash: 26) 
   0.0145 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 0 pending, jumbled) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.00197 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 (C empty) (pending: 0) Method 21: (C full) = scalar 
   0.0184 sec ]
 [ GrB_reduce C=A*B, saxpy (B=F*F) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT1: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.242 sec ]
BC time 40:      22.7592 (sec)

Trial 9 : sources: [ 71931337 103808468 4092345 115276241 ]
 [ GxB_set (sparse to bitmap) 
   0.0612 sec ]
 [ GrB_mxm (wait: 0 zombies, 4 pending) (generic with typecast) (hyper to sparse) C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 19 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   7.64e-05 sec ]
 [ GrB_Matrix_nvals 
   7.78e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   2.67e-05 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   2.27e-05 sec ]
 [ GxB_set 
   5.26e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 75730 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   0.00471 sec ]
 [ GrB_Matrix_nvals 
   2.05e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   0.0026 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.00235 sec ]
 [ GxB_set 
   3.14e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 7.67193e+08 (use dense mask) (nthreads 40 fine: 147) 
   2.33 sec ]
 [ GrB_Matrix_nvals 
   4.39e-07 sec ]
 [ GrB_apply (shallow-op) (sparse to bitmap) 
   0.0794 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.0888 sec ]
 [ GxB_set (sparse to bitmap) 
   0.0981 sec ]
 [ GrB_mxm C<!M>=A'*B, dot_product (B<!B>=S'*B) 
   3.53 sec ]
 [ GrB_Matrix_nvals 
   3.64e-07 sec ]
 [ GrB_apply (A bitmap) (shallow-op) 
   0.101 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.129 sec ]
 [ GxB_set 
   7.37e-07 sec ]
 [ GrB_mxm C<!M>=A'*B, dot_product (B<!B>=S'*B) 
   0.185 sec ]
 [ GrB_Matrix_nvals 
   2.39e-07 sec ]
 [ GrB_apply (A bitmap) (shallow-op) (bitmap to sparse) 
   0.0804 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.0419 sec ]
 [ GxB_set (bitmap to sparse) 
   0.0405 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 7.45638e+06 (use dense mask in-place) (nthreads 40 fine hash: 116) 
   0.11 sec ]
 [ GrB_Matrix_nvals 
   4.58e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   0.00148 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.00109 sec ]
 [ GxB_set 
   3.23e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 19254 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   0.00358 sec ]
 [ GrB_Matrix_nvals 
   1.23e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   1.49e-05 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   1.64e-05 sec ]
 [ GxB_set 
   2.32e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 58 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   3.68e-05 sec ]
 [ GrB_Matrix_nvals 
   9.01e-08 sec ]

===================== backtrack phase
 [ GrB_assign WAIT8: 0 WAIT9: 0 (C empty) (pending: 0) Method 21: (C full) = scalar 
   0.0745 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.00136 sec ]
 [ GrB_Matrix_nvals 
   3.27e-07 sec ]
 [ GrB_Matrix_nvals 
   1.23e-07 sec ]
 [ GxB_set 
   3.35e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 58 mwork 19189 (discard mask) (intensity: 1.37e-08 workspace/(nnz(A)+nnz(B)): 0.0318) (nthreads 1 coarse hash: 1) (mask later) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (hyper to sparse) (C(:,:)<any mask>: C_replace early) (C empty) (pending: 0) Method 06s: C(:,:)<M> = Z ; using S (wait: 0 zombies, 0 pending, jumbled) 
   0.000257 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 58 pending) (hyper to sparse) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.000587 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.00096 sec ]
 [ GrB_Matrix_nvals 
   1.15e-07 sec ]
 [ GrB_Matrix_nvals 
   4.1e-07 sec ]
 [ GxB_set 
   3.41e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 19254 mwork 6.52376e+06 (discard mask) (intensity: 4.56e-06 workspace/(nnz(A)+nnz(B)): 0.0318) (nthreads 1 coarse hash: 1) (mask later) (wait: 0 zombies, 0 pending, jumbled) masker:(S:H{S}=S) 
   0.0184 sec ]
 [ GrB_eWiseMult emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.0016 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.0358 sec ]
 [ GrB_Matrix_nvals 
   3.95e-07 sec ]
 [ GrB_Matrix_nvals 
   1.49e-07 sec ]
 [ GxB_set 
   4.73e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{B}=S*S) axbwork 7.45638e+06 (use dense mask in-place) (nthreads 40 fine hash: 116) 
   0.146 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 0 pending, jumbled) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.43 sec ]
 [ GrB_eWiseMult emult:(B<B>=F.*B) masker:(B:H{B}=B) (bitmap to sparse) 
   0.587 sec ]
 [ GrB_Matrix_nvals 
   4.82e-07 sec ]
 [ GrB_Matrix_nvals 
   3.23e-07 sec ]
 [ GxB_set (sparse to bitmap) 
   0.124 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product (B{B}=S'*B) 
   14.4 sec ]
 [ GrB_eWiseMult emult:(B<.>=B.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.298 sec ]
 [ GrB_eWiseMult emult:(B<B>=F.*B) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (pending: 0) Method: bitmap_subassign Method:bit2:whole C<M,bitmap,struct,replace> = A 
   0.338 sec ]
 [ GrB_Matrix_nvals 
   3.81e-07 sec ]
 [ GrB_Matrix_nvals 
   2.43e-07 sec ]
 [ GxB_set 
   6.72e-07 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product dot3 (S{S}=S'*B) nthreads 40 ntasks 1280 (sparse to bitmap) 
   1.1 sec ]
 [ GrB_eWiseMult emult:(B<.>=B.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.109 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (pending: 0) Method: bitmap_subassign Method:bit4:whole C<M,struct,replace> = A 
   0.0483 sec ]
 [ GrB_Matrix_nvals 
   4.38e-07 sec ]
 [ GrB_Matrix_nvals 
   2.82e-07 sec ]
 [ GxB_set (bitmap to sparse) 
   0.0329 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 2.16101e+07 mwork 19 (use mask) (nthreads 40 coarse hash: 1 fine: 155 fine hash: 6) 
   0.068 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 0 pending, jumbled) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.00119 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 (C empty) (pending: 0) Method 21: (C full) = scalar 
   0.0178 sec ]
 [ GrB_reduce C=A*B, saxpy (B=F*F) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT1: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.219 sec ]
BC time 40:      25.0816 (sec)

Trial 10 : sources: [ 4649343 76656189 31312001 111334127 ]
 [ GxB_set (sparse to bitmap) 
   0.0606 sec ]
 [ GrB_mxm (wait: 0 zombies, 4 pending) (generic with typecast) (hyper to sparse) C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 128 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   8.5e-05 sec ]
 [ GrB_Matrix_nvals 
   9.97e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   2.87e-05 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   3.48e-05 sec ]
 [ GxB_set 
   5.62e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 2.05499e+06 (use dense mask in-place) (nthreads 31 coarse hash: 2 fine hash: 32) 
   0.0413 sec ]
 [ GrB_Matrix_nvals 
   2.99e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   0.0737 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.00769 sec ]
 [ GxB_set 
   7.35e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 4.32755e+09 (use dense mask) (nthreads 40 fine: 157) 
   11 sec ]
 [ GrB_Matrix_nvals 
   4.4e-07 sec ]
 [ GrB_apply (shallow-op) (sparse to bitmap) 
   0.114 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.109 sec ]
 [ GxB_set (sparse to bitmap) 
   0.118 sec ]
 [ GrB_mxm C<!M>=A'*B, dot_product (B<!B>=S'*B) 
   1.35 sec ]
 [ GrB_Matrix_nvals 
   4.03e-07 sec ]
 [ GrB_apply (A bitmap) (shallow-op) 
   0.0957 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.127 sec ]
 [ GxB_set 
   8.2e-07 sec ]
 [ GrB_mxm C<!M>=A'*B, dot_product (B<!B>=S'*B) 
   0.156 sec ]
 [ GrB_Matrix_nvals 
   3.85e-07 sec ]
 [ GrB_apply (A bitmap) (shallow-op) (bitmap to sparse) 
   0.075 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.0293 sec ]
 [ GxB_set (bitmap to sparse) 
   0.0329 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 1.89902e+06 (use dense mask in-place) (nthreads 28 coarse hash: 2 fine hash: 29) 
   0.0381 sec ]
 [ GrB_Matrix_nvals 
   2.31e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   0.000297 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.000304 sec ]
 [ GxB_set 
   2.51e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 4895 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   0.000784 sec ]
 [ GrB_Matrix_nvals 
   1.05e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   1.25e-05 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   1.52e-05 sec ]
 [ GxB_set 
   1.48e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 25 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   3.3e-05 sec ]
 [ GrB_Matrix_nvals 
   6.19e-08 sec ]

===================== backtrack phase
 [ GrB_assign WAIT8: 0 WAIT9: 0 (C empty) (pending: 0) Method 21: (C full) = scalar 
   0.0748 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.000508 sec ]
 [ GrB_Matrix_nvals 
   3.21e-07 sec ]
 [ GrB_Matrix_nvals 
   1.27e-07 sec ]
 [ GxB_set 
   4.86e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 25 mwork 4654 (discard mask) (intensity: 5.92e-09 workspace/(nnz(A)+nnz(B)): 0.0318) (nthreads 1 coarse hash: 1) (mask later) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (hyper to sparse) (C(:,:)<any mask>: C_replace early) (C empty) (pending: 0) Method 06s: C(:,:)<M> = Z ; using S (wait: 0 zombies, 0 pending, jumbled) 
   0.000226 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 25 pending) (hyper to sparse) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.000508 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.000616 sec ]
 [ GrB_Matrix_nvals 
   9.69e-08 sec ]
 [ GrB_Matrix_nvals 
   6.68e-08 sec ]
 [ GxB_set 
   2.79e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 4895 mwork 1.81662e+06 (discard mask) (intensity: 1.16e-06 workspace/(nnz(A)+nnz(B)): 0.0318) (nthreads 1 coarse hash: 1) (mask later) (wait: 0 zombies, 0 pending, jumbled) masker:(S:H{S}=S) 
   0.00435 sec ]
 [ GrB_eWiseMult emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.000963 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.0123 sec ]
 [ GrB_Matrix_nvals 
   2.54e-07 sec ]
 [ GrB_Matrix_nvals 
   1.21e-07 sec ]
 [ GxB_set 
   1.55e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{B}=S*S) axbwork 1.89902e+06 (use dense mask in-place) (nthreads 28 coarse hash: 2 fine hash: 29) 
   0.0802 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 0 pending, jumbled) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.152 sec ]
 [ GrB_eWiseMult emult:(B<B>=F.*B) masker:(B:H{B}=B) (bitmap to sparse) 
   0.531 sec ]
 [ GrB_Matrix_nvals 
   5.28e-07 sec ]
 [ GrB_Matrix_nvals 
   1.54e-07 sec ]
 [ GxB_set 
   2.12e-06 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{B}=S*S) axbwork 5.77555e+08 (use dense mask) (nthreads 40 fine: 146) 
   2.43 sec ]
 [ GrB_eWiseMult emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.13 sec ]
 [ GrB_eWiseMult emult:(B<B>=F.*B) masker:(B:H{B}=B) (bitmap to sparse) 
   0.563 sec ]
 [ GrB_Matrix_nvals 
   5.12e-07 sec ]
 [ GrB_Matrix_nvals 
   2.09e-07 sec ]
 [ GxB_set (sparse to bitmap) 
   0.118 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product dot3 (S{S}=S'*B) nthreads 40 ntasks 1280 (sparse to bitmap) 
   5.92 sec ]
 [ GrB_eWiseMult emult:(B<.>=B.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.119 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (pending: 0) Method: bitmap_subassign Method:bit4:whole C<M,struct,replace> = A 
   0.0641 sec ]
 [ GrB_Matrix_nvals 
   4.38e-07 sec ]
 [ GrB_Matrix_nvals 
   3.49e-07 sec ]
 [ GxB_set (bitmap to sparse) 
   0.0335 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 1.53089e+09 mwork 128 (use mask) (nthreads 40 coarse: 1 coarse hash: 1 fine: 158) 
   0.946 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 0 pending, jumbled) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.000911 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 (C empty) (pending: 0) Method 21: (C full) = scalar 
   0.0181 sec ]
 [ GrB_reduce C=A*B, saxpy (B=F*F) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT1: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.212 sec ]
BC time 40:      25.0063 (sec)

Trial 11 : sources: [ 100962918 41823215 22631240 42848461 ]
 [ GxB_set (sparse to bitmap) 
   0.0593 sec ]
 [ GrB_mxm (wait: 0 zombies, 4 pending) (generic with typecast) (hyper to sparse) C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 34 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   7.71e-05 sec ]
 [ GrB_Matrix_nvals 
   7.33e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   2.54e-05 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   3.81e-05 sec ]
 [ GxB_set 
   7.1e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 199313 (use dense mask in-place) (nthreads 3 coarse hash: 2 fine hash: 3) 
   0.00739 sec ]
 [ GrB_Matrix_nvals 
   1.37e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   0.0127 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.00505 sec ]
 [ GxB_set 
   3.45e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 1.15878e+09 (use dense mask) (nthreads 40 fine: 149) 
   3.26 sec ]
 [ GrB_Matrix_nvals 
   7.2e-07 sec ]
 [ GrB_apply (shallow-op) (sparse to bitmap) 
   0.0723 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.0773 sec ]
 [ GxB_set (sparse to bitmap) 
   0.086 sec ]
 [ GrB_mxm C<!M>=A'*B, dot_product (B<!B>=S'*B) 
   4.81 sec ]
 [ GrB_Matrix_nvals 
   3.49e-07 sec ]
 [ GrB_apply (A bitmap) (shallow-op) 
   0.097 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.126 sec ]
 [ GxB_set 
   1.29e-06 sec ]
 [ GrB_mxm C<!M>=A'*B, dot_product (B<!B>=S'*B) 
   0.442 sec ]
 [ GrB_Matrix_nvals 
   2.65e-07 sec ]
 [ GrB_apply (A bitmap) (shallow-op) 
   0.0873 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.0661 sec ]
 [ GxB_set 
   6.19e-07 sec ]
 [ GrB_mxm C<!M>=A'*B, dot_product (B<!B>=S'*B) 
   0.146 sec ]
 [ GrB_Matrix_nvals 
   2.8e-07 sec ]
 [ GrB_apply (A bitmap) (shallow-op) (bitmap to sparse) 
   0.0712 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.0244 sec ]
 [ GxB_set (bitmap to sparse) 
   0.0324 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 386332 (use dense mask in-place) (nthreads 5 coarse hash: 1 fine hash: 6) 
   0.016 sec ]
 [ GrB_Matrix_nvals 
   3.16e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   7.16e-05 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   8.13e-05 sec ]
 [ GxB_set 
   3.42e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 1030 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   0.000214 sec ]
 [ GrB_Matrix_nvals 
   1.28e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   1.33e-05 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   1.47e-05 sec ]
 [ GxB_set 
   1.31e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 5 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   3.24e-05 sec ]
 [ GrB_Matrix_nvals 
   6.5e-08 sec ]

===================== backtrack phase
 [ GrB_assign WAIT8: 0 WAIT9: 0 (C empty) (pending: 0) Method 21: (C full) = scalar 
   0.0775 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.000485 sec ]
 [ GrB_Matrix_nvals 
   3.4e-07 sec ]
 [ GrB_Matrix_nvals 
   1.21e-07 sec ]
 [ GxB_set 
   4.41e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 5 mwork 1001 (discard mask) (intensity: 1.18e-09 workspace/(nnz(A)+nnz(B)): 0.0318) (nthreads 1 coarse hash: 1) (mask later) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (hyper to sparse) (C(:,:)<any mask>: C_replace early) (C empty) (pending: 0) Method 06s: C(:,:)<M> = Z ; using S (wait: 0 zombies, 0 pending, jumbled) 
   0.000219 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 5 pending) (hyper to sparse) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.000478 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.000526 sec ]
 [ GrB_Matrix_nvals 
   1.27e-07 sec ]
 [ GrB_Matrix_nvals 
   1.27e-07 sec ]
 [ GxB_set 
   2.46e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 1030 mwork 380676 (discard mask) (intensity: 2.44e-07 workspace/(nnz(A)+nnz(B)): 0.0318) (nthreads 1 coarse hash: 1) (mask later) (wait: 0 zombies, 0 pending, jumbled) masker:(S:H{S}=S) 
   0.00113 sec ]
 [ GrB_eWiseMult emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.00183 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.00383 sec ]
 [ GrB_Matrix_nvals 
   1.89e-07 sec ]
 [ GrB_Matrix_nvals 
   1.2e-07 sec ]
 [ GxB_set 
   2.39e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{B}=S*S) axbwork 386332 (use dense mask in-place) (nthreads 5 coarse hash: 1 fine hash: 6) 
   0.0366 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 0 pending, jumbled) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.0401 sec ]
 [ GrB_eWiseMult emult:(B<B>=F.*B) masker:(B:H{B}=B) (bitmap to sparse) 
   0.412 sec ]
 [ GrB_Matrix_nvals 
   5.26e-07 sec ]
 [ GrB_Matrix_nvals 
   1.58e-07 sec ]
 [ GxB_set 
   1.52e-06 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{B}=S*S) axbwork 1.35673e+08 (use dense mask) (nthreads 40 fine: 135) 
   0.826 sec ]
 [ GrB_eWiseMult emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.053 sec ]
 [ GrB_eWiseMult emult:(B<B>=F.*B) masker:(B:H{B}=B) (bitmap to sparse) 
   0.558 sec ]
 [ GrB_Matrix_nvals 
   6.2e-07 sec ]
 [ GrB_Matrix_nvals 
   1.48e-07 sec ]
 [ GxB_set (sparse to bitmap) 
   0.118 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product (B{B}=S'*B) 
   10.2 sec ]
 [ GrB_eWiseMult emult:(B<.>=B.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.253 sec ]
 [ GrB_eWiseMult emult:(B<B>=F.*B) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (pending: 0) Method: bitmap_subassign Method:bit2:whole C<M,bitmap,struct,replace> = A 
   0.354 sec ]
 [ GrB_Matrix_nvals 
   4.26e-07 sec ]
 [ GrB_Matrix_nvals 
   4.2e-07 sec ]
 [ GxB_set 
   4.93e-07 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product dot3 (S{S}=S'*B) nthreads 40 ntasks 1280 (sparse to bitmap) 
   1.72 sec ]
 [ GrB_eWiseMult emult:(B<.>=B.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.113 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (pending: 0) Method: bitmap_subassign Method:bit4:whole C<M,struct,replace> = A 
   0.0503 sec ]
 [ GrB_Matrix_nvals 
   5.61e-07 sec ]
 [ GrB_Matrix_nvals 
   2.07e-07 sec ]
 [ GxB_set (bitmap to sparse) 
   0.0321 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 1.18973e+08 mwork 34 (use mask) (nthreads 40 coarse hash: 1 fine: 160) 
   0.134 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 0 pending, jumbled) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.000632 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 (C empty) (pending: 0) Method 21: (C full) = scalar 
   0.0177 sec ]
 [ GrB_reduce C=A*B, saxpy (B=F*F) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT1: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.212 sec ]
BC time 40:      24.8038 (sec)

Trial 12 : sources: [ 79485148 106818742 73347974 78848445 ]
 [ GxB_set (sparse to bitmap) 
   0.0613 sec ]
 [ GrB_mxm (wait: 0 zombies, 4 pending) (generic with typecast) (hyper to sparse) C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 7 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   7.7e-05 sec ]
 [ GrB_Matrix_nvals 
   6.45e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   2.59e-05 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   2.22e-05 sec ]
 [ GxB_set 
   5.53e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 119521 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   0.00784 sec ]
 [ GrB_Matrix_nvals 
   1.31e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   0.000489 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.00361 sec ]
 [ GxB_set 
   2.07e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 1.07451e+09 (use dense mask) (nthreads 40 fine: 150) 
   3.17 sec ]
 [ GrB_Matrix_nvals 
   4.28e-07 sec ]
 [ GrB_apply (shallow-op) (sparse to bitmap) 
   0.0906 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.102 sec ]
 [ GxB_set (sparse to bitmap) 
   0.111 sec ]
 [ GrB_mxm C<!M>=A'*B, dot_product (B<!B>=S'*B) 
   1.64 sec ]
 [ GrB_Matrix_nvals 
   3.48e-07 sec ]
 [ GrB_apply (A bitmap) (shallow-op) 
   0.0961 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.126 sec ]
 [ GxB_set 
   6.65e-07 sec ]
 [ GrB_mxm C<!M>=A'*B, dot_product (B<!B>=S'*B) 
   0.154 sec ]
 [ GrB_Matrix_nvals 
   3.88e-07 sec ]
 [ GrB_apply (A bitmap) (shallow-op) (bitmap to sparse) 
   0.0756 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.0302 sec ]
 [ GxB_set (bitmap to sparse) 
   0.0326 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 2.0354e+06 (use dense mask in-place) (nthreads 31 fine hash: 32) 
   0.033 sec ]
 [ GrB_Matrix_nvals 
   6.24e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   0.000353 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.000344 sec ]
 [ GxB_set 
   4.28e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 5261 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   0.0013 sec ]
 [ GrB_Matrix_nvals 
   1.23e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   1.3e-05 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   1.51e-05 sec ]
 [ GxB_set 
   1.05e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 22 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   3.37e-05 sec ]
 [ GrB_Matrix_nvals 
   6.52e-08 sec ]

===================== backtrack phase
 [ GrB_assign WAIT8: 0 WAIT9: 0 (C empty) (pending: 0) Method 21: (C full) = scalar 
   0.0753 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.000513 sec ]
 [ GrB_Matrix_nvals 
   3.79e-07 sec ]
 [ GrB_Matrix_nvals 
   6.01e-08 sec ]
 [ GxB_set 
   3.92e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 22 mwork 5239 (discard mask) (intensity: 5.21e-09 workspace/(nnz(A)+nnz(B)): 0.0318) (nthreads 1 coarse hash: 1) (mask later) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (hyper to sparse) (C(:,:)<any mask>: C_replace early) (C empty) (pending: 0) Method 06s: C(:,:)<M> = Z ; using S (wait: 0 zombies, 0 pending, jumbled) 
   0.000233 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 22 pending) (hyper to sparse) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.000572 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.000648 sec ]
 [ GrB_Matrix_nvals 
   1.27e-07 sec ]
 [ GrB_Matrix_nvals 
   1.97e-07 sec ]
 [ GxB_set 
   2.71e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 5261 mwork 1.99105e+06 (discard mask) (intensity: 1.25e-06 workspace/(nnz(A)+nnz(B)): 0.0318) (nthreads 1 coarse hash: 1) (mask later) (wait: 0 zombies, 0 pending, jumbled) masker:(S:H{S}=S) 
   0.0048 sec ]
 [ GrB_eWiseMult emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.00111 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.014 sec ]
 [ GrB_Matrix_nvals 
   4.1e-07 sec ]
 [ GrB_Matrix_nvals 
   3.27e-07 sec ]
 [ GxB_set 
   4.11e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{B}=S*S) axbwork 2.0354e+06 (use dense mask in-place) (nthreads 31 fine hash: 32) 
   0.0502 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 0 pending, jumbled) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.101 sec ]
 [ GrB_eWiseMult emult:(B<B>=F.*B) masker:(B:H{B}=B) (bitmap to sparse) 
   0.55 sec ]
 [ GrB_Matrix_nvals 
   5.84e-07 sec ]
 [ GrB_Matrix_nvals 
   1.57e-07 sec ]
 [ GxB_set (sparse to bitmap) 
   0.121 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product (B{B}=S'*B) 
   14.1 sec ]
 [ GrB_eWiseMult emult:(B<.>=B.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.317 sec ]
 [ GrB_eWiseMult emult:(B<B>=F.*B) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (pending: 0) Method: bitmap_subassign Method:bit2:whole C<M,bitmap,struct,replace> = A 
   0.364 sec ]
 [ GrB_Matrix_nvals 
   3.71e-07 sec ]
 [ GrB_Matrix_nvals 
   4.37e-07 sec ]
 [ GxB_set 
   3.84e-07 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product dot3 (S{S}=S'*B) nthreads 40 ntasks 1280 (sparse to bitmap) 
   1.55 sec ]
 [ GrB_eWiseMult emult:(B<.>=B.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.111 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (pending: 0) Method: bitmap_subassign Method:bit4:whole C<M,struct,replace> = A 
   0.0511 sec ]
 [ GrB_Matrix_nvals 
   3.95e-07 sec ]
 [ GrB_Matrix_nvals 
   1.98e-07 sec ]
 [ GxB_set (bitmap to sparse) 
   0.0314 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 8.46576e+06 mwork 7 (use mask) (nthreads 40 fine: 71 fine hash: 61) 
   0.114 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 0 pending, jumbled) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.000522 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 (C empty) (pending: 0) Method 21: (C full) = scalar 
   0.0176 sec ]
 [ GrB_reduce C=A*B, saxpy (B=F*F) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT1: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.24 sec ]
BC time 40:      23.7254 (sec)

Trial 13 : sources: [ 109920510 121492133 101037296 15438600 ]
 [ GxB_set (sparse to bitmap) 
   0.0613 sec ]
 [ GrB_mxm (wait: 0 zombies, 4 pending) (generic with typecast) (hyper to sparse) C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 814 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   0.000126 sec ]
 [ GrB_Matrix_nvals 
   7.5e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   2.73e-05 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   8.71e-05 sec ]
 [ GxB_set 
   4.23e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 1.35132e+07 (use dense mask in-place) (nthreads 40 coarse hash: 1 fine hash: 160) 
   0.162 sec ]
 [ GrB_Matrix_nvals 
   3.12e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   0.58 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.0184 sec ]
 [ GxB_set 
   5.06e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 3.85485e+09 (use dense mask) (nthreads 40 fine: 157) 
   6.86 sec ]
 [ GrB_Matrix_nvals 
   4.19e-07 sec ]
 [ GrB_apply (shallow-op) (sparse to bitmap) 
   0.0969 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.105 sec ]
 [ GxB_set (sparse to bitmap) 
   0.112 sec ]
 [ GrB_mxm C<!M>=A'*B, dot_product (B<!B>=S'*B) 
   1.8 sec ]
 [ GrB_Matrix_nvals 
   3.87e-07 sec ]
 [ GrB_apply (A bitmap) (shallow-op) 
   0.098 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.121 sec ]
 [ GxB_set 
   6.17e-07 sec ]
 [ GrB_mxm C<!M>=A'*B, dot_product (B<!B>=S'*B) 
   0.16 sec ]
 [ GrB_Matrix_nvals 
   3.15e-07 sec ]
 [ GrB_apply (A bitmap) (shallow-op) (bitmap to sparse) 
   0.0774 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.0332 sec ]
 [ GxB_set (bitmap to sparse) 
   0.0376 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 2.69362e+06 (use dense mask in-place) (nthreads 40 coarse hash: 1 fine hash: 42) 
   0.0441 sec ]
 [ GrB_Matrix_nvals 
   4.46e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   0.00049 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.000447 sec ]
 [ GxB_set 
   3.95e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 6983 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   0.00147 sec ]
 [ GrB_Matrix_nvals 
   1.01e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   1.35e-05 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   1.49e-05 sec ]
 [ GxB_set 
   1.23e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 26 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   3.34e-05 sec ]
 [ GrB_Matrix_nvals 
   5.7e-08 sec ]

===================== backtrack phase
 [ GrB_assign WAIT8: 0 WAIT9: 0 (C empty) (pending: 0) Method 21: (C full) = scalar 
   0.0743 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.000491 sec ]
 [ GrB_Matrix_nvals 
   4.24e-07 sec ]
 [ GrB_Matrix_nvals 
   1.22e-07 sec ]
 [ GxB_set 
   4.13e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 26 mwork 6925 (discard mask) (intensity: 6.16e-09 workspace/(nnz(A)+nnz(B)): 0.0318) (nthreads 1 coarse hash: 1) (mask later) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (hyper to sparse) (C(:,:)<any mask>: C_replace early) (C empty) (pending: 0) Method 06s: C(:,:)<M> = Z ; using S (wait: 0 zombies, 0 pending, jumbled) 
   0.000241 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 26 pending) (hyper to sparse) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.00053 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.000672 sec ]
 [ GrB_Matrix_nvals 
   1.41e-07 sec ]
 [ GrB_Matrix_nvals 
   6.1e-08 sec ]
 [ GxB_set 
   3.28e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 6983 mwork 2.58496e+06 (discard mask) (intensity: 1.65e-06 workspace/(nnz(A)+nnz(B)): 0.0318) (nthreads 1 coarse hash: 1) (mask later) (wait: 0 zombies, 0 pending, jumbled) masker:(S:H{S}=S) 
   0.00648 sec ]
 [ GrB_eWiseMult emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.00111 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.018 sec ]
 [ GrB_Matrix_nvals 
   2.36e-07 sec ]
 [ GrB_Matrix_nvals 
   1.4e-07 sec ]
 [ GxB_set 
   4.66e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{B}=S*S) axbwork 2.69362e+06 (use dense mask in-place) (nthreads 40 coarse hash: 1 fine hash: 42) 
   0.0585 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 0 pending, jumbled) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.164 sec ]
 [ GrB_eWiseMult emult:(B<B>=F.*B) masker:(B:H{B}=B) (bitmap to sparse) 
   0.544 sec ]
 [ GrB_Matrix_nvals 
   5.25e-07 sec ]
 [ GrB_Matrix_nvals 
   1.4e-07 sec ]
 [ GxB_set (sparse to bitmap) 
   0.108 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product (B{B}=S'*B) 
   11.4 sec ]
 [ GrB_eWiseMult emult:(B<.>=B.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.305 sec ]
 [ GrB_eWiseMult emult:(B<B>=F.*B) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (pending: 0) Method: bitmap_subassign Method:bit2:whole C<M,bitmap,struct,replace> = A 
   0.413 sec ]
 [ GrB_Matrix_nvals 
   3.85e-07 sec ]
 [ GrB_Matrix_nvals 
   5.21e-07 sec ]
 [ GxB_set 
   3.85e-07 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product dot3 (S{S}=S'*B) nthreads 40 ntasks 1280 (sparse to bitmap) 
   3.77 sec ]
 [ GrB_eWiseMult emult:(B<.>=B.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.14 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (pending: 0) Method: bitmap_subassign Method:bit4:whole C<M,struct,replace> = A 
   0.09 sec ]
 [ GrB_Matrix_nvals 
   6.73e-07 sec ]
 [ GrB_Matrix_nvals 
   2.85e-07 sec ]
 [ GxB_set 
   3.67e-07 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product dot3 (S{S}=S'*B) nthreads 40 ntasks 162 (sparse to bitmap) 
   0.0448 sec ]
 [ GrB_eWiseMult emult:(B<.>=B.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.111 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 (C empty) (pending: 0) Method 21: (C full) = scalar 
   0.0189 sec ]
 [ GrB_reduce C=A*B, saxpy (B=F*F) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT1: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.205 sec ]
BC time 40:      27.9489 (sec)

Trial 14 : sources: [ 4584784 124503845 87241743 108297008 ]
 [ GxB_set (sparse to bitmap) 
   0.0613 sec ]
 [ GrB_mxm (wait: 0 zombies, 4 pending) (generic with typecast) (hyper to sparse) C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 33 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   7.92e-05 sec ]
 [ GrB_Matrix_nvals 
   6.94e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   2.65e-05 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   2.42e-05 sec ]
 [ GxB_set 
   5.63e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 810272 (use dense mask in-place) (nthreads 12 coarse hash: 2 fine hash: 13) 
   0.0147 sec ]
 [ GrB_Matrix_nvals 
   2.36e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   0.0607 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.00341 sec ]
 [ GxB_set 
   4.13e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 1.85013e+09 (use dense mask) (nthreads 40 fine: 153) 
   4.68 sec ]
 [ GrB_Matrix_nvals 
   4.45e-07 sec ]
 [ GrB_apply (shallow-op) (sparse to bitmap) 
   0.065 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.067 sec ]
 [ GxB_set (sparse to bitmap) 
   0.0764 sec ]
 [ GrB_mxm C<!M>=A'*B, dot_product (B<!B>=S'*B) 
   6.17 sec ]
 [ GrB_Matrix_nvals 
   4.53e-07 sec ]
 [ GrB_apply (A bitmap) (shallow-op) 
   0.103 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.128 sec ]
 [ GxB_set 
   4.07e-07 sec ]
 [ GrB_mxm C<!M>=A'*B, dot_product (B<!B>=S'*B) 
   0.397 sec ]
 [ GrB_Matrix_nvals 
   2.54e-07 sec ]
 [ GrB_apply (A bitmap) (shallow-op) 
   0.0738 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.0707 sec ]
 [ GxB_set 
   6.53e-07 sec ]
 [ GrB_mxm C<!M>=A'*B, dot_product (B<!B>=S'*B) 
   0.143 sec ]
 [ GrB_Matrix_nvals 
   2.17e-07 sec ]
 [ GrB_apply (A bitmap) (shallow-op) (bitmap to sparse) 
   0.0722 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.0221 sec ]
 [ GxB_set (bitmap to sparse) 
   0.0312 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 240113 (use dense mask in-place) (nthreads 3 coarse hash: 2 fine hash: 4) 
   0.0183 sec ]
 [ GrB_Matrix_nvals 
   3.14e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   4.87e-05 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   5.58e-05 sec ]
 [ GxB_set 
   2.6e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 613 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   0.000128 sec ]
 [ GrB_Matrix_nvals 
   5.4e-08 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   1.32e-05 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   1.45e-05 sec ]
 [ GxB_set 
   1.56e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 4 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   3.24e-05 sec ]
 [ GrB_Matrix_nvals 
   4.98e-08 sec ]

===================== backtrack phase
 [ GrB_assign WAIT8: 0 WAIT9: 0 (C empty) (pending: 0) Method 21: (C full) = scalar 
   0.0777 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.000503 sec ]
 [ GrB_Matrix_nvals 
   3.59e-07 sec ]
 [ GrB_Matrix_nvals 
   1.26e-07 sec ]
 [ GxB_set 
   6.73e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 4 mwork 561 (discard mask) (intensity: 9.47e-10 workspace/(nnz(A)+nnz(B)): 0.0318) (nthreads 1 coarse hash: 1) (mask later) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (hyper to sparse) (C(:,:)<any mask>: C_replace early) (C empty) (pending: 0) Method 06s: C(:,:)<M> = Z ; using S (wait: 0 zombies, 0 pending, jumbled) 
   0.000221 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 4 pending) (hyper to sparse) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.000492 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.000505 sec ]
 [ GrB_Matrix_nvals 
   1.37e-07 sec ]
 [ GrB_Matrix_nvals 
   1.3e-07 sec ]
 [ GxB_set 
   2.5e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 613 mwork 237806 (discard mask) (intensity: 1.45e-07 workspace/(nnz(A)+nnz(B)): 0.0318) (nthreads 1 coarse hash: 1) (mask later) (wait: 0 zombies, 0 pending, jumbled) masker:(S:H{S}=S) 
   0.000646 sec ]
 [ GrB_eWiseMult emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.000663 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.00297 sec ]
 [ GrB_Matrix_nvals 
   1.68e-07 sec ]
 [ GrB_Matrix_nvals 
   8.1e-08 sec ]
 [ GxB_set 
   2.12e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{B}=S*S) axbwork 240113 (use dense mask in-place) (nthreads 3 coarse hash: 2 fine hash: 4) 
   0.0432 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 0 pending, jumbled) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.027 sec ]
 [ GrB_eWiseMult emult:(B<B>=F.*B) masker:(B:H{B}=B) (bitmap to sparse) 
   0.41 sec ]
 [ GrB_Matrix_nvals 
   6.85e-07 sec ]
 [ GrB_Matrix_nvals 
   1.29e-07 sec ]
 [ GxB_set 
   1.88e-06 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{B}=S*S) axbwork 8.77001e+07 (use dense mask) (nthreads 40 fine: 134) 
   0.713 sec ]
 [ GrB_eWiseMult emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.0663 sec ]
 [ GrB_eWiseMult emult:(B<B>=F.*B) masker:(B:H{B}=B) (bitmap to sparse) 
   0.571 sec ]
 [ GrB_Matrix_nvals 
   7.06e-07 sec ]
 [ GrB_Matrix_nvals 
   1.48e-07 sec ]
 [ GxB_set (sparse to bitmap) 
   0.118 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product (B{B}=S'*B) 
   10.2 sec ]
 [ GrB_eWiseMult emult:(B<.>=B.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.238 sec ]
 [ GrB_eWiseMult emult:(B<B>=F.*B) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (pending: 0) Method: bitmap_subassign Method:bit2:whole C<M,bitmap,struct,replace> = A 
   0.34 sec ]
 [ GrB_Matrix_nvals 
   4.37e-07 sec ]
 [ GrB_Matrix_nvals 
   3.53e-07 sec ]
 [ GxB_set 
   5.6e-07 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product dot3 (S{S}=S'*B) nthreads 40 ntasks 1280 (sparse to bitmap) 
   2.64 sec ]
 [ GrB_eWiseMult emult:(B<.>=B.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.118 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (pending: 0) Method: bitmap_subassign Method:bit4:whole C<M,struct,replace> = A 
   0.0541 sec ]
 [ GrB_Matrix_nvals 
   4.08e-07 sec ]
 [ GrB_Matrix_nvals 
   1.99e-07 sec ]
 [ GxB_set (bitmap to sparse) 
   0.0326 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 4.64984e+08 mwork 33 (use mask) (nthreads 40 coarse hash: 2 fine: 160) 
   0.185 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 0 pending, jumbled) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.000609 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 (C empty) (pending: 0) Method 21: (C full) = scalar 
   0.0181 sec ]
 [ GrB_reduce C=A*B, saxpy (B=F*F) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT1: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.22 sec ]
BC time 40:      28.4794 (sec)

Trial 15 : sources: [ 33955082 79934823 8608481 82435063 ]
 [ GxB_set (sparse to bitmap) 
   0.0597 sec ]
 [ GrB_mxm (wait: 0 zombies, 4 pending) (generic with typecast) (hyper to sparse) C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 92 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   8.27e-05 sec ]
 [ GrB_Matrix_nvals 
   7.37e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   2.61e-05 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   3.12e-05 sec ]
 [ GxB_set 
   3.46e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 1.49678e+06 (use dense mask in-place) (nthreads 22 coarse hash: 2 fine hash: 21) 
   0.041 sec ]
 [ GrB_Matrix_nvals 
   5.49e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   0.101 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.00589 sec ]
 [ GxB_set 
   5.68e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 3.08352e+09 (use dense mask) (nthreads 40 fine: 157) 
   7.73 sec ]
 [ GrB_Matrix_nvals 
   7.96e-07 sec ]
 [ GrB_apply (shallow-op) (sparse to bitmap) 
   0.0983 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.103 sec ]
 [ GxB_set (sparse to bitmap) 
   0.111 sec ]
 [ GrB_mxm C<!M>=A'*B, dot_product (B<!B>=S'*B) 
   2.16 sec ]
 [ GrB_Matrix_nvals 
   4.7e-07 sec ]
 [ GrB_apply (A bitmap) (shallow-op) 
   0.103 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.131 sec ]
 [ GxB_set 
   9.35e-07 sec ]
 [ GrB_mxm C<!M>=A'*B, dot_product (B<!B>=S'*B) 
   0.168 sec ]
 [ GrB_Matrix_nvals 
   3.71e-07 sec ]
 [ GrB_apply (A bitmap) (shallow-op) (bitmap to sparse) 
   0.0766 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.0376 sec ]
 [ GxB_set (bitmap to sparse) 
   0.0394 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 3.77771e+06 (use dense mask in-place) (nthreads 40 coarse hash: 1 fine hash: 59) 
   0.0636 sec ]
 [ GrB_Matrix_nvals 
   3.65e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   0.000719 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.000593 sec ]
 [ GxB_set 
   3.55e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 9823 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   0.00183 sec ]
 [ GrB_Matrix_nvals 
   1.13e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   1.37e-05 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   1.52e-05 sec ]
 [ GxB_set 
   1.4e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 32 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   3.42e-05 sec ]
 [ GrB_Matrix_nvals 
   6.8e-08 sec ]

===================== backtrack phase
 [ GrB_assign WAIT8: 0 WAIT9: 0 (C empty) (pending: 0) Method 21: (C full) = scalar 
   0.0743 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.000491 sec ]
 [ GrB_Matrix_nvals 
   2.41e-07 sec ]
 [ GrB_Matrix_nvals 
   1.26e-07 sec ]
 [ GxB_set 
   4.59e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 32 mwork 9691 (discard mask) (intensity: 7.58e-09 workspace/(nnz(A)+nnz(B)): 0.0318) (nthreads 1 coarse hash: 1) (mask later) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (hyper to sparse) (C(:,:)<any mask>: C_replace early) (C empty) (pending: 0) Method 06s: C(:,:)<M> = Z ; using S (wait: 0 zombies, 0 pending, jumbled) 
   0.000239 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 32 pending) (hyper to sparse) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.00056 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.000746 sec ]
 [ GrB_Matrix_nvals 
   1.03e-07 sec ]
 [ GrB_Matrix_nvals 
   1.72e-07 sec ]
 [ GxB_set 
   3.14e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 9823 mwork 3.4758e+06 (discard mask) (intensity: 2.33e-06 workspace/(nnz(A)+nnz(B)): 0.0318) (nthreads 1 coarse hash: 1) (mask later) (wait: 0 zombies, 0 pending, jumbled) masker:(S:H{S}=S) 
   0.00983 sec ]
 [ GrB_eWiseMult emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.0012 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.0231 sec ]
 [ GrB_Matrix_nvals 
   2.59e-07 sec ]
 [ GrB_Matrix_nvals 
   2.69e-07 sec ]
 [ GxB_set 
   4.1e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{B}=S*S) axbwork 3.77771e+06 (use dense mask in-place) (nthreads 40 coarse hash: 1 fine hash: 59) 
   0.0998 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 0 pending, jumbled) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.276 sec ]
 [ GrB_eWiseMult emult:(B<B>=F.*B) masker:(B:H{B}=B) (bitmap to sparse) 
   0.561 sec ]
 [ GrB_Matrix_nvals 
   6.94e-07 sec ]
 [ GrB_Matrix_nvals 
   1.5e-07 sec ]
 [ GxB_set (sparse to bitmap) 
   0.114 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product (B{B}=S'*B) 
   12.2 sec ]
 [ GrB_eWiseMult emult:(B<.>=B.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.303 sec ]
 [ GrB_eWiseMult emult:(B<B>=F.*B) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (pending: 0) Method: bitmap_subassign Method:bit2:whole C<M,bitmap,struct,replace> = A 
   0.396 sec ]
 [ GrB_Matrix_nvals 
   3.94e-07 sec ]
 [ GrB_Matrix_nvals 
   2.35e-07 sec ]
 [ GxB_set 
   3.89e-07 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product dot3 (S{S}=S'*B) nthreads 40 ntasks 1280 (sparse to bitmap) 
   4.05 sec ]
 [ GrB_eWiseMult emult:(B<.>=B.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.124 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (pending: 0) Method: bitmap_subassign Method:bit4:whole C<M,struct,replace> = A 
   0.06 sec ]
 [ GrB_Matrix_nvals 
   3.87e-07 sec ]
 [ GrB_Matrix_nvals 
   2.06e-07 sec ]
 [ GxB_set (bitmap to sparse) 
   0.0333 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 1.16801e+09 mwork 92 (use mask) (nthreads 40 coarse: 2 fine: 155) 
   1.11 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 0 pending, jumbled) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.000909 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 (C empty) (pending: 0) Method 21: (C full) = scalar 
   0.0179 sec ]
 [ GrB_reduce C=A*B, saxpy (B=F*F) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT1: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.213 sec ]
BC time 40:      30.8311 (sec)

Trial 16 : sources: [ 46579271 515421 121530467 127978736 ]
 [ GxB_set (sparse to bitmap) 
   0.0608 sec ]
 [ GrB_mxm (wait: 0 zombies, 4 pending) (generic with typecast) (hyper to sparse) C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 38 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   7.95e-05 sec ]
 [ GrB_Matrix_nvals 
   9.35e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   2.66e-05 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   2.58e-05 sec ]
 [ GxB_set 
   5.63e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 931819 (use dense mask in-place) (nthreads 14 coarse hash: 2 fine hash: 14) 
   0.0209 sec ]
 [ GrB_Matrix_nvals 
   4.52e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   0.0415 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.00394 sec ]
 [ GxB_set 
   9.23e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 3.31359e+09 (use dense mask) (nthreads 40 fine: 156) 
   8.94 sec ]
 [ GrB_Matrix_nvals 
   4.1e-07 sec ]
 [ GrB_apply (shallow-op) (sparse to bitmap) 
   0.109 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.107 sec ]
 [ GxB_set (sparse to bitmap) 
   0.117 sec ]
 [ GrB_mxm C<!M>=A'*B, dot_product (B<!B>=S'*B) 
   1.46 sec ]
 [ GrB_Matrix_nvals 
   4.19e-07 sec ]
 [ GrB_apply (A bitmap) (shallow-op) 
   0.103 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.128 sec ]
 [ GxB_set 
   7.7e-07 sec ]
 [ GrB_mxm C<!M>=A'*B, dot_product (B<!B>=S'*B) 
   0.158 sec ]
 [ GrB_Matrix_nvals 
   1.88e-07 sec ]
 [ GrB_apply (A bitmap) (shallow-op) (bitmap to sparse) 
   0.0727 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.0304 sec ]
 [ GxB_set (bitmap to sparse) 
   0.0351 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 2.10284e+06 (use dense mask in-place) (nthreads 32 coarse hash: 2 fine hash: 31) 
   0.0522 sec ]
 [ GrB_Matrix_nvals 
   4.53e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   0.000469 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.000388 sec ]
 [ GxB_set 
   5.73e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 5429 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   0.00125 sec ]
 [ GrB_Matrix_nvals 
   1.03e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   2.04e-05 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   1.92e-05 sec ]
 [ GxB_set 
   1.49e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 21 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   4.2e-05 sec ]
 [ GrB_Matrix_nvals 
   6.31e-08 sec ]

===================== backtrack phase
 [ GrB_assign WAIT8: 0 WAIT9: 0 (C empty) (pending: 0) Method 21: (C full) = scalar 
   0.0745 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.000501 sec ]
 [ GrB_Matrix_nvals 
   3.44e-07 sec ]
 [ GrB_Matrix_nvals 
   1.38e-07 sec ]
 [ GxB_set 
   5.12e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 21 mwork 5256 (discard mask) (intensity: 4.97e-09 workspace/(nnz(A)+nnz(B)): 0.0318) (nthreads 1 coarse hash: 1) (mask later) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (hyper to sparse) (C(:,:)<any mask>: C_replace early) (C empty) (pending: 0) Method 06s: C(:,:)<M> = Z ; using S (wait: 0 zombies, 0 pending, jumbled) 
   0.000235 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 21 pending) (hyper to sparse) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.000519 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.000643 sec ]
 [ GrB_Matrix_nvals 
   1.12e-07 sec ]
 [ GrB_Matrix_nvals 
   1.31e-07 sec ]
 [ GxB_set 
   3.2e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 5429 mwork 2.00401e+06 (discard mask) (intensity: 1.29e-06 workspace/(nnz(A)+nnz(B)): 0.0318) (nthreads 1 coarse hash: 1) (mask later) (wait: 0 zombies, 0 pending, jumbled) masker:(S:H{S}=S) 
   0.00491 sec ]
 [ GrB_eWiseMult emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.00104 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) masker:(S:H{S}=S) 
   0.0142 sec ]
 [ GrB_Matrix_nvals 
   3.21e-07 sec ]
 [ GrB_Matrix_nvals 
   1.46e-07 sec ]
 [ GxB_set 
   4.29e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{B}=S*S) axbwork 2.10284e+06 (use dense mask in-place) (nthreads 32 coarse hash: 2 fine hash: 31) 
   0.0958 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 0 pending, jumbled) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.168 sec ]
 [ GrB_eWiseMult emult:(B<B>=F.*B) masker:(B:H{B}=B) (bitmap to sparse) 
   0.552 sec ]
 [ GrB_Matrix_nvals 
   7.01e-07 sec ]
 [ GrB_Matrix_nvals 
   1.57e-07 sec ]
 [ GxB_set 
   2.23e-06 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{B}=S*S) axbwork 6.26801e+08 (use dense mask) (nthreads 40 fine: 146) 
   2.35 sec ]
 [ GrB_eWiseMult emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.135 sec ]
 [ GrB_eWiseMult emult:(B<B>=F.*B) masker:(B:H{B}=B) (bitmap to sparse) 
   0.558 sec ]
 [ GrB_Matrix_nvals 
   5.21e-07 sec ]
 [ GrB_Matrix_nvals 
   2.48e-07 sec ]
 [ GxB_set (sparse to bitmap) 
   0.116 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product dot3 (S{S}=S'*B) nthreads 40 ntasks 1280 (sparse to bitmap) 
   4.75 sec ]
 [ GrB_eWiseMult emult:(B<.>=B.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.116 sec ]
 [ GrB_eWiseMult emult:(S<S>=F.*B) (C<M>=Z via assign) WAIT8: 0 WAIT9: 0 (pending: 0) Method: bitmap_subassign Method:bit4:whole C<M,struct,replace> = A 
   0.0558 sec ]
 [ GrB_Matrix_nvals 
   4.76e-07 sec ]
 [ GrB_Matrix_nvals 
   1.83e-07 sec ]
 [ GxB_set (bitmap to sparse) 
   0.0322 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 3.8152e+08 mwork 38 (use mask) (nthreads 40 coarse hash: 1 fine: 162) 
   0.227 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 0 pending, jumbled) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.000612 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 (C empty) (pending: 0) Method 21: (C full) = scalar 
   0.0177 sec ]
 [ GrB_reduce C=A*B, saxpy (B=F*F) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT1: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.243 sec ]
BC time 40:      21.0966 (sec)

ntrials: 16

Ave BC 40:     26.007 sec, rate    162.387
SuiteSparse:GraphBLAS v4.0.3 [Jan 19, 2021]
threads to test:  40
matrix: /home/faculty/davis/GAP/GAP-urand/GAP-urand.grb
[.grb]
Reading binary file: /home/faculty/davis/GAP/GAP-urand/GAP-urand.grb
 [ GxB_Matrix_import_CSR 
   2e-05 sec ]
 [ GxB_set 
   0.0202 sec ]
sources: /home/faculty/davis/GAP/GAP-urand/GAP-urand_sources.mtx
    GraphBLAS type: type double size: 8
 [ *_setElement (wait: 0 zombies, 64 pending) 
   4.84e-05 sec ]
 [ GrB_apply (shallow-op) 
   3.55 sec ]
read time: 43.1213
 [ GrB_Matrix_nvals 
   1.31e-06 sec ]
Graph: kind: undirected, nodes: 134217728 entries: 4294966740 type: bool
    pattern symmetry: symmetric
 [ GrB_Matrix_nvals 
   2.8e-07 sec ]

Trial 1 : sources: [ 27691419 121280314 2413431 37512113 ]
 [ GxB_set (sparse to bitmap) 
   0.0957 sec ]
 [ GrB_mxm (wait: 0 zombies, 4 pending) (generic with typecast) (hyper to sparse) C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 142 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   0.000163 sec ]
 [ GrB_Matrix_nvals 
   4.38e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   3.14e-05 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   6.43e-05 sec ]
 [ GxB_set 
   1.35e-06 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 4670 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   0.000404 sec ]
 [ GrB_Matrix_nvals 
   1.04e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   0.000212 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.000882 sec ]
 [ GxB_set 
   2.11e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 149017 (use dense mask in-place) (nthreads 2 coarse hash: 3) 
   0.00908 sec ]
 [ GrB_Matrix_nvals 
   1.92e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   0.00845 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.0171 sec ]
 [ GxB_set 
   2.39e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 4.76586e+06 (use dense mask in-place) (nthreads 40 fine hash: 74) 
   0.0531 sec ]
 [ GrB_Matrix_nvals 
   5.78e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   0.271 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.0313 sec ]
 [ GxB_set 
   6.93e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 1.51772e+08 (use dense mask) (nthreads 40 fine: 136) 
   0.907 sec ]
 [ GrB_Matrix_nvals 
   2.87e-07 sec ]
 [ GrB_apply (shallow-op) (sparse to bitmap) 
   0.104 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.108 sec ]
 [ GxB_set (sparse to bitmap) 
   0.117 sec ]
 [ GrB_mxm C<!M>=A'*B, dot_product (B<!B>=S'*B) 
   17.6 sec ]
 [ GrB_Matrix_nvals 
   4.27e-07 sec ]
 [ GrB_apply (A bitmap) (shallow-op) 
   0.0893 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.127 sec ]
 [ GxB_set 
   6.19e-07 sec ]
 [ GrB_mxm C<!M>=A'*B, dot_product (B<!B>=S'*B) 
   0.0881 sec ]
 [ GrB_Matrix_nvals 
   2.77e-07 sec ]
 [ GrB_apply (A bitmap) (shallow-op) (bitmap to sparse) 
   0.073 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.0226 sec ]
 [ GxB_set (bitmap to sparse) 
   0.0303 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 7.2902e+06 (use dense mask in-place) (nthreads 40 fine hash: 114) 
   0.0542 sec ]
 [ GrB_Matrix_nvals 
   4.56e-07 sec ]

===================== backtrack phase
 [ GrB_assign WAIT8: 0 WAIT9: 0 (C empty) (pending: 0) Method 21: (C full) = scalar 
   0.0753 sec ]
 [ GrB_eWiseMult add:(S<S>=F+B) 
   0.00287 sec ]
 [ GrB_Matrix_nvals 
   2.68e-07 sec ]
 [ GrB_Matrix_nvals 
   1.48e-07 sec ]
 [ GxB_set 
   9.05e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{B}=S*S) axbwork 7.2902e+06 (use dense mask in-place) (nthreads 40 fine hash: 114) 
   0.0778 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 0 pending, jumbled) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.375 sec ]
 [ GrB_eWiseMult add:(B<B>=F+B) (bitmap to sparse) 
   0.446 sec ]
 [ GrB_Matrix_nvals 
   7.08e-07 sec ]
 [ GrB_Matrix_nvals 
   1.71e-07 sec ]
 [ GxB_set (sparse to bitmap) 
   0.165 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product (B{B}=S'*B) 
   8.89 sec ]
 [ GrB_eWiseMult emult:(B<.>=B.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.338 sec ]
 [ GrB_eWiseMult add:(B<B>=F+B) 
   0.231 sec ]
 [ GrB_Matrix_nvals 
   3.44e-07 sec ]
 [ GrB_Matrix_nvals 
   2.32e-07 sec ]
 [ GxB_set 
   4.49e-07 sec ]
 [ GrB_mxm C<M>=A'*B, masked_dot_product dot3 (S{S}=S'*B) nthreads 40 ntasks 1280 (sparse to bitmap) 
   0.352 sec ]
 [ GrB_eWiseMult emult:(B<.>=B.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.151 sec ]
 [ GrB_eWiseMult add:(S<S>=F+B) (sparse to bitmap) 
   0.0568 sec ]
 [ GrB_Matrix_nvals 
   4.65e-07 sec ]
 [ GrB_Matrix_nvals 
   2.26e-07 sec ]
 [ GxB_set (bitmap to sparse) 
   0.0373 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 1.51772e+08 mwork 144471 (use mask) (nthreads 40 fine: 162) 
   0.321 sec ]
 [ GrB_eWiseMult emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.0042 sec ]
 [ GrB_eWiseMult add:(S<S>=F+B) 
   0.00254 sec ]
 [ GrB_Matrix_nvals 
   3.7e-07 sec ]
 [ GrB_Matrix_nvals 
   2.01e-07 sec ]
 [ GxB_set 
   4.77e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 4.76586e+06 mwork 4528 (use mask) (nthreads 40 fine hash: 74) 
   0.0296 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 0 pending, jumbled) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.00155 sec ]
 [ GrB_eWiseMult add:(S<S>=F+B) 
   0.000497 sec ]
 [ GrB_Matrix_nvals 
   3.67e-07 sec ]
 [ GrB_Matrix_nvals 
   1.24e-07 sec ]
 [ GxB_set 
   3.73e-07 sec ]
 [ GrB_mxm C<M>=A*B, saxpy (S{S}=S*S) axbwork 149017 mwork 142 (use mask) (intensity: 3.47e-05 workspace/(nnz(A)+nnz(B)): 0.125) (nthreads 2 coarse hash: 3) 
   0.00226 sec ]
 [ GrB_eWiseMult (wait: 0 zombies, 0 pending, jumbled) emult:(S<.>=S.*B) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z 
   0.00137 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 (C empty) (pending: 0) Method 21: (C full) = scalar 
   0.0186 sec ]
 [ GrB_reduce C=A*B, saxpy (B=F*F) (C+=Z via assign) WAIT8: 0 WAIT9: 0 WAIT1: 0 WAIT2: 0 (pending: 0) Method 23: (C full) += Z (Z packed) 
   0.22 sec ]
BC time 40:      31.6882 (sec)

Trial 2 : sources: [ 38390877 56651037 128461248 33029842 ]
 [ GxB_set (sparse to bitmap) 
   0.0617 sec ]
 [ GrB_mxm (wait: 0 zombies, 4 pending) (generic with typecast) (hyper to sparse) C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 146 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   8.77e-05 sec ]
 [ GrB_Matrix_nvals 
   9.9e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   2.79e-05 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   3.79e-05 sec ]
 [ GxB_set 
   5.31e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 4896 (use dense mask in-place) (nthreads 1 coarse hash: 1) 
   0.000407 sec ]
 [ GrB_Matrix_nvals 
   9.8e-08 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   0.000218 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.000267 sec ]
 [ GxB_set 
   1.9e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 157300 (use dense mask in-place) (nthreads 2 coarse hash: 4) 
   0.00701 sec ]
 [ GrB_Matrix_nvals 
   1.28e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   0.00689 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.00405 sec ]
 [ GxB_set 
   4.51e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 5.03419e+06 (use dense mask in-place) (nthreads 40 fine hash: 78) 
   0.0569 sec ]
 [ GrB_Matrix_nvals 
   4.28e-07 sec ]
 [ GrB_apply (wait: 0 zombies, 0 pending, jumbled) (shallow-op) 
   0.139 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 
   0.0261 sec ]
 [ GxB_set 
   6.65e-07 sec ]
 [ GrB_mxm C<!M>=A*B, saxpy (S<!B>=S*S) axbwork 1.60301e+08 (use dense mask) (nthreads 40 fine: 136) 
   0.943 sec ]
 [ GrB_Matrix_nvals 
   4.34e-07 sec ]
 [ GrB_apply (shallow-op) (sparse to bitmap) 
   0.108 sec ]
 [ GrB_assign WAIT8: 0 WAIT9: 0 Method:bit5:whole C += A 