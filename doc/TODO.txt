As of Feb 9, 2022:

    * entire user guide
        experimental -> src, how to do it.
        HTML vs PDF vs ... link into PDF ...
        write it in LaTeX
        also update top-level README.txt

    * test, document, polish all src & experimental: algorithms, utilities,
        and tests.

    * unify error return values, see:
            doc/retval.txt
            doc/retval_experimental.txt
            doc/retval_test.txt

        use GrB_Info when possible

        obvious:
        GrB_OUT_OF_MEMORY
        GrB_NULL_POINTER
        GrB_PANIC

        are these OK?
        GrB_INVALID_INDEX: for invalid source node
        GrB_INVALID_VALUE: for invalid method in TC
        GrB_NOT_IMPLEMENTED:
            * type not supported (user-defined, complex, ...)
            * when SuiteSparse required

        error conditions not in GrB_Info:  need to define these
            * file I/O error (file not found, fread failure, etc)
            * self-edges present but not tolerated by the algorithm
            * negative edge weight encountered, but not tolerated
            * properties are missing in the LAGraph_Graph
            * G->A must be square (or other invalid status of an
                LAGraph_Graph); see LAgraph_CheckGraph
            * LG_check_* methods when results are not valid

    * many TODOs and FIXMEs throughout

    * SSSP: allow it to work on any matrix type (currently just INT32).
        How about these types: int32, int64, uint32, uint64, float, double.
        Smaller integers would require computations to be done in a mix
        of integer sizes (edge weights could be int8, but path lengths
        would need to be int32, perhaps).  That is complicated.
        How does delta stepping work for float and double?

    * check function names and API (LAGraph_IsEqual for GrB_Matrix, and
        LAGraph_Vector_IsEqual for GrB_Vectors for example,
        but LAGraph_Matrix_print and LAGraph_Vector_print)

    * missing features:

        * LAGraph_Structure for vectors.  See issue #80.
            Rename this LAGraph_Matrix_Structure,
            add LAGraph_Vector_Structure.

    * add names to Contributors.txt

    * add FUTURE to User Guide (see below)

    * test coverage online: does not report inside a #pragma.  For test
        coverage, I've turned off OpenMP for LAGraph.  Is that OK?
        The "make test" will use the regular library and will exercise
        the parallel methods, perhaps, as will the GAP benchmarks in
        src/benchmark and other benchmarks in experimental/benchmark.

    * test coverage on the Mac OSX 12.1, gcc-11: "cannot find *.gcda"
        (it used to work)

--------------------------------------------------------------------------------
TODO: add this as a section in the User Guide

FUTURE: file I/O with a common, binary, non-opaque format that all
            GraphBLAS libraries can read.  Ideally using compression
            (see SuiteSparse:GraphBLAS uses LZ4 for its GrB_Matrix_serialize/
            deserialize and it would not be hard to add LZ4 to LAGraph).
            We could add the format to the *.lagraph file format now used
            by the experimental/utility/LAGraph_S*.c methods.  That is, the
            same file format *.lagraph could include matrices in either
            the universal format, or a library-specific format.  The format
            would be specified by the json header in the *.lagraph file.
            See the doc/lagraph_format.txt file for details.

            Tim D. moved this to FUTURE from "TODO for v1.0".  It would require
            the LAGraph_SLoad, *SSave, etc to move from experimental to src,
            and those functions need work (API design, text compression).
            Adding this feature also requires an LAGraph_serialize/deserialize,
            which requies LZ4 compression.  We could do this for v1.1.

FUTURE: can we exploit asynch algorithms? C += A*C for example?
        Gauss-Seidel, Afforest, etc?  I can do it in GraphBLAS; can LAGraph
        use it?

FUTURE:

    * need new GxB methods in GraphBLAS for CC, ideally for v1.0 of LAGraph:
        GxB_select with GxB_RankUnaryOp, and GxB_extract with GrB_Vectors as
        inputs instead of (GrB_Index *) arrays.

FUTURE: add interfaces to external packages.

    GTgraph: (Madduri and Bader) for generating synthetic graphs
    CSparse or CXSparse (for depth-first search, scc, dmperm, amd,
        in the sequential case)
    graph partitioning: METIS, Mongoose, etc
    SuiteSparse solvers (UMFPACK, CHOLMOD, KLU, SPQR, ...)
    others?

FUTURE: interfaces to MATLAB, Python, Julia, etc.

FUTURE: need more algorithms and utilities

