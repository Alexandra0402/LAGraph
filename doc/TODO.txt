As of Jan 30, 2022:

    * entire user guide
        experimental -> src, how to do it.
        HTML vs PDF vs ... link into PDF ...
        write it in LaTeX
        also update top-level README.txt

    * test, document, polish all src & experimental: algorithms, utilities,
        and tests.
        as of Jan 30: testing is at 95%.  Only untested functions are
        4 experimental/algorithms: lcc, cdlp, scc, msf, and part of cc_fastsv5
        1 src/algorithm: part of cc_fastsv6 

    * unify error return values
        use GrB_Info when possible

        obvious:
        GrB_OUT_OF_MEMORY
        GrB_NULL_POINTER

        See the code tag "FIXME:RETVAL"

        are these OK?
        GrB_INVALID_INDEX: for invalid source node
        GrB_INVALID_VALUE: for invalid method in TC
        GrB_NOT_IMPLEMENTED:
            * type not supported (user-defined, complex, ...)
            * when SuiteSparse required

        error conditions not in GrB_Info:  need to define these
            * file I/O error (file not found, fread failure, etc)
            * self-edges present but not tolerated by the algorithm
            * negative edge weight encountered, but not tolerated
            * properties are missing in the LAGraph_Graph
            * G->A must be square (or other invalid status of an
                LAGraph_Graph); see LAgraph_CheckGraph
            * LG_check_* methods when results are not valid

    * many TODOs and FIXMEs throughout

    * SSSP: allow it to work on any matrix type (currently just INT32)

    * check function names and API (LAGraph_IsEqual for GrB_Matrix, and
        LAGraph_Vector_IsEqual for GrB_Vectors for example,
        but LAGraph_Matrix_print and LAGraph_Vector_print)

    * missing features:

        * file I/O with a common, binary, non-opaque format that all
            GraphBLAS libraries can read.  Ideally using compression
            (see SuiteSparse:GraphBLAS uses LZ4 for its GrB_Matrix_serialize/
            deserialize and it would not be hard to add LZ4 to LAGraph).
            We could add the format to the *.lagraph file format now used
            by the experimental/utility/LAGraph_S*.c methods.  That is, the
            same file format *.lagraph could include matrices in either
            the universal format, or a library-specific format.  The format
            would be specified by the json header in the *.lagraph file.

    * add names to Contributors.txt

    * add FUTURE to User Guide (see below)

--------------------------------------------------------------------------------
TODO: add this as a section in the User Guide

FUTURE: can we exploit asynch algorithms? C += A*C for example?
        Gauss-Seidel, Afforest, etc?  I can do it in GraphBLAS; can LAGraph
        use it?

FUTURE:

    * need new GxB methods in GraphBLAS for CC, ideally for v1.0 of LAGraph:
        GxB_select with GxB_RankUnaryOp, and GxB_extract with GrB_Vectors as
        inputs instead of (GrB_Index *) arrays.

FUTURE: add interfaces to external packages.

    GTgraph: (Madduri and Bader) for generating synthetic graphs
    CSparse or CXSparse (for depth-first search, scc, dmperm, amd,
        in the sequential case)
    graph partitioning: METIS, Mongoose, etc
    SuiteSparse solvers (UMFPACK, CHOLMOD, KLU, SPQR, ...)
    others?

FUTURE: interfaces to MATLAB, Python, Julia, etc.

FUTURE: need more algorithms and utilities

