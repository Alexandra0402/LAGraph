As of Feb 16, 2022:

    * entire user guide
        experimental -> src, how to do it.
        HTML vs PDF vs ... link into PDF ...
        write it in LaTeX
        also update top-level README.txt

    * test, document, polish all src & experimental: algorithms, utilities,
        and tests.

    * how does the user know that one method is Basic and another Advanced?
        Name of function?  We have no mechanism or naming scheme.

    * check function names and API

    * TODOs: in algorithms

        * LAGraph_VertexCentrality: wrapper for 2 methods (BC, PageRank),
            and future methods.  Can we skip this for LAGraph v1.0?  How do we
            ask for an exact BC computation?  Do it in batches and sum up the
            result?  Do we normalize the metrics so that sum(centrality) = 1?
            How do we provide parameters to the various methods if we don't
            have all methods written yet?  Move this to Future, below?

        * LAGraph_ConnectedComponents: this is Advanced (G is input and
            G->structure_is_symmetric is required for a directed graph).
            A Basic method would compute that first, and then G would be
            input/output.  Or move this to Future, below?

        * LG_CC_SV6: need new GxB methods.  Implement for LAGraph v1.0?
            Current method is not thread-safe.
            Or move to Future, below?

        * LAGraph_SingleSourceShortestPath:  Write a Basic method that
            computes G->emin (that's easy).  And G->emax so it can decide on
            Delta on its own (hard to do)?  Or move to Future, below?

    * add FUTURE to User Guide (see below)

--------------------------------------------------------------------------------
TODO: add FUTURE items as a section in the User Guide

FUTURE: file I/O with a common, binary, non-opaque format that all
            GraphBLAS libraries can read.  Ideally using compression
            (see SuiteSparse:GraphBLAS uses LZ4 for its GrB_Matrix_serialize/
            deserialize and it would not be hard to add LZ4 to LAGraph).
            We could add the format to the *.lagraph file format now used
            by the experimental/utility/LAGraph_S*.c methods.  That is, the
            same file format *.lagraph could include matrices in either
            the universal format, or a library-specific format.  The format
            would be specified by the json header in the *.lagraph file.
            See the doc/lagraph_format.txt file for details.

            Tim D. moved this to FUTURE.  It would require
            the LAGraph_SLoad, *SSave, etc to move from experimental to src,
            and those functions need work (API design, text compression).
            Adding this feature also requires an LAGraph_serialize/deserialize,
            which requies LZ4 compression.  We could do this for v1.1.

FUTURE: can we exploit asynch algorithms? C += A*C for example?
        Gauss-Seidel, Afforest, etc?  I can do it in GraphBLAS; can LAGraph
        use it?

FUTURE:

    * need new GxB methods in GraphBLAS for CC, ideally for v1.0 of LAGraph:
        GxB_select with GxB_RankUnaryOp, and GxB_extract with GrB_Vectors as
        inputs instead of (GrB_Index *) arrays.

FUTURE: add interfaces to external packages.

    GTgraph: (Madduri and Bader) for generating synthetic graphs
    CSparse or CXSparse (for depth-first search, scc, dmperm, amd,
        in the sequential case)
    graph partitioning: METIS, Mongoose, etc
    SuiteSparse solvers (UMFPACK, CHOLMOD, KLU, SPQR, ...)
    others?

FUTURE: interfaces to MATLAB, Python, Julia, etc.

FUTURE: need more algorithms and utilities

