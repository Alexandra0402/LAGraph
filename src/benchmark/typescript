Script started on Mon 02 Aug 2021 01:20:18 PM CDT
groups: cannot find name for group ID 8047
Intel Suite:
Copyright (C) 2009-2019 Intel Corporation. All rights reserved.
Intel(R) VTune(TM) Amplifier 2019 (build 591499)
[1;34m==>[0m 71 installed packages
-- [0;35mlinux-ubuntu16.04-broadwell[0m / [0;32mgcc@5.4.0[0m ----------------------
autoconf[0;36m@2.69[0m                cmake[0;36m@3.19.5[0m   gcc[0;36m@10.1.0[0m      hwloc[0;36m@2.4.0[0m           libiconv[0;36m@1.16[0m        libxml2[0;36m@2.9.10[0m  openmpi[0;36m@4.0.5[0m   pkgconf[0;36m@1.6.3[0m         tar[0;36m@1.32[0m
autoconf[0;36m@2.69[0m                curl[0;36m@7.68.0[0m    gdbm[0;36m@1.18.1[0m     isl[0;36m@0.18[0m              libidn2[0;36m@2.1.1a[0m       m4[0;36m@1.4.18[0m       openssh[0;36m@8.4p1[0m   pkgconf[0;36m@1.7.3[0m         util-macros[0;36m@1.19.1[0m
autoconf-archive[0;36m@2019.01.06[0m  curl[0;36m@7.74.0[0m    gettext[0;36m@0.20.2[0m  isl[0;36m@0.20[0m              libidn2[0;36m@2.3.0[0m        mpc[0;36m@1.1.0[0m       openssl[0;36m@1.1.1g[0m  py-pip[0;36m@19.3[0m           valgrind[0;36m@3.16.1[0m
automake[0;36m@1.16.2[0m              diffutils[0;36m@3.7[0m  gettext[0;36m@0.21[0m    isl[0;36m@0.21[0m              libpciaccess[0;36m@0.16[0m    mpc[0;36m@1.1.0[0m       openssl[0;36m@1.1.1j[0m  py-setuptools[0;36m@46.1.3[0m  xz[0;36m@5.2.5[0m
automake[0;36m@1.16.3[0m              expat[0;36m@2.2.9[0m    git[0;36m@2.26.0[0m      libbsd[0;36m@0.10.0[0m         libsigsegv[0;36m@2.12[0m      mpfr[0;36m@3.1.6[0m      pcre2[0;36m@10.31[0m     python[0;36m@3.7.7[0m          xz[0;36m@5.2.5[0m
berkeley-db[0;36m@18.1.40[0m          expat[0;36m@2.2.10[0m   git[0;36m@2.29.0[0m      libedit[0;36m@3.1-20191231[0m  libtool[0;36m@2.4.6[0m        mpfr[0;36m@4.0.2[0m      pcre2[0;36m@10.35[0m     python[0;36m@3.8.0[0m          zlib[0;36m@1.2.11[0m
boost[0;36m@1.75.0[0m                 gcc[0;36m@6.3.0[0m      gmp[0;36m@6.1.2[0m       libevent[0;36m@2.1.12[0m       libunistring[0;36m@0.9.10[0m  ncurses[0;36m@6.2[0m     perl[0;36m@5.30.2[0m     readline[0;36m@8.0[0m          zstd[0;36m@1.4.4[0m
bzip2[0;36m@1.0.8[0m                  gcc[0;36m@9.3.0[0m      gmp[0;36m@6.2.1[0m       libffi[0;36m@3.3[0m            libxml2[0;36m@2.9.10[0m       numactl[0;36m@2.0.14[0m  perl[0;36m@5.32.1[0m     sqlite[0;36m@3.31.1[0m
[0;36mhypersparse $[0m 
[0;36mhypersparse $[0m 
[0;36mhypersparse $[0m ./do_gap_tcc
 
======================================================================
GAP benchmarks using LAGraph+GraphBLAS: Triangle Centrality
======================================================================
Matrix input file format:  mtx
GAP matrices located in:   ../../../GAP
SuiteSparse:GraphBLAS v5.1.6 [July 31, 2021]
# of trials: 3
threads to test:  40
matrix: ../../../GAP/GAP-kron/GAP-kron.mtx
[.mtx]
Reading matrix market file: ../../../GAP/GAP-kron/GAP-kron.mtx
^C^C
[0;36mhypersparse $[0m 
[0;36mhypersparse $[0m 
[0;36mhypersparse $[0m 
[0;36mhypersparse $[0m ./go_[K[K[Kdo_gap_tcc grb
 
======================================================================
GAP benchmarks using LAGraph+GraphBLAS: Triangle Centrality
======================================================================
Matrix input file format:  grb
GAP matrices located in:   ../../../GAP
SuiteSparse:GraphBLAS v5.1.6 [July 31, 2021]
# of trials: 3
threads to test:  40
matrix: ../../../GAP/GAP-kron/GAP-kron.grb
[.grb]
Reading binary file: ../../../GAP/GAP-kron/GAP-kron.grb
read time: 70.0002
 [ GxB_select (iso select) 
   1.15 sec ]
 [ GrB_mxm (iso mask: struct) C<M>=A'*B, masked_dot_product (dot3) (S{S}=S'*S) nthreads 40 ntasks 1280 
   4.22e+03 sec ]
 [ GrB_assign (iso assign) (pending: 0) Method 21: (C full) = scalar (sparse to full) 
   4.01e-05 sec ]
 [ GrB_reduce (wait:A 481311274 zombies, 0 pending) C=A*B, saxpy (B=S*F) (bitmap saxpy) (fine, threads: 40, relwspace: 2.83, intensity: 12.1: atomic) (C+=Z via assign) (pending: 0) Method 23: (C full) += Z (Z bitmap/as-if-full) 
   5.14 sec ]
 [ GrB_reduce C=A'*B, dot_product (dot4) (F+=S'*F) (C in place) 
   0.241 sec ]
 [ GrB_reduce (A full) 
   0.0161 sec ]
 [ GrB_mxv C=A'*B, dot_product (dot2) (B=S'*F) 
   1.1 sec ]
 [ GrB_mxv C=A*B, saxpy (B=S*F) (bitmap saxpy) (fine, threads: 40, relwspace: 2.83, intensity: 12.1: atomic) (C+=Z via assign) (pending: 0) Method: bitmap_subassign Method:bit5:whole C += A 
   3.14 sec ]
 [ GrB_apply (in-place-op) 
   0.0373 sec ]
 [ GrB_mxv C=A'*B, dot_product (dot2) (B=S'*F) 
   3.16 sec ]
 [ GrB_apply (in-place-op) 
   0.0442 sec ]
 [ GrB_Vector_dup (iso dup) 
   0.0472 sec ]
 [ GrB_eWiseAdd add:(B<.>=B+B) (C+=Z via assign) (pending: 0) Method 23: (C full) += Z (Z bitmap/as-if-full) 
   0.159 sec ]
 [ GrB_apply (in-place-op) 
   0.04 sec ]
# of triangles: 1.06873e+11

start trial 0
 [ GxB_select (iso select) 
   1.14 sec ]
 [ GrB_mxm (iso mask: struct) C<M>=A'*B, masked_dot_product (dot3) (S{S}=S'*S) nthreads 40 ntasks 1280 
   4.2e+03 sec ]
 [ GrB_assign (iso assign) (pending: 0) Method 21: (C full) = scalar (sparse to full) 
   3.94e-05 sec ]
 [ GrB_reduce (wait:A 481311274 zombies, 0 pending) C=A*B, saxpy (B=S*F) (bitmap saxpy) (fine, threads: 40, relwspace: 2.83, intensity: 12.1: atomic) (C+=Z via assign) (pending: 0) Method 23: (C full) += Z (Z bitmap/as-if-full) 
   5.1 sec ]
 [ GrB_reduce C=A'*B, dot_product (dot4) (F+=S'*F) (C in place) 
   0.24 sec ]
 [ GrB_reduce (A full) 
   0.0166 sec ]
 [ GrB_mxv C=A'*B, dot_product (dot2) (B=S'*F) 
   1.08 sec ]
 [ GrB_mxv C=A*B, saxpy (B=S*F) (bitmap saxpy) (fine, threads: 40, relwspace: 2.83, intensity: 12.1: atomic) (C+=Z via assign) (pending: 0) Method: bitmap_subassign Method:bit5:whole C += A 
   3.11 sec ]
 [ GrB_apply (in-place-op) 
   0.0369 sec ]
 [ GrB_mxv C=A'*B, dot_product (dot2) (B=S'*F) 
   3.14 sec ]
 [ GrB_apply (in-place-op) 
   0.0468 sec ]
 [ GrB_Vector_dup (iso dup) 
   0.0402 sec ]
 [ GrB_eWiseAdd add:(B<.>=B+B) (C+=Z via assign) (pending: 0) Method 23: (C full) += Z (Z bitmap/as-if-full) 
   0.144 sec ]
 [ GrB_apply (in-place-op) 
   0.038 sec ]
# of triangles: 1.06873e+11
trial  0:  4212.578755 sec rate   1.00

start trial 1
 [ GxB_select (iso select) 
   1.14 sec ]
 [ GrB_mxm (iso mask: struct) C<M>=A'*B, masked_dot_product (dot3) (S{S}=S'*S) nthreads 40 ntasks 1280 
   4.2e+03 sec ]
 [ GrB_assign (iso assign) (pending: 0) Method 21: (C full) = scalar (sparse to full) 
   2.49e-05 sec ]
 [ GrB_reduce (wait:A 481311274 zombies, 0 pending) C=A*B, saxpy (B=S*F) (bitmap saxpy) (fine, threads: 40, relwspace: 2.83, intensity: 12.1: atomic) (C+=Z via assign) (pending: 0) Method 23: (C full) += Z (Z bitmap/as-if-full) 
   5.12 sec ]
 [ GrB_reduce C=A'*B, dot_product (dot4) (F+=S'*F) (C in place) 
   0.241 sec ]
 [ GrB_reduce (A full) 
   0.0159 sec ]
 [ GrB_mxv C=A'*B, dot_product (dot2) (B=S'*F) 
   1.08 sec ]
 [ GrB_mxv C=A*B, saxpy (B=S*F) (bitmap saxpy) (fine, threads: 40, relwspace: 2.83, intensity: 12.1: atomic) (C+=Z via assign) (pending: 0) Method: bitmap_subassign Method:bit5:whole C += A 
   3.12 sec ]
 [ GrB_apply (in-place-op) 
   0.0374 sec ]
 [ GrB_mxv C=A'*B, dot_product (dot2) (B=S'*F) 
   3.16 sec ]
 [ GrB_apply (in-place-op) 
   0.048 sec ]
 [ GrB_Vector_dup (iso dup) 
   0.0405 sec ]
 [ GrB_eWiseAdd add:(B<.>=B+B) (C+=Z via assign) (pending: 0) Method 23: (C full) += Z (Z bitmap/as-if-full) 
   0.146 sec ]
 [ GrB_apply (in-place-op) 
   0.0403 sec ]
# of triangles: 1.06873e+11
trial  1:  4216.790227 sec rate   1.00

start trial 2
 [ GxB_select (iso select) 
   1.14 sec ]
 [ GrB_mxm (iso mask: struct) C<M>=A'*B, masked_dot_product (dot3) (S{S}=S'*S) nthreads 40 ntasks 1280 
   4.2e+03 sec ]
 [ GrB_assign (iso assign) (pending: 0) Method 21: (C full) = scalar (sparse to full) 
   4.13e-05 sec ]
 [ GrB_reduce (wait:A 481311274 zombies, 0 pending) C=A*B, saxpy (B=S*F) (bitmap saxpy) (fine, threads: 40, relwspace: 2.83, intensity: 12.1: atomic) (C+=Z via assign) (pending: 0) Method 23: (C full) += Z (Z bitmap/as-if-full) 
   5.12 sec ]
 [ GrB_reduce C=A'*B, dot_product (dot4) (F+=S'*F) (C in place) 
   0.24 sec ]
 [ GrB_reduce (A full) 
   0.0188 sec ]
 [ GrB_mxv C=A'*B, dot_product (dot2) (B=S'*F) 
   1.08 sec ]
 [ GrB_mxv C=A*B, saxpy (B=S*F) (bitmap saxpy) (fine, threads: 40, relwspace: 2.83, intensity: 12.1: atomic) (C+=Z via assign) (pending: 0) Method: bitmap_subassign Method:bit5:whole C += A 
   3.13 sec ]
 [ GrB_apply (in-place-op) 
   0.0383 sec ]
 [ GrB_mxv C=A'*B, dot_product (dot2) (B=S'*F) 
   3.15 sec ]
 [ GrB_apply (in-place-op) 
   0.048 sec ]
 [ GrB_Vector_dup (iso dup) 
   0.0446 sec ]
 [ GrB_eWiseAdd add:(B<.>=B+B) (C+=Z via assign) (pending: 0) Method 23: (C full) += Z (Z bitmap/as-if-full) 
   0.157 sec ]
 [ GrB_apply (in-place-op) 
   0.04 sec ]
# of triangles: 1.06873e+11
trial  2:  4212.279367 sec rate   1.00
nthreads:  40 time:  4213.882783 rate:   1.00
Avg: TCentrality threads: 40  time:   4213.883 sec, matrix: ../../../GAP/GAP-kron/GAP-kron.grb
SuiteSparse:GraphBLAS v5.1.6 [July 31, 2021]
# of trials: 3
threads to test:  40
matrix: ../../../GAP/GAP-urand/GAP-urand.grb
[.grb]
Reading binary file: ../../../GAP/GAP-urand/GAP-urand.grb
read time: 75.1414
 [ GxB_select (iso select) 
   1.71 sec ]
 [ GrB_mxm (iso mask: struct) C<M>=A'*B, masked_dot_product (dot3) (S{S}=S'*S) nthreads 40 ntasks 1280 
   47.7 sec ]
 [ GrB_assign (iso assign) (pending: 0) Method 21: (C full) = scalar (sparse to full) 
   4.01e-05 sec ]
 [ GrB_reduce (wait:A 2147467236 zombies, 0 pending) (sparse to hyper) C=A*B', dot_product (transposed A: 134217728-by-134217728, double, 16134 entries) (transpose) (build) (dot4) (F+=H'*F) (C in place) 
   0.7 sec ]
 [ GrB_reduce C=A'*B, dot_product (dot4) (F+=H'*F) (C in place) 
   9.17e-05 sec ]
 [ GrB_reduce (A full) 
   0.0156 sec ]
 [ GrB_mxv C=A'*B, dot_product (dot2) (B=H'*F) 
   0.000455 sec ]
 [ GrB_mxv C=A*B', dot_product (transposed A: 134217728-by-134217728, double, 16134 entries) (iso transpose) (iso build) (dot2) (B=H'*F) (C+=Z via add) add:(S<.>=S+S) 
   0.00239 sec ]
 [ GrB_apply (in-place-op) 
   4.12e-05 sec ]
 [ GrB_mxv C=A'*B, dot_product (dot2) (B=S'*F) 
   4.72 sec ]
 [ GrB_apply (in-place-op) 
   0.232 sec ]
 [ GrB_Vector_dup (iso dup) 
   0.0445 sec ]
 [ GrB_eWiseAdd add:(F<.>=Bf+S) (C+=Z via assign) (pending: 0) Method 23: (C full) += Z (Z bitmap/as-if-full) 
   0.0973 sec ]
 [ GrB_apply (in-place-op) 
   0.0376 sec ]
# of triangles: -nan

start trial 0
 [ GxB_select (iso select) 
   1.71 sec ]
 [ GrB_mxm (iso mask: struct) C<M>=A'*B, masked_dot_product (dot3) (S{S}=S'*S) nthreads 40 ntasks 1280 
   47.6 sec ]
 [ GrB_assign (iso assign) (pending: 0) Method 21: (C full) = scalar (sparse to full) 
   8.79e-05 sec ]
 [ GrB_reduce (wait:A 2147467236 zombies, 0 pending) (sparse to hyper) C=A*B', dot_product (transposed A: 134217728-by-134217728, double, 16134 entries) (transpose) (build) (dot4) (F+=H'*F) (C in place) 
   0.696 sec ]
 [ GrB_reduce C=A'*B, dot_product (dot4) (F+=H'*F) (C in place) 
   9.13e-05 sec ]
 [ GrB_reduce (A full) 
   0.0154 sec ]
 [ GrB_mxv C=A'*B, dot_product (dot2) (B=H'*F) 
   0.000404 sec ]
 [ GrB_mxv C=A*B', dot_product (transposed A: 134217728-by-134217728, double, 16134 entries) (iso transpose) (iso build) (dot2) (B=H'*F) (C+=Z via add) add:(S<.>=S+S) 
   0.00395 sec ]
 [ GrB_apply (in-place-op) 
   4.34e-05 sec ]
 [ GrB_mxv C=A'*B, dot_product (dot2) (B=S'*F) 
   4.68 sec ]
 [ GrB_apply (in-place-op) 
   0.224 sec ]
 [ GrB_Vector_dup (iso dup) 
   0.0438 sec ]
 [ GrB_eWiseAdd add:(F<.>=Bf+S) (C+=Z via assign) (pending: 0) Method 23: (C full) += Z (Z bitmap/as-if-full) 
   0.0952 sec ]
 [ GrB_apply (in-place-op) 
   0.202 sec ]
# of triangles: 5378
trial  0:    55.274089 sec rate  77.70

start trial 1
 [ GxB_select (iso select) 
   1.71 sec ]
 [ GrB_mxm (iso mask: struct) C<M>=A'*B, masked_dot_product (dot3) (S{S}=S'*S) nthreads 40 ntasks 1280 
   49 sec ]
 [ GrB_assign (iso assign) (pending: 0) Method 21: (C full) = scalar (sparse to full) 
   2.36e-05 sec ]
 [ GrB_reduce (wait:A 2147467236 zombies, 0 pending) (sparse to hyper) C=A*B', dot_product (transposed A: 134217728-by-134217728, double, 16134 entries) (transpose) (build) (dot4) (F+=H'*F) (C in place) 
   0.714 sec ]
 [ GrB_reduce C=A'*B, dot_product (dot4) (F+=H'*F) (C in place) 
   0.00426 sec ]
 [ GrB_reduce (A full) 
   0.0195 sec ]
 [ GrB_mxv C=A'*B, dot_product (dot2) (B=H'*F) 
   0.0051 sec ]
 [ GrB_mxv C=A*B', dot_product (transposed A: 134217728-by-134217728, double, 16134 entries) (iso transpose) (iso build) (dot2) (B=H'*F) (C+=Z via add) add:(S<.>=S+S) 
   0.00577 sec ]
 [ GrB_apply (in-place-op) 
   2.45e-05 sec ]
 [ GrB_mxv C=A'*B, dot_product (dot2) (B=S'*F) 
   4.75 sec ]
 [ GrB_apply (in-place-op) 
   0.357 sec ]
 [ GrB_Vector_dup (iso dup) 
   0.0457 sec ]
 [ GrB_eWiseAdd add:(F<.>=Bf+S) (C+=Z via assign) (pending: 0) Method 23: (C full) += Z (Z bitmap/as-if-full) 
   0.098 sec ]
 [ GrB_apply (in-place-op) 
   0.316 sec ]
# of triangles: 5378
trial  1:    57.061768 sec rate  75.27

start trial 2
 [ GxB_select (iso select) 
   1.74 sec ]
 [ GrB_mxm (iso mask: struct) C<M>=A'*B, masked_dot_product (dot3) (S{S}=S'*S) nthreads 40 ntasks 1280 
   49.1 sec ]
 [ GrB_assign (iso assign) (pending: 0) Method 21: (C full) = scalar (sparse to full) 
   0.000117 sec ]
 [ GrB_reduce (wait:A 2147467236 zombies, 0 pending) (sparse to hyper) C=A*B', dot_product (transposed A: 134217728-by-134217728, double, 16134 entries) (transpose) (build) (dot4) (F+=H'*F) (C in place) 
   0.706 sec ]
 [ GrB_reduce C=A'*B, dot_product (dot4) (F+=H'*F) (C in place) 
   0.0001 sec ]
 [ GrB_reduce (A full) 
   0.0159 sec ]
 [ GrB_mxv C=A'*B, dot_product (dot2) (B=H'*F) 
   0.000371 sec ]
 [ GrB_mxv C=A*B', dot_product (transposed A: 134217728-by-134217728, double, 16134 entries) (iso transpose) (iso build) (dot2) (B=H'*F) (C+=Z via add) add:(S<.>=S+S) 
   0.00224 sec ]
 [ GrB_apply (in-place-op) 
   4.13e-05 sec ]
 [ GrB_mxv C=A'*B, dot_product (dot2) (B=S'*F) 
   4.74 sec ]
 [ GrB_apply (in-place-op) 
   0.286 sec ]
 [ GrB_Vector_dup (iso dup) 
   0.0443 sec ]
 [ GrB_eWiseAdd add:(F<.>=Bf+S) (C+=Z via assign) (pending: 0) Method 23: (C full) += Z (Z bitmap/as-if-full) 
   0.0983 sec ]
 [ GrB_apply (in-place-op) 
   0.322 sec ]
# of triangles: 5378
trial  2:    57.089085 sec rate  75.23
nthreads:  40 time:    56.474981 rate:  76.05
Avg: TCentrality threads: 40  time:     56.475 sec, matrix: ../../../GAP/GAP-urand/GAP-urand.grb
SuiteSparse:GraphBLAS v5.1.6 [July 31, 2021]
# of trials: 3
threads to test:  40
matrix: ../../../GAP/GAP-twitter/GAP-twitter.grb
[.grb]
Reading binary file: ../../../GAP/GAP-twitter/GAP-twitter.grb
read time: 38.5593
 [ GxB_select (iso select) 
   0.709 sec ]
 [ GrB_mxm (iso mask: struct) C<M>=A'*B, masked_dot_product (dot3) (S{S}=S'*S) nthreads 40 ntasks 1280 
   1.34e+03 sec ]
 [ GrB_assign (iso assign) (pending: 0) Method 21: (C full) = scalar (sparse to full) 
   3.84e-05 sec ]
 [ GrB_reduce (wait:A 358721204 zombies, 0 pending) C=A*B, saxpy (B=S*F) (bitmap saxpy) (fine, threads: 40, relwspace: 2.55, intensity: 13.7: atomic) (C+=Z via assign) (pending: 0) Method 23: (C full) += Z (Z bitmap/as-if-full) 
   2.2 sec ]
 [ GrB_reduce C=A'*B, dot_product (dot4) (F+=S'*F) (C in place) 
   0.123 sec ]
 [ GrB_reduce (A full) 
   0.00741 sec ]
 [ GrB_mxv C=A'*B, dot_product (dot2) (B=S'*F) 
   0.391 sec ]
 [ GrB_mxv C=A*B, saxpy (B=S*F) (bitmap saxpy) (fine, threads: 40, relwspace: 2.55, intensity: 13.7: atomic) (C+=Z via assign) (pending: 0) Method: bitmap_subassign Method:bit5:whole C += A 
   1.31 sec ]
 [ GrB_apply (in-place-op) 
   0.0192 sec ]
 [ GrB_mxv C=A'*B, dot_product (dot2) (B=S'*F) 
   1.48 sec ]
 [ GrB_apply (in-place-op) 
   0.0159 sec ]
 [ GrB_Vector_dup (iso dup) 
   0.0192 sec ]
 [ GrB_eWiseAdd add:(B<.>=B+B) (C+=Z via assign) (pending: 0) Method 23: (C full) += Z (Z bitmap/as-if-full) 
   0.0668 sec ]
 [ GrB_apply (in-place-op) 
   0.0193 sec ]
# of triangles: 3.48249e+10

start trial 0
 [ GxB_select (iso select) 
   0.706 sec ]
 [ GrB_mxm (iso mask: struct) C<M>=A'*B, masked_dot_product (dot3) (S{S}=S'*S) nthreads 40 ntasks 1280 
   1.34e+03 sec ]
 [ GrB_assign (iso assign) (pending: 0) Method 21: (C full) = scalar (sparse to full) 
   4e-05 sec ]
 [ GrB_reduce (wait:A 358721204 zombies, 0 pending) C=A*B, saxpy (B=S*F) (bitmap saxpy) (fine, threads: 40, relwspace: 2.55, intensity: 13.7: atomic) (C+=Z via assign) (pending: 0) Method 23: (C full) += Z (Z bitmap/as-if-full) 
   2.28 sec ]
 [ GrB_reduce C=A'*B, dot_product (dot4) (F+=S'*F) (C in place) 
   0.124 sec ]
 [ GrB_reduce (A full) 
   0.00752 sec ]
 [ GrB_mxv C=A'*B, dot_product (dot2) (B=S'*F) 
   0.393 sec ]
 [ GrB_mxv C=A*B, saxpy (B=S*F) (bitmap saxpy) (fine, threads: 40, relwspace: 2.55, intensity: 13.7: atomic) (C+=Z via assign) (pending: 0) Method: bitmap_subassign Method:bit5:whole C += A 
   1.31 sec ]
 [ GrB_apply (in-place-op) 
   0.0183 sec ]
 [ GrB_mxv C=A'*B, dot_product (dot2) (B=S'*F) 
   1.49 sec ]
 [ GrB_apply (in-place-op) 
   0.0169 sec ]
 [ GrB_Vector_dup (iso dup) 
   0.0212 sec ]
 [ GrB_eWiseAdd add:(B<.>=B+B) (C+=Z via assign) (pending: 0) Method 23: (C full) += Z (Z bitmap/as-if-full) 
   0.0685 sec ]
 [ GrB_apply (in-place-op) 
   0.0195 sec ]
# of triangles: 3.48249e+10
trial  0:  1346.716180 sec rate   1.79

start trial 1
 [ GxB_select (iso select) 
   0.71 sec ]
 [ GrB_mxm (iso mask: struct) C<M>=A'*B, masked_dot_product (dot3) (S{S}=S'*S) nthreads 40 ntasks 1280 
   1.34e+03 sec ]
 [ GrB_assign (iso assign) (pending: 0) Method 21: (C full) = scalar (sparse to full) 
   3.88e-05 sec ]
 [ GrB_reduce (wait:A 358721204 zombies, 0 pending) C=A*B, saxpy (B=S*F) (bitmap saxpy) (fine, threads: 40, relwspace: 2.55, intensity: 13.7: atomic) (C+=Z via assign) (pending: 0) Method 23: (C full) += Z (Z bitmap/as-if-full) 
   2.27 sec ]
 [ GrB_reduce C=A'*B, dot_product (dot4) (F+=S'*F) (C in place) 
   0.124 sec ]
 [ GrB_reduce (A full) 
   0.00726 sec ]
 [ GrB_mxv C=A'*B, dot_product (dot2) (B=S'*F) 
   0.393 sec ]
 [ GrB_mxv C=A*B, saxpy (B=S*F) (bitmap saxpy) (fine, threads: 40, relwspace: 2.55, intensity: 13.7: atomic) (C+=Z via assign) (pending: 0) Method: bitmap_subassign Method:bit5:whole C += A 
   1.29 sec ]
 [ GrB_apply (in-place-op) 
   0.0188 sec ]
 [ GrB_mxv C=A'*B, dot_product (dot2) (B=S'*F) 
   1.48 sec ]
 [ GrB_apply (in-place-op) 
   0.0159 sec ]
 [ GrB_Vector_dup (iso dup) 
   0.0198 sec ]
 [ GrB_eWiseAdd add:(B<.>=B+B) (C+=Z via assign) (pending: 0) Method 23: (C full) += Z (Z bitmap/as-if-full) 
   0.067 sec ]
 [ GrB_apply (in-place-op) 
   0.019 sec ]
# of triangles: 3.48249e+10
trial  1:  1345.267103 sec rate   1.79

start trial 2
 [ GxB_select (iso select) 
   0.709 sec ]
 [ GrB_mxm (iso mask: struct) C<M>=A'*B, masked_dot_product (dot3) (S{S}=S'*S) nthreads 40 ntasks 1280 
   1.34e+03 sec ]
 [ GrB_assign (iso assign) (pending: 0) Method 21: (C full) = scalar (sparse to full) 
   4.02e-05 sec ]
 [ GrB_reduce (wait:A 358721204 zombies, 0 pending) C=A*B, saxpy (B=S*F) (bitmap saxpy) (fine, threads: 40, relwspace: 2.55, intensity: 13.7: atomic) (C+=Z via assign) (pending: 0) Method 23: (C full) += Z (Z bitmap/as-if-full) 
   2.3 sec ]
 [ GrB_reduce C=A'*B, dot_product (dot4) (F+=S'*F) (C in place) 
   0.124 sec ]
 [ GrB_reduce (A full) 
   0.00899 sec ]
 [ GrB_mxv C=A'*B, dot_product (dot2) (B=S'*F) 
   0.393 sec ]
 [ GrB_mxv C=A*B, saxpy (B=S*F) (bitmap saxpy) (fine, threads: 40, relwspace: 2.55, intensity: 13.7: atomic) (C+=Z via assign) (pending: 0) Method: bitmap_subassign Method:bit5:whole C += A 
   1.31 sec ]
 [ GrB_apply (in-place-op) 
   0.0216 sec ]
 [ GrB_mxv C=A'*B, dot_product (dot2) (B=S'*F) 
   1.49 sec ]
 [ GrB_apply (in-place-op) 
   0.0165 sec ]
 [ GrB_Vector_dup (iso dup) 
   0.0205 sec ]
 [ GrB_eWiseAdd add:(B<.>=B+B) (C+=Z via assign) (pending: 0) Method 23: (C full) += Z (Z bitmap/as-if-full) 
   0.0661 sec ]
 [ GrB_apply (in-place-op) 
   0.0196 sec ]
# of triangles: 3.48249e+10
trial  2:  1347.699626 sec rate   1.78
nthreads:  40 time:  1346.560970 rate:   1.79
Avg: TCentrality threads: 40  time:   1346.561 sec, matrix: ../../../GAP/GAP-twitter/GAP-twitter.grb
SuiteSparse:GraphBLAS v5.1.6 [July 31, 2021]
# of trials: 3
threads to test:  40
matrix: ../../../GAP/GAP-web/GAP-web.grb
[.grb]
Reading binary file: ../../../GAP/GAP-web/GAP-web.grb
read time: 41.9493
 [ GxB_select (iso select) 
   0.998 sec ]
 [ GrB_mxm (iso mask: struct) C<M>=A'*B, masked_dot_product (dot3) (S{S}=S'*S) nthreads 40 ntasks 1280 
   85.9 sec ]
 [ GrB_assign (iso assign) (pending: 0) Method 21: (C full) = scalar (sparse to full) 
   2.58e-05 sec ]
 [ GrB_reduce (wait:A 37249225 zombies, 0 pending) C=A*B, saxpy (B=S*F) (bitmap saxpy) (fine, threads: 40, relwspace: 1.08, intensity: 35: atomic) (C+=Z via assign) (pending: 0) Method 23: (C full) += Z (Z bitmap/as-if-full) 
   2.47 sec ]
 [ GrB_reduce C=A'*B, dot_product (dot4) (F+=S'*F) (C in place) 
   0.236 sec ]
 [ GrB_reduce (A full) 
   0.00604 sec ]
 [ GrB_mxv C=A'*B, dot_product (dot2) (B=S'*F) 
   0.248 sec ]
 [ GrB_mxv C=A*B, saxpy (B=S*F) (bitmap saxpy) (fine, threads: 40, relwspace: 1.08, intensity: 35: atomic) (C+=Z via assign) (pending: 0) Method: bitmap_subassign Method:bit5:whole C += A 
   0.893 sec ]
 [ GrB_apply (in-place-op) 
   0.0174 sec ]
 [ GrB_mxv C=A'*B, dot_product (dot2) (B=S'*F) 
   0.494 sec ]
 [ GrB_apply (in-place-op) 
   0.0145 sec ]
 [ GrB_Vector_dup (iso dup) 
   0.0178 sec ]
 [ GrB_eWiseAdd add:(B<.>=B+B) (C+=Z via assign) (pending: 0) Method 23: (C full) += Z (Z bitmap/as-if-full) 
   0.0567 sec ]
 [ GrB_apply (in-place-op) 
   0.0181 sec ]
# of triangles: 8.4907e+10

start trial 0
 [ GxB_select (iso select) 
   0.989 sec ]
 [ GrB_mxm (iso mask: struct) C<M>=A'*B, masked_dot_product (dot3) (S{S}=S'*S) nthreads 40 ntasks 1280 
   85.2 sec ]
 [ GrB_assign (iso assign) (pending: 0) Method 21: (C full) = scalar (sparse to full) 
   0.000569 sec ]
 [ GrB_reduce (wait:A 37249225 zombies, 0 pending) C=A*B, saxpy (B=S*F) (bitmap saxpy) (fine, threads: 40, relwspace: 1.08, intensity: 35: atomic) (C+=Z via assign) (pending: 0) Method 23: (C full) += Z (Z bitmap/as-if-full) 
   2.47 sec ]
 [ GrB_reduce C=A'*B, dot_product (dot4) (F+=S'*F) (C in place) 
   0.237 sec ]
 [ GrB_reduce (A full) 
   0.00743 sec ]
 [ GrB_mxv C=A'*B, dot_product (dot2) (B=S'*F) 
   0.249 sec ]
 [ GrB_mxv C=A*B, saxpy (B=S*F) (bitmap saxpy) (fine, threads: 40, relwspace: 1.08, intensity: 35: atomic) (C+=Z via assign) (pending: 0) Method: bitmap_subassign Method:bit5:whole C += A 
   0.874 sec ]
 [ GrB_apply (in-place-op) 
   0.0173 sec ]
 [ GrB_mxv C=A'*B, dot_product (dot2) (B=S'*F) 
   0.495 sec ]
 [ GrB_apply (in-place-op) 
   0.0146 sec ]
 [ GrB_Vector_dup (iso dup) 
   0.0178 sec ]
 [ GrB_eWiseAdd add:(B<.>=B+B) (C+=Z via assign) (pending: 0) Method 23: (C full) += Z (Z bitmap/as-if-full) 
   0.0574 sec ]
 [ GrB_apply (in-place-op) 
   0.0181 sec ]
# of triangles: 8.4907e+10
trial  0:    90.679334 sec rate  39.92

start trial 1
 [ GxB_select (iso select) 
   0.99 sec ]
 [ GrB_mxm (iso mask: struct) C<M>=A'*B, masked_dot_product (dot3) (S{S}=S'*S) nthreads 40 ntasks 1280 
   85.6 sec ]
 [ GrB_assign (iso assign) (pending: 0) Method 21: (C full) = scalar (sparse to full) 
   2.77e-05 sec ]
 [ GrB_reduce (wait:A 37249225 zombies, 0 pending) C=A*B, saxpy (B=S*F) (bitmap saxpy) (fine, threads: 40, relwspace: 1.08, intensity: 35: atomic) (C+=Z via assign) (pending: 0) Method 23: (C full) += Z (Z bitmap/as-if-full) 
   2.49 sec ]
 [ GrB_reduce C=A'*B, dot_product (dot4) (F+=S'*F) (C in place) 
   0.237 sec ]
 [ GrB_reduce (A full) 
   0.00747 sec ]
 [ GrB_mxv C=A'*B, dot_product (dot2) (B=S'*F) 
   0.248 sec ]
 [ GrB_mxv C=A*B, saxpy (B=S*F) (bitmap saxpy) (fine, threads: 40, relwspace: 1.08, intensity: 35: atomic) (C+=Z via assign) (pending: 0) Method: bitmap_subassign Method:bit5:whole C += A 
   0.885 sec ]
 [ GrB_apply (in-place-op) 
   0.0164 sec ]
 [ GrB_mxv C=A'*B, dot_product (dot2) (B=S'*F) 
   0.493 sec ]
 [ GrB_apply (in-place-op) 
   0.0149 sec ]
 [ GrB_Vector_dup (iso dup) 
   0.0182 sec ]
 [ GrB_eWiseAdd add:(B<.>=B+B) (C+=Z via assign) (pending: 0) Method 23: (C full) += Z (Z bitmap/as-if-full) 
   0.0552 sec ]
 [ GrB_apply (in-place-op) 
   0.0167 sec ]
# of triangles: 8.4907e+10
trial  1:    91.061303 sec rate  39.75

start trial 2
 [ GxB_select (iso select) 
   0.989 sec ]
 [ GrB_mxm (iso mask: struct) C<M>=A'*B, masked_dot_product (dot3) (S{S}=S'*S) nthreads 40 ntasks 1280 
   85.4 sec ]
 [ GrB_assign (iso assign) (pending: 0) Method 21: (C full) = scalar (sparse to full) 
   8.19e-05 sec ]
 [ GrB_reduce (wait:A 37249225 zombies, 0 pending) C=A*B, saxpy (B=S*F) (bitmap saxpy) (fine, threads: 40, relwspace: 1.08, intensity: 35: atomic) (C+=Z via assign) (pending: 0) Method 23: (C full) += Z (Z bitmap/as-if-full) 
   2.49 sec ]
 [ GrB_reduce C=A'*B, dot_product (dot4) (F+=S'*F) (C in place) 
   0.236 sec ]
 [ GrB_reduce (A full) 
   0.00639 sec ]
 [ GrB_mxv C=A'*B, dot_product (dot2) (B=S'*F) 
   0.249 sec ]
 [ GrB_mxv C=A*B, saxpy (B=S*F) (bitmap saxpy) (fine, threads: 40, relwspace: 1.08, intensity: 35: atomic) (C+=Z via assign) (pending: 0) Method: bitmap_subassign Method:bit5:whole C += A 
   0.867 sec ]
 [ GrB_apply (in-place-op) 
   0.016 sec ]
 [ GrB_mxv C=A'*B, dot_product (dot2) (B=S'*F) 
   0.494 sec ]
 [ GrB_apply (in-place-op) 
   0.0145 sec ]
 [ GrB_Vector_dup (iso dup) 
   0.0183 sec ]
 [ GrB_eWiseAdd add:(B<.>=B+B) (C+=Z via assign) (pending: 0) Method 23: (C full) += Z (Z bitmap/as-if-full) 
   0.0579 sec ]
 [ GrB_apply (in-place-op) 
   0.0167 sec ]
# of triangles: 8.4907e+10
trial  2:    90.849728 sec rate  39.85
nthreads:  40 time:    90.863455 rate:  39.84
Avg: TCentrality threads: 40  time:     90.863 sec, matrix: ../../../GAP/GAP-web/GAP-web.grb
SuiteSparse:GraphBLAS v5.1.6 [July 31, 2021]
# of trials: 3
threads to test:  40
matrix: ../../../GAP/GAP-road/GAP-road.grb
[.grb]
Reading binary file: ../../../GAP/GAP-road/GAP-road.grb
read time: 1.43005
 [ GxB_select (iso select) 
   0.0701 sec ]
 [ GrB_mxm (iso mask: struct) C<M>=A'*B, masked_dot_product (dot3) (S{S}=S'*S) nthreads 40 ntasks 1280 
   0.0906 sec ]
 [ GrB_assign (iso assign) (pending: 0) Method 21: (C full) = scalar (sparse to full) 
   0.000103 sec ]
 [ GrB_reduce (wait:A 27559497 zombies, 0 pending) (sparse to hyper) C=A*B, saxpy (B=H*F) (bitmap saxpy) (fine, threads: 19, relwspace: 9.25, intensity: 0.0541: atomic) (C+=Z via assign) (pending: 0) Method 23: (C full) += Z (Z bitmap/as-if-full) 
   0.0699 sec ]
 [ GrB_reduce C=A'*B, dot_product (dot4) (F+=H'*F) (C in place) 
   0.00422 sec ]
 [ GrB_reduce (A full) 
   0.00721 sec ]
 [ GrB_mxv C=A'*B, dot_product (dot2) (B=H'*F) 
   0.00863 sec ]
 [ GrB_mxv C=A*B, saxpy (B=H*F) (bitmap saxpy) (fine, threads: 19, relwspace: 9.25, intensity: 0.0541: atomic) (C+=Z via assign) (pending: 0) Method 04: C(:,:) += Z ; using S 
   0.013 sec ]
 [ GrB_apply (wait:A 0 zombies, 413266 pending) (build) add:(S<.>=S+H) (sparse to bitmap) (in-place-op) 
   0.0121 sec ]
 [ GrB_mxv C=A'*B, dot_product (dot2) (B=S'*F) 
   0.026 sec ]
 [ GrB_apply (in-place-op) 
   0.00616 sec ]
 [ GrB_Vector_dup (iso dup) 
   0.00867 sec ]
 [ GrB_eWiseAdd add:(F<.>=Bf+B) (C+=Z via assign) (pending: 0) Method 23: (C full) += Z (Z bitmap/as-if-full) 
   0.0236 sec ]
 [ GrB_apply (in-place-op) 
   0.00642 sec ]
# of triangles: 438804

start trial 0
 [ GxB_select (iso select) 
   0.0646 sec ]
 [ GrB_mxm (iso mask: struct) C<M>=A'*B, masked_dot_product (dot3) (S{S}=S'*S) nthreads 40 ntasks 1280 
   0.0976 sec ]
 [ GrB_assign (iso assign) (pending: 0) Method 21: (C full) = scalar (sparse to full) 
   0.000111 sec ]
 [ GrB_reduce (wait:A 27559497 zombies, 0 pending) (sparse to hyper) C=A*B, saxpy (B=H*F) (bitmap saxpy) (fine, threads: 19, relwspace: 9.25, intensity: 0.0541: atomic) (C+=Z via assign) (pending: 0) Method 23: (C full) += Z (Z bitmap/as-if-full) 
   0.0