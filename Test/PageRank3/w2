( cd build ; cmake  .. ; make --jobs=1 )
-- CMAKE build type:          Release
-- CMAKE C Flags release:     -O3 -DNDEBUG
-- CMAKE compiler ID:         GNU
-- CMAKE thread library:      -lpthread
-- CMAKE have pthreads:       1
-- CMAKE have Win32 pthreads: 
-- CMAKE have OpenMP:         TRUE
-- Automatic selection of synchronization method
-- Using OpenMP to synchronize user threads
-- CMAKE C flags:  -std=c11 -lm -Wno-pragmas  -O3 -DNDEBUG -fopenmp -DUSER_OPENMP_THREADS  -DHAVE_PTHREADS 
-- Configuring done
-- Generating done
-- Build files have been written to: /home/davis/sparse/LAGraph/Test/PageRank3/build
make[1]: Entering directory '/home/davis/sparse/LAGraph/Test/PageRank3/build'
make[2]: Entering directory '/home/davis/sparse/LAGraph/Test/PageRank3/build'
make[3]: Entering directory '/home/davis/sparse/LAGraph/Test/PageRank3/build'
Scanning dependencies of target gap_pr_test
make[3]: Leaving directory '/home/davis/sparse/LAGraph/Test/PageRank3/build'
make[3]: Entering directory '/home/davis/sparse/LAGraph/Test/PageRank3/build'
[ 50%] Building C object CMakeFiles/gap_pr_test.dir/gap_pr_test.c.o
[100%] Linking C executable gap_pr_test
make[3]: Leaving directory '/home/davis/sparse/LAGraph/Test/PageRank3/build'
[100%] Built target gap_pr_test
make[2]: Leaving directory '/home/davis/sparse/LAGraph/Test/PageRank3/build'
make[1]: Leaving directory '/home/davis/sparse/LAGraph/Test/PageRank3/build'
./build/gap_pr_test ../BinRead/west0067.grb
threads to test:  8
matrix: ../BinRead/west0067.grb
[.grb]
Reading binary file: ../BinRead/west0067.grb
 [ GxB_Matrix_import_CSR 7.08e-06 sec ]
 [ GxB_set 2.47e-06 sec ]
 [ GrB_apply (shallow-op) generic 8.81e-05 sec ]
 [ GxB_set (transpose) 2.31e-05 sec ]
 [ GrB_Matrix_nvals 7.67e-07 sec ]
 [ GrB_Matrix_dup 2.61e-06 sec ]
original # of edges: 294
 [ GrB_reduce 1.89e-05 sec ]
 [ GrB_reduce 2.07e-05 sec ]
 [ GrB_Vector_nvals 3.65e-07 sec ]
 [ GrB_Vector_nvals 6e-08 sec ]
 [ GrB_reduce 8.3e-06 sec ]
 [ GrB_Vector_nvals 7.3e-08 sec ]
 [ GrB_Vector_dup 1.05e-06 sec ]
 [ GxB_Vector_export 4.95e-07 sec ]

==========input graph: nodes: 67 edges: 294
diag entries added: 0
 [ GrB_Matrix_nvals 1.14e-07 sec ]
read time: 0.000314308 sec
# of trials: 16
chunk: 65536
 [ GrB_assign (C empty) Method 21: (C dense) = scalar 2.17e-05 sec ]
 [ GrB_Vector_dup 9.06e-07 sec ]
 [ GrB_assign (C dense) Method 22: (C dense) += scalar 1.9e-05 sec ]
 [ GrB_eWiseMult (A dense) (B dense) dense C=A+B 1.97e-05 sec ]
 [ GrB_assign (C empty) Method 21: (C dense) = scalar 7.62e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 0.0230471
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cc000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0254975
    (1,0)    0.0136567
    (2,0)    0.0136567
    (3,0)    0.0136567
    (4,0)    0.0136567
    (5,0)    0.00942786
    (6,0)    0.0149254
    (7,0)    0.0115423
    (8,0)    0.0115423
    (9,0)    0.0115423
    (10,0)    0.0115423
    (11,0)    0.00731343
    (12,0)    0.0178856
    (13,0)    0.0178856
    (14,0)    0.0178856
    (15,0)    0.0178856
    (16,0)    0.0125995
    (17,0)    0.0212687
    (18,0)    0.018097
    (19,0)    0.0350124
    (20,0)    0.0115423
    (21,0)    0.0115423
    (22,0)    0.0115423
    (23,0)    0.0115423
    (24,0)    0.0104851
    (25,0)    0.0140796
    (26,0)    0.0140796
    (27,0)    0.0140796
    (28,0)    0.0140796
    (29,0)    0.00985075
    ...
MKL info: 0
0.0235 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 2.64e-05 sec ]
 [ GrB_apply (inplace-op) 1.15e-05 sec ]
 [ GrB_reduce 6.64e-06 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 1.07e-05 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 8.53e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 1.6938e-05
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0220887
    (1,0)    0.0129318
    (2,0)    0.0127221
    (3,0)    0.0136567
    (4,0)    0.0130816
    (5,0)    0.00981128
    (6,0)    0.0126249
    (7,0)    0.0146456
    (8,0)    0.0105718
    (9,0)    0.0115063
    (10,0)    0.0109312
    (11,0)    0.00706182
    (12,0)    0.019551
    (13,0)    0.0142791
    (14,0)    0.0182091
    (15,0)    0.017634
    (16,0)    0.0124977
    (17,0)    0.0227065
    (18,0)    0.0203436
    (19,0)    0.0393438
    (20,0)    0.0114105
    (21,0)    0.00931368
    (22,0)    0.0137829
    (23,0)    0.0132437
    (24,0)    0.0148524
    (25,0)    0.0130612
    (26,0)    0.0167156
    (27,0)    0.0147146
    (28,0)    0.0158289
    (29,0)    0.0131218
    ...
MKL info: 0
0.000264 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 9.22e-06 sec ]
 [ GrB_apply (inplace-op) 3.18e-06 sec ]
 [ GrB_reduce 1.75e-06 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 8.06e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 5.21e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 4.064e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0232132
    (1,0)    0.0137362
    (2,0)    0.0123324
    (3,0)    0.0145947
    (4,0)    0.014502
    (5,0)    0.0102149
    (6,0)    0.0125638
    (7,0)    0.0139089
    (8,0)    0.0107585
    (9,0)    0.0111774
    (10,0)    0.0117857
    (11,0)    0.00722375
    (12,0)    0.0180454
    (13,0)    0.0137987
    (14,0)    0.0177562
    (15,0)    0.0168708
    (16,0)    0.0121325
    (17,0)    0.0212654
    (18,0)    0.0181768
    (19,0)    0.0399208
    (20,0)    0.0112119
    (21,0)    0.00924239
    (22,0)    0.0145165
    (23,0)    0.0126211
    (24,0)    0.0156748
    (25,0)    0.0135252
    (26,0)    0.0155196
    (27,0)    0.0146325
    (28,0)    0.0148003
    (29,0)    0.0139976
    ...
MKL info: 0
0.000239 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 9.17e-06 sec ]
 [ GrB_apply (inplace-op) 3.01e-06 sec ]
 [ GrB_reduce 1.58e-06 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 8.01e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 5.25e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 4.239e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0232749
    (1,0)    0.0137944
    (2,0)    0.012203
    (3,0)    0.0143792
    (4,0)    0.0139452
    (5,0)    0.0098574
    (6,0)    0.01277
    (7,0)    0.0143065
    (8,0)    0.0108926
    (9,0)    0.0108941
    (10,0)    0.0117638
    (11,0)    0.00709306
    (12,0)    0.0187575
    (13,0)    0.014051
    (14,0)    0.0171187
    (15,0)    0.0167851
    (16,0)    0.0119779
    (17,0)    0.0219206
    (18,0)    0.0191946
    (19,0)    0.0388428
    (20,0)    0.0111562
    (21,0)    0.00905812
    (22,0)    0.0136768
    (23,0)    0.0119485
    (24,0)    0.0155086
    (25,0)    0.0137232
    (26,0)    0.0160246
    (27,0)    0.0149899
    (28,0)    0.0144007
    (29,0)    0.0139681
    ...
MKL info: 0
0.000228 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 8.42e-06 sec ]
 [ GrB_apply (inplace-op) 2.7e-06 sec ]
 [ GrB_reduce 1.18e-06 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 7.44e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 5.14e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 3.62901e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023315
    (1,0)    0.0138882
    (2,0)    0.0123459
    (3,0)    0.0144757
    (4,0)    0.0141007
    (5,0)    0.0100514
    (6,0)    0.01274
    (7,0)    0.0143498
    (8,0)    0.0109688
    (9,0)    0.011013
    (10,0)    0.0118908
    (11,0)    0.00723635
    (12,0)    0.018764
    (13,0)    0.0140595
    (14,0)    0.0174087
    (15,0)    0.016953
    (16,0)    0.0119551
    (17,0)    0.0218167
    (18,0)    0.019598
    (19,0)    0.0389976
    (20,0)    0.0111503
    (21,0)    0.00900973
    (22,0)    0.0140049
    (23,0)    0.012208
    (24,0)    0.0152048
    (25,0)    0.0135736
    (26,0)    0.0159555
    (27,0)    0.015091
    (28,0)    0.0144859
    (29,0)    0.0136949
    ...
MKL info: 0
0.00024 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 9.23e-06 sec ]
 [ GrB_apply (inplace-op) 2.96e-06 sec ]
 [ GrB_reduce 1.65e-06 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 8.04e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 5.04e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 3.96199e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023342
    (1,0)    0.0139194
    (2,0)    0.0123935
    (3,0)    0.0146033
    (4,0)    0.0142454
    (5,0)    0.0101259
    (6,0)    0.0128146
    (7,0)    0.0143784
    (8,0)    0.0110191
    (9,0)    0.0110391
    (10,0)    0.0119163
    (11,0)    0.00724003
    (12,0)    0.0188437
    (13,0)    0.0141657
    (14,0)    0.0174519
    (15,0)    0.0169961
    (16,0)    0.0120357
    (17,0)    0.0219393
    (18,0)    0.0196058
    (19,0)    0.039242
    (20,0)    0.0111945
    (21,0)    0.00902613
    (22,0)    0.0139688
    (23,0)    0.0122586
    (24,0)    0.0152724
    (25,0)    0.0134917
    (26,0)    0.015846
    (27,0)    0.0149329
    (28,0)    0.0144235
    (29,0)    0.0137047
    ...
MKL info: 0
0.000242 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 8.98e-06 sec ]
 [ GrB_apply (inplace-op) 2.91e-06 sec ]
 [ GrB_reduce 1.37e-06 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 7.98e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 5.31e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 3.54199e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233566
    (1,0)    0.0139173
    (2,0)    0.0123504
    (3,0)    0.0145414
    (4,0)    0.0141934
    (5,0)    0.0100768
    (6,0)    0.012878
    (7,0)    0.0143949
    (8,0)    0.0110248
    (9,0)    0.0110496
    (10,0)    0.0119415
    (11,0)    0.00723282
    (12,0)    0.0188654
    (13,0)    0.0141705
    (14,0)    0.0174829
    (15,0)    0.0170494
    (16,0)    0.0120356
    (17,0)    0.0220092
    (18,0)    0.0195075
    (19,0)    0.0393968
    (20,0)    0.0111877
    (21,0)    0.0090195
    (22,0)    0.0139908
    (23,0)    0.0122687
    (24,0)    0.0153018
    (25,0)    0.0135228
    (26,0)    0.0159007
    (27,0)    0.0149564
    (28,0)    0.0144364
    (29,0)    0.0137454
    ...
MKL info: 0
0.000225 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 8.12e-06 sec ]
 [ GrB_apply (inplace-op) 2.7e-06 sec ]
 [ GrB_reduce 1.13e-06 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 1.37e-05 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 5.25e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 3.36498e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233754
    (1,0)    0.0139103
    (2,0)    0.0123441
    (3,0)    0.0145657
    (4,0)    0.0142019
    (5,0)    0.0100792
    (6,0)    0.0128753
    (7,0)    0.0143946
    (8,0)    0.0110203
    (9,0)    0.0110525
    (10,0)    0.0119312
    (11,0)    0.00723823
    (12,0)    0.018868
    (13,0)    0.0141597
    (14,0)    0.0174878
    (15,0)    0.0170362
    (16,0)    0.0120434
    (17,0)    0.0219845
    (18,0)    0.0195274
    (19,0)    0.0394466
    (20,0)    0.0112039
    (21,0)    0.00901741
    (22,0)    0.0140088
    (23,0)    0.0122533
    (24,0)    0.0153346
    (25,0)    0.0135241
    (26,0)    0.0158715
    (27,0)    0.014969
    (28,0)    0.0144097
    (29,0)    0.0137583
    ...
MKL info: 0
0.000237 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 9.23e-06 sec ]
 [ GrB_apply (inplace-op) 2.91e-06 sec ]
 [ GrB_reduce 1.47e-06 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 7.93e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 5.31e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 3.90099e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233747
    (1,0)    0.013921
    (2,0)    0.0123442
    (3,0)    0.0145663
    (4,0)    0.0141993
    (5,0)    0.0100747
    (6,0)    0.0128759
    (7,0)    0.0143956
    (8,0)    0.011013
    (9,0)    0.0110446
    (10,0)    0.0119323
    (11,0)    0.00723176
    (12,0)    0.0188712
    (13,0)    0.0141589
    (14,0)    0.0174856
    (15,0)    0.0170393
    (16,0)    0.012043
    (17,0)    0.0219933
    (18,0)    0.0195201
    (19,0)    0.0394506
    (20,0)    0.0111963
    (21,0)    0.00901781
    (22,0)    0.0140029
    (23,0)    0.0122512
    (24,0)    0.0153417
    (25,0)    0.0135284
    (26,0)    0.0158778
    (27,0)    0.0149599
    (28,0)    0.0144113
    (29,0)    0.0137654
    ...
MKL info: 0
0.000227 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 7.97e-06 sec ]
 [ GrB_apply (inplace-op) 2.84e-06 sec ]
 [ GrB_reduce 9.91e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 7.82e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 5.07e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 3.61999e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023374
    (1,0)    0.0139214
    (2,0)    0.0123461
    (3,0)    0.0145676
    (4,0)    0.0141996
    (5,0)    0.0100757
    (6,0)    0.0128738
    (7,0)    0.0143951
    (8,0)    0.0110154
    (9,0)    0.0110448
    (10,0)    0.0119328
    (11,0)    0.00723062
    (12,0)    0.0188682
    (13,0)    0.0141567
    (14,0)    0.017484
    (15,0)    0.0170368
    (16,0)    0.0120386
    (17,0)    0.0219952
    (18,0)    0.0195214
    (19,0)    0.0394507
    (20,0)    0.0111962
    (21,0)    0.00901497
    (22,0)    0.0140044
    (23,0)    0.0122488
    (24,0)    0.015341
    (25,0)    0.0135295
    (26,0)    0.0158811
    (27,0)    0.0149651
    (28,0)    0.0144115
    (29,0)    0.0137667
    ...
MKL info: 0
0.000225 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 7.91e-06 sec ]
 [ GrB_apply (inplace-op) 2.97e-06 sec ]
 [ GrB_reduce 1.14e-06 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 8.01e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 5.09e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 3.51499e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233754
    (1,0)    0.0139228
    (2,0)    0.0123471
    (3,0)    0.0145696
    (4,0)    0.014201
    (5,0)    0.0100776
    (6,0)    0.0128739
    (7,0)    0.0143955
    (8,0)    0.0110162
    (9,0)    0.0110455
    (10,0)    0.0119336
    (11,0)    0.00723155
    (12,0)    0.0188687
    (13,0)    0.0141571
    (14,0)    0.0174838
    (15,0)    0.0170369
    (16,0)    0.0120391
    (17,0)    0.0219961
    (18,0)    0.0195227
    (19,0)    0.0394481
    (20,0)    0.0111962
    (21,0)    0.00901421
    (22,0)    0.0140042
    (23,0)    0.0122487
    (24,0)    0.0153409
    (25,0)    0.0135281
    (26,0)    0.0158792
    (27,0)    0.0149652
    (28,0)    0.0144109
    (29,0)    0.0137657
    ...
MKL info: 0
0.000224 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 8.04e-06 sec ]
 [ GrB_apply (inplace-op) 2.79e-06 sec ]
 [ GrB_reduce 1.05e-06 sec ]
warmup (3f):      0.026 (threads: 8)

Method 3f:

--------------------------- nthreads:  8
 [ GrB_assign (C empty) Method 21: (C dense) = scalar 8.97e-06 sec ]
 [ GrB_Vector_dup 1.99e-06 sec ]
 [ GrB_assign (C dense) Method 22: (C dense) += scalar 6.76e-06 sec ]
 [ GrB_eWiseMult (A dense) (B dense) dense C=A+B 7.39e-06 sec ]
 [ GrB_assign (C empty) Method 21: (C dense) = scalar 6.94e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 4.17e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0254975
    (1,0)    0.0136567
    (2,0)    0.0136567
    (3,0)    0.0136567
    (4,0)    0.0136567
    (5,0)    0.00942786
    (6,0)    0.0149254
    (7,0)    0.0115423
    (8,0)    0.0115423
    (9,0)    0.0115423
    (10,0)    0.0115423
    (11,0)    0.00731343
    (12,0)    0.0178856
    (13,0)    0.0178856
    (14,0)    0.0178856
    (15,0)    0.0178856
    (16,0)    0.0125995
    (17,0)    0.0212687
    (18,0)    0.018097
    (19,0)    0.0350124
    (20,0)    0.0115423
    (21,0)    0.0115423
    (22,0)    0.0115423
    (23,0)    0.0115423
    (24,0)    0.0104851
    (25,0)    0.0140796
    (26,0)    0.0140796
    (27,0)    0.0140796
    (28,0)    0.0140796
    (29,0)    0.00985075
    ...
MKL info: 0
0.000228 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 8.27e-06 sec ]
 [ GrB_apply (inplace-op) 3.04e-06 sec ]
 [ GrB_reduce 1.1e-06 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 7.78e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 4.99e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 3.53801e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0220887
    (1,0)    0.0129318
    (2,0)    0.0127221
    (3,0)    0.0136567
    (4,0)    0.0130816
    (5,0)    0.00981128
    (6,0)    0.0126249
    (7,0)    0.0146456
    (8,0)    0.0105718
    (9,0)    0.0115063
    (10,0)    0.0109312
    (11,0)    0.00706182
    (12,0)    0.019551
    (13,0)    0.0142791
    (14,0)    0.0182091
    (15,0)    0.017634
    (16,0)    0.0124977
    (17,0)    0.0227065
    (18,0)    0.0203436
    (19,0)    0.0393438
    (20,0)    0.0114105
    (21,0)    0.00931368
    (22,0)    0.0137829
    (23,0)    0.0132437
    (24,0)    0.0148524
    (25,0)    0.0130612
    (26,0)    0.0167156
    (27,0)    0.0147146
    (28,0)    0.0158289
    (29,0)    0.0131218
    ...
MKL info: 0
0.000229 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 8.19e-06 sec ]
 [ GrB_apply (inplace-op) 2.78e-06 sec ]
 [ GrB_reduce 1.08e-06 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 7.65e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 5.05e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 3.47101e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0232132
    (1,0)    0.0137362
    (2,0)    0.0123324
    (3,0)    0.0145947
    (4,0)    0.014502
    (5,0)    0.0102149
    (6,0)    0.0125638
    (7,0)    0.0139089
    (8,0)    0.0107585
    (9,0)    0.0111774
    (10,0)    0.0117857
    (11,0)    0.00722375
    (12,0)    0.0180454
    (13,0)    0.0137987
    (14,0)    0.0177562
    (15,0)    0.0168708
    (16,0)    0.0121325
    (17,0)    0.0212654
    (18,0)    0.0181768
    (19,0)    0.0399208
    (20,0)    0.0112119
    (21,0)    0.00924239
    (22,0)    0.0145165
    (23,0)    0.0126211
    (24,0)    0.0156748
    (25,0)    0.0135252
    (26,0)    0.0155196
    (27,0)    0.0146325
    (28,0)    0.0148003
    (29,0)    0.0139976
    ...
MKL info: 0
0.000224 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 8.24e-06 sec ]
 [ GrB_apply (inplace-op) 2.86e-06 sec ]
 [ GrB_reduce 9.21e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 7.42e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 5.05e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 3.46301e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0232749
    (1,0)    0.0137944
    (2,0)    0.012203
    (3,0)    0.0143792
    (4,0)    0.0139452
    (5,0)    0.0098574
    (6,0)    0.01277
    (7,0)    0.0143065
    (8,0)    0.0108926
    (9,0)    0.0108941
    (10,0)    0.0117638
    (11,0)    0.00709306
    (12,0)    0.0187575
    (13,0)    0.014051
    (14,0)    0.0171187
    (15,0)    0.0167851
    (16,0)    0.0119779
    (17,0)    0.0219206
    (18,0)    0.0191946
    (19,0)    0.0388428
    (20,0)    0.0111562
    (21,0)    0.00905812
    (22,0)    0.0136768
    (23,0)    0.0119485
    (24,0)    0.0155086
    (25,0)    0.0137232
    (26,0)    0.0160246
    (27,0)    0.0149899
    (28,0)    0.0144007
    (29,0)    0.0139681
    ...
MKL info: 0
0.000224 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 8.12e-06 sec ]
 [ GrB_apply (inplace-op) 2.65e-06 sec ]
 [ GrB_reduce 9.19e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 7.64e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 5.08e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 3.491e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023315
    (1,0)    0.0138882
    (2,0)    0.0123459
    (3,0)    0.0144757
    (4,0)    0.0141007
    (5,0)    0.0100514
    (6,0)    0.01274
    (7,0)    0.0143498
    (8,0)    0.0109688
    (9,0)    0.011013
    (10,0)    0.0118908
    (11,0)    0.00723635
    (12,0)    0.018764
    (13,0)    0.0140595
    (14,0)    0.0174087
    (15,0)    0.016953
    (16,0)    0.0119551
    (17,0)    0.0218167
    (18,0)    0.019598
    (19,0)    0.0389976
    (20,0)    0.0111503
    (21,0)    0.00900973
    (22,0)    0.0140049
    (23,0)    0.012208
    (24,0)    0.0152048
    (25,0)    0.0135736
    (26,0)    0.0159555
    (27,0)    0.015091
    (28,0)    0.0144859
    (29,0)    0.0136949
    ...
MKL info: 0
0.000228 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 8.17e-06 sec ]
 [ GrB_apply (inplace-op) 2.68e-06 sec ]
 [ GrB_reduce 9.9e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 7.78e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 5.14e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 3.23998e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023342
    (1,0)    0.0139194
    (2,0)    0.0123935
    (3,0)    0.0146033
    (4,0)    0.0142454
    (5,0)    0.0101259
    (6,0)    0.0128146
    (7,0)    0.0143784
    (8,0)    0.0110191
    (9,0)    0.0110391
    (10,0)    0.0119163
    (11,0)    0.00724003
    (12,0)    0.0188437
    (13,0)    0.0141657
    (14,0)    0.0174519
    (15,0)    0.0169961
    (16,0)    0.0120357
    (17,0)    0.0219393
    (18,0)    0.0196058
    (19,0)    0.039242
    (20,0)    0.0111945
    (21,0)    0.00902613
    (22,0)    0.0139688
    (23,0)    0.0122586
    (24,0)    0.0152724
    (25,0)    0.0134917
    (26,0)    0.015846
    (27,0)    0.0149329
    (28,0)    0.0144235
    (29,0)    0.0137047
    ...
MKL info: 0
0.000223 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 6.25e-06 sec ]
 [ GrB_apply (inplace-op) 2.18e-06 sec ]
 [ GrB_reduce 7.97e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 6.18e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.99e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.68201e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233566
    (1,0)    0.0139173
    (2,0)    0.0123504
    (3,0)    0.0145414
    (4,0)    0.0141934
    (5,0)    0.0100768
    (6,0)    0.012878
    (7,0)    0.0143949
    (8,0)    0.0110248
    (9,0)    0.0110496
    (10,0)    0.0119415
    (11,0)    0.00723282
    (12,0)    0.0188654
    (13,0)    0.0141705
    (14,0)    0.0174829
    (15,0)    0.0170494
    (16,0)    0.0120356
    (17,0)    0.0220092
    (18,0)    0.0195075
    (19,0)    0.0393968
    (20,0)    0.0111877
    (21,0)    0.0090195
    (22,0)    0.0139908
    (23,0)    0.0122687
    (24,0)    0.0153018
    (25,0)    0.0135228
    (26,0)    0.0159007
    (27,0)    0.0149564
    (28,0)    0.0144364
    (29,0)    0.0137454
    ...
MKL info: 0
0.000178 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 6.15e-06 sec ]
 [ GrB_apply (inplace-op) 2.23e-06 sec ]
 [ GrB_reduce 7.66e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 6.29e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.88e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.54702e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233754
    (1,0)    0.0139103
    (2,0)    0.0123441
    (3,0)    0.0145657
    (4,0)    0.0142019
    (5,0)    0.0100792
    (6,0)    0.0128753
    (7,0)    0.0143946
    (8,0)    0.0110203
    (9,0)    0.0110525
    (10,0)    0.0119312
    (11,0)    0.00723823
    (12,0)    0.018868
    (13,0)    0.0141597
    (14,0)    0.0174878
    (15,0)    0.0170362
    (16,0)    0.0120434
    (17,0)    0.0219845
    (18,0)    0.0195274
    (19,0)    0.0394466
    (20,0)    0.0112039
    (21,0)    0.00901741
    (22,0)    0.0140088
    (23,0)    0.0122533
    (24,0)    0.0153346
    (25,0)    0.0135241
    (26,0)    0.0158715
    (27,0)    0.014969
    (28,0)    0.0144097
    (29,0)    0.0137583
    ...
MKL info: 0
0.00018 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 6.38e-06 sec ]
 [ GrB_apply (inplace-op) 2.26e-06 sec ]
 [ GrB_reduce 9.32e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 6.31e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.9e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.899e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233747
    (1,0)    0.013921
    (2,0)    0.0123442
    (3,0)    0.0145663
    (4,0)    0.0141993
    (5,0)    0.0100747
    (6,0)    0.0128759
    (7,0)    0.0143956
    (8,0)    0.011013
    (9,0)    0.0110446
    (10,0)    0.0119323
    (11,0)    0.00723176
    (12,0)    0.0188712
    (13,0)    0.0141589
    (14,0)    0.0174856
    (15,0)    0.0170393
    (16,0)    0.012043
    (17,0)    0.0219933
    (18,0)    0.0195201
    (19,0)    0.0394506
    (20,0)    0.0111963
    (21,0)    0.00901781
    (22,0)    0.0140029
    (23,0)    0.0122512
    (24,0)    0.0153417
    (25,0)    0.0135284
    (26,0)    0.0158778
    (27,0)    0.0149599
    (28,0)    0.0144113
    (29,0)    0.0137654
    ...
MKL info: 0
0.000178 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 6.25e-06 sec ]
 [ GrB_apply (inplace-op) 2.25e-06 sec ]
 [ GrB_reduce 7.36e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 6.13e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.91e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.82499e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023374
    (1,0)    0.0139214
    (2,0)    0.0123461
    (3,0)    0.0145676
    (4,0)    0.0141996
    (5,0)    0.0100757
    (6,0)    0.0128738
    (7,0)    0.0143951
    (8,0)    0.0110154
    (9,0)    0.0110448
    (10,0)    0.0119328
    (11,0)    0.00723062
    (12,0)    0.0188682
    (13,0)    0.0141567
    (14,0)    0.017484
    (15,0)    0.0170368
    (16,0)    0.0120386
    (17,0)    0.0219952
    (18,0)    0.0195214
    (19,0)    0.0394507
    (20,0)    0.0111962
    (21,0)    0.00901497
    (22,0)    0.0140044
    (23,0)    0.0122488
    (24,0)    0.015341
    (25,0)    0.0135295
    (26,0)    0.0158811
    (27,0)    0.0149651
    (28,0)    0.0144115
    (29,0)    0.0137667
    ...
MKL info: 0
0.000186 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 6.71e-06 sec ]
 [ GrB_apply (inplace-op) 2.39e-06 sec ]
 [ GrB_reduce 9.13e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 6.31e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.92e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.64199e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233754
    (1,0)    0.0139228
    (2,0)    0.0123471
    (3,0)    0.0145696
    (4,0)    0.014201
    (5,0)    0.0100776
    (6,0)    0.0128739
    (7,0)    0.0143955
    (8,0)    0.0110162
    (9,0)    0.0110455
    (10,0)    0.0119336
    (11,0)    0.00723155
    (12,0)    0.0188687
    (13,0)    0.0141571
    (14,0)    0.0174838
    (15,0)    0.0170369
    (16,0)    0.0120391
    (17,0)    0.0219961
    (18,0)    0.0195227
    (19,0)    0.0394481
    (20,0)    0.0111962
    (21,0)    0.00901421
    (22,0)    0.0140042
    (23,0)    0.0122487
    (24,0)    0.0153409
    (25,0)    0.0135281
    (26,0)    0.0158792
    (27,0)    0.0149652
    (28,0)    0.0144109
    (29,0)    0.0137657
    ...
MKL info: 0
0.000183 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 9.99e-06 sec ]
 [ GrB_apply (inplace-op) 2.6e-06 sec ]
 [ GrB_reduce 1.13e-06 sec ]
trial:  0 time:     0.0028 sec
 [ GrB_assign (C empty) Method 21: (C dense) = scalar 6.43e-06 sec ]
 [ GrB_Vector_dup 8.12e-07 sec ]
 [ GrB_assign (C dense) Method 22: (C dense) += scalar 4.15e-06 sec ]
 [ GrB_eWiseMult (A dense) (B dense) dense C=A+B 5.71e-06 sec ]
 [ GrB_assign (C empty) Method 21: (C dense) = scalar 5.5e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 3.469e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0254975
    (1,0)    0.0136567
    (2,0)    0.0136567
    (3,0)    0.0136567
    (4,0)    0.0136567
    (5,0)    0.00942786
    (6,0)    0.0149254
    (7,0)    0.0115423
    (8,0)    0.0115423
    (9,0)    0.0115423
    (10,0)    0.0115423
    (11,0)    0.00731343
    (12,0)    0.0178856
    (13,0)    0.0178856
    (14,0)    0.0178856
    (15,0)    0.0178856
    (16,0)    0.0125995
    (17,0)    0.0212687
    (18,0)    0.018097
    (19,0)    0.0350124
    (20,0)    0.0115423
    (21,0)    0.0115423
    (22,0)    0.0115423
    (23,0)    0.0115423
    (24,0)    0.0104851
    (25,0)    0.0140796
    (26,0)    0.0140796
    (27,0)    0.0140796
    (28,0)    0.0140796
    (29,0)    0.00985075
    ...
MKL info: 0
0.000188 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 7.24e-06 sec ]
 [ GrB_apply (inplace-op) 2.28e-06 sec ]
 [ GrB_reduce 9.56e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 6.27e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 4.11e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.83401e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0220887
    (1,0)    0.0129318
    (2,0)    0.0127221
    (3,0)    0.0136567
    (4,0)    0.0130816
    (5,0)    0.00981128
    (6,0)    0.0126249
    (7,0)    0.0146456
    (8,0)    0.0105718
    (9,0)    0.0115063
    (10,0)    0.0109312
    (11,0)    0.00706182
    (12,0)    0.019551
    (13,0)    0.0142791
    (14,0)    0.0182091
    (15,0)    0.017634
    (16,0)    0.0124977
    (17,0)    0.0227065
    (18,0)    0.0203436
    (19,0)    0.0393438
    (20,0)    0.0114105
    (21,0)    0.00931368
    (22,0)    0.0137829
    (23,0)    0.0132437
    (24,0)    0.0148524
    (25,0)    0.0130612
    (26,0)    0.0167156
    (27,0)    0.0147146
    (28,0)    0.0158289
    (29,0)    0.0131218
    ...
MKL info: 0
0.000179 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 6.4e-06 sec ]
 [ GrB_apply (inplace-op) 2.16e-06 sec ]
 [ GrB_reduce 8e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 6.07e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 4.07e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.733e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0232132
    (1,0)    0.0137362
    (2,0)    0.0123324
    (3,0)    0.0145947
    (4,0)    0.014502
    (5,0)    0.0102149
    (6,0)    0.0125638
    (7,0)    0.0139089
    (8,0)    0.0107585
    (9,0)    0.0111774
    (10,0)    0.0117857
    (11,0)    0.00722375
    (12,0)    0.0180454
    (13,0)    0.0137987
    (14,0)    0.0177562
    (15,0)    0.0168708
    (16,0)    0.0121325
    (17,0)    0.0212654
    (18,0)    0.0181768
    (19,0)    0.0399208
    (20,0)    0.0112119
    (21,0)    0.00924239
    (22,0)    0.0145165
    (23,0)    0.0126211
    (24,0)    0.0156748
    (25,0)    0.0135252
    (26,0)    0.0155196
    (27,0)    0.0146325
    (28,0)    0.0148003
    (29,0)    0.0139976
    ...
MKL info: 0
0.000188 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 6.93e-06 sec ]
 [ GrB_apply (inplace-op) 2.37e-06 sec ]
 [ GrB_reduce 1.06e-06 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 6.5e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 4.14e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 3.27599e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0232749
    (1,0)    0.0137944
    (2,0)    0.012203
    (3,0)    0.0143792
    (4,0)    0.0139452
    (5,0)    0.0098574
    (6,0)    0.01277
    (7,0)    0.0143065
    (8,0)    0.0108926
    (9,0)    0.0108941
    (10,0)    0.0117638
    (11,0)    0.00709306
    (12,0)    0.0187575
    (13,0)    0.014051
    (14,0)    0.0171187
    (15,0)    0.0167851
    (16,0)    0.0119779
    (17,0)    0.0219206
    (18,0)    0.0191946
    (19,0)    0.0388428
    (20,0)    0.0111562
    (21,0)    0.00905812
    (22,0)    0.0136768
    (23,0)    0.0119485
    (24,0)    0.0155086
    (25,0)    0.0137232
    (26,0)    0.0160246
    (27,0)    0.0149899
    (28,0)    0.0144007
    (29,0)    0.0139681
    ...
MKL info: 0
0.000179 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 6.28e-06 sec ]
 [ GrB_apply (inplace-op) 2.18e-06 sec ]
 [ GrB_reduce 8.66e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 6.44e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.94e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.71798e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023315
    (1,0)    0.0138882
    (2,0)    0.0123459
    (3,0)    0.0144757
    (4,0)    0.0141007
    (5,0)    0.0100514
    (6,0)    0.01274
    (7,0)    0.0143498
    (8,0)    0.0109688
    (9,0)    0.011013
    (10,0)    0.0118908
    (11,0)    0.00723635
    (12,0)    0.018764
    (13,0)    0.0140595
    (14,0)    0.0174087
    (15,0)    0.016953
    (16,0)    0.0119551
    (17,0)    0.0218167
    (18,0)    0.019598
    (19,0)    0.0389976
    (20,0)    0.0111503
    (21,0)    0.00900973
    (22,0)    0.0140049
    (23,0)    0.012208
    (24,0)    0.0152048
    (25,0)    0.0135736
    (26,0)    0.0159555
    (27,0)    0.015091
    (28,0)    0.0144859
    (29,0)    0.0136949
    ...
MKL info: 0
0.000177 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 6.26e-06 sec ]
 [ GrB_apply (inplace-op) 2.2e-06 sec ]
 [ GrB_reduce 8.07e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 6.22e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.88e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.81099e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023342
    (1,0)    0.0139194
    (2,0)    0.0123935
    (3,0)    0.0146033
    (4,0)    0.0142454
    (5,0)    0.0101259
    (6,0)    0.0128146
    (7,0)    0.0143784
    (8,0)    0.0110191
    (9,0)    0.0110391
    (10,0)    0.0119163
    (11,0)    0.00724003
    (12,0)    0.0188437
    (13,0)    0.0141657
    (14,0)    0.0174519
    (15,0)    0.0169961
    (16,0)    0.0120357
    (17,0)    0.0219393
    (18,0)    0.0196058
    (19,0)    0.039242
    (20,0)    0.0111945
    (21,0)    0.00902613
    (22,0)    0.0139688
    (23,0)    0.0122586
    (24,0)    0.0152724
    (25,0)    0.0134917
    (26,0)    0.015846
    (27,0)    0.0149329
    (28,0)    0.0144235
    (29,0)    0.0137047
    ...
MKL info: 0
0.000182 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 6.36e-06 sec ]
 [ GrB_apply (inplace-op) 2.34e-06 sec ]
 [ GrB_reduce 9.46e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 6.25e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.94e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.74801e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233566
    (1,0)    0.0139173
    (2,0)    0.0123504
    (3,0)    0.0145414
    (4,0)    0.0141934
    (5,0)    0.0100768
    (6,0)    0.012878
    (7,0)    0.0143949
    (8,0)    0.0110248
    (9,0)    0.0110496
    (10,0)    0.0119415
    (11,0)    0.00723282
    (12,0)    0.0188654
    (13,0)    0.0141705
    (14,0)    0.0174829
    (15,0)    0.0170494
    (16,0)    0.0120356
    (17,0)    0.0220092
    (18,0)    0.0195075
    (19,0)    0.0393968
    (20,0)    0.0111877
    (21,0)    0.0090195
    (22,0)    0.0139908
    (23,0)    0.0122687
    (24,0)    0.0153018
    (25,0)    0.0135228
    (26,0)    0.0159007
    (27,0)    0.0149564
    (28,0)    0.0144364
    (29,0)    0.0137454
    ...
MKL info: 0
0.000178 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 6.38e-06 sec ]
 [ GrB_apply (inplace-op) 2.15e-06 sec ]
 [ GrB_reduce 7.35e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 6.03e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.97e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.49798e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233754
    (1,0)    0.0139103
    (2,0)    0.0123441
    (3,0)    0.0145657
    (4,0)    0.0142019
    (5,0)    0.0100792
    (6,0)    0.0128753
    (7,0)    0.0143946
    (8,0)    0.0110203
    (9,0)    0.0110525
    (10,0)    0.0119312
    (11,0)    0.00723823
    (12,0)    0.018868
    (13,0)    0.0141597
    (14,0)    0.0174878
    (15,0)    0.0170362
    (16,0)    0.0120434
    (17,0)    0.0219845
    (18,0)    0.0195274
    (19,0)    0.0394466
    (20,0)    0.0112039
    (21,0)    0.00901741
    (22,0)    0.0140088
    (23,0)    0.0122533
    (24,0)    0.0153346
    (25,0)    0.0135241
    (26,0)    0.0158715
    (27,0)    0.014969
    (28,0)    0.0144097
    (29,0)    0.0137583
    ...
MKL info: 0
0.000178 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 6.48e-06 sec ]
 [ GrB_apply (inplace-op) 2.18e-06 sec ]
 [ GrB_reduce 7.32e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 2.26e-05 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 4.03e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.62199e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233747
    (1,0)    0.013921
    (2,0)    0.0123442
    (3,0)    0.0145663
    (4,0)    0.0141993
    (5,0)    0.0100747
    (6,0)    0.0128759
    (7,0)    0.0143956
    (8,0)    0.011013
    (9,0)    0.0110446
    (10,0)    0.0119323
    (11,0)    0.00723176
    (12,0)    0.0188712
    (13,0)    0.0141589
    (14,0)    0.0174856
    (15,0)    0.0170393
    (16,0)    0.012043
    (17,0)    0.0219933
    (18,0)    0.0195201
    (19,0)    0.0394506
    (20,0)    0.0111963
    (21,0)    0.00901781
    (22,0)    0.0140029
    (23,0)    0.0122512
    (24,0)    0.0153417
    (25,0)    0.0135284
    (26,0)    0.0158778
    (27,0)    0.0149599
    (28,0)    0.0144113
    (29,0)    0.0137654
    ...
MKL info: 0
0.000173 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 6.27e-06 sec ]
 [ GrB_apply (inplace-op) 2.08e-06 sec ]
 [ GrB_reduce 8.28e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.87e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.94e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.835e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023374
    (1,0)    0.0139214
    (2,0)    0.0123461
    (3,0)    0.0145676
    (4,0)    0.0141996
    (5,0)    0.0100757
    (6,0)    0.0128738
    (7,0)    0.0143951
    (8,0)    0.0110154
    (9,0)    0.0110448
    (10,0)    0.0119328
    (11,0)    0.00723062
    (12,0)    0.0188682
    (13,0)    0.0141567
    (14,0)    0.017484
    (15,0)    0.0170368
    (16,0)    0.0120386
    (17,0)    0.0219952
    (18,0)    0.0195214
    (19,0)    0.0394507
    (20,0)    0.0111962
    (21,0)    0.00901497
    (22,0)    0.0140044
    (23,0)    0.0122488
    (24,0)    0.015341
    (25,0)    0.0135295
    (26,0)    0.0158811
    (27,0)    0.0149651
    (28,0)    0.0144115
    (29,0)    0.0137667
    ...
MKL info: 0
0.000173 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 6.19e-06 sec ]
 [ GrB_apply (inplace-op) 2.03e-06 sec ]
 [ GrB_reduce 7.81e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.84e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.98e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.82101e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233754
    (1,0)    0.0139228
    (2,0)    0.0123471
    (3,0)    0.0145696
    (4,0)    0.014201
    (5,0)    0.0100776
    (6,0)    0.0128739
    (7,0)    0.0143955
    (8,0)    0.0110162
    (9,0)    0.0110455
    (10,0)    0.0119336
    (11,0)    0.00723155
    (12,0)    0.0188687
    (13,0)    0.0141571
    (14,0)    0.0174838
    (15,0)    0.0170369
    (16,0)    0.0120391
    (17,0)    0.0219961
    (18,0)    0.0195227
    (19,0)    0.0394481
    (20,0)    0.0111962
    (21,0)    0.00901421
    (22,0)    0.0140042
    (23,0)    0.0122487
    (24,0)    0.0153409
    (25,0)    0.0135281
    (26,0)    0.0158792
    (27,0)    0.0149652
    (28,0)    0.0144109
    (29,0)    0.0137657
    ...
MKL info: 0
0.000172 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 8.51e-06 sec ]
 [ GrB_apply (inplace-op) 2.15e-06 sec ]
 [ GrB_reduce 8.31e-07 sec ]
trial:  1 time:     0.0024 sec
 [ GrB_assign (C empty) Method 21: (C dense) = scalar 6.07e-06 sec ]
 [ GrB_Vector_dup 6.91e-07 sec ]
 [ GrB_assign (C dense) Method 22: (C dense) += scalar 3.93e-06 sec ]
 [ GrB_eWiseMult (A dense) (B dense) dense C=A+B 5.34e-06 sec ]
 [ GrB_assign (C empty) Method 21: (C dense) = scalar 5.14e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.71e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0254975
    (1,0)    0.0136567
    (2,0)    0.0136567
    (3,0)    0.0136567
    (4,0)    0.0136567
    (5,0)    0.00942786
    (6,0)    0.0149254
    (7,0)    0.0115423
    (8,0)    0.0115423
    (9,0)    0.0115423
    (10,0)    0.0115423
    (11,0)    0.00731343
    (12,0)    0.0178856
    (13,0)    0.0178856
    (14,0)    0.0178856
    (15,0)    0.0178856
    (16,0)    0.0125995
    (17,0)    0.0212687
    (18,0)    0.018097
    (19,0)    0.0350124
    (20,0)    0.0115423
    (21,0)    0.0115423
    (22,0)    0.0115423
    (23,0)    0.0115423
    (24,0)    0.0104851
    (25,0)    0.0140796
    (26,0)    0.0140796
    (27,0)    0.0140796
    (28,0)    0.0140796
    (29,0)    0.00985075
    ...
MKL info: 0
0.000173 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 6.17e-06 sec ]
 [ GrB_apply (inplace-op) 2.27e-06 sec ]
 [ GrB_reduce 8.16e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 6.16e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.72e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.738e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0220887
    (1,0)    0.0129318
    (2,0)    0.0127221
    (3,0)    0.0136567
    (4,0)    0.0130816
    (5,0)    0.00981128
    (6,0)    0.0126249
    (7,0)    0.0146456
    (8,0)    0.0105718
    (9,0)    0.0115063
    (10,0)    0.0109312
    (11,0)    0.00706182
    (12,0)    0.019551
    (13,0)    0.0142791
    (14,0)    0.0182091
    (15,0)    0.017634
    (16,0)    0.0124977
    (17,0)    0.0227065
    (18,0)    0.0203436
    (19,0)    0.0393438
    (20,0)    0.0114105
    (21,0)    0.00931368
    (22,0)    0.0137829
    (23,0)    0.0132437
    (24,0)    0.0148524
    (25,0)    0.0130612
    (26,0)    0.0167156
    (27,0)    0.0147146
    (28,0)    0.0158289
    (29,0)    0.0131218
    ...
MKL info: 0
0.000172 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.9e-06 sec ]
 [ GrB_apply (inplace-op) 2.18e-06 sec ]
 [ GrB_reduce 7.39e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.95e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.76e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.55799e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0232132
    (1,0)    0.0137362
    (2,0)    0.0123324
    (3,0)    0.0145947
    (4,0)    0.014502
    (5,0)    0.0102149
    (6,0)    0.0125638
    (7,0)    0.0139089
    (8,0)    0.0107585
    (9,0)    0.0111774
    (10,0)    0.0117857
    (11,0)    0.00722375
    (12,0)    0.0180454
    (13,0)    0.0137987
    (14,0)    0.0177562
    (15,0)    0.0168708
    (16,0)    0.0121325
    (17,0)    0.0212654
    (18,0)    0.0181768
    (19,0)    0.0399208
    (20,0)    0.0112119
    (21,0)    0.00924239
    (22,0)    0.0145165
    (23,0)    0.0126211
    (24,0)    0.0156748
    (25,0)    0.0135252
    (26,0)    0.0155196
    (27,0)    0.0146325
    (28,0)    0.0148003
    (29,0)    0.0139976
    ...
MKL info: 0
0.000174 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 6.19e-06 sec ]
 [ GrB_apply (inplace-op) 2.16e-06 sec ]
 [ GrB_reduce 8.49e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.92e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.87e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.546e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0232749
    (1,0)    0.0137944
    (2,0)    0.012203
    (3,0)    0.0143792
    (4,0)    0.0139452
    (5,0)    0.0098574
    (6,0)    0.01277
    (7,0)    0.0143065
    (8,0)    0.0108926
    (9,0)    0.0108941
    (10,0)    0.0117638
    (11,0)    0.00709306
    (12,0)    0.0187575
    (13,0)    0.014051
    (14,0)    0.0171187
    (15,0)    0.0167851
    (16,0)    0.0119779
    (17,0)    0.0219206
    (18,0)    0.0191946
    (19,0)    0.0388428
    (20,0)    0.0111562
    (21,0)    0.00905812
    (22,0)    0.0136768
    (23,0)    0.0119485
    (24,0)    0.0155086
    (25,0)    0.0137232
    (26,0)    0.0160246
    (27,0)    0.0149899
    (28,0)    0.0144007
    (29,0)    0.0139681
    ...
MKL info: 0
0.000172 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 6.27e-06 sec ]
 [ GrB_apply (inplace-op) 2.07e-06 sec ]
 [ GrB_reduce 7.57e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.7e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.98e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.52301e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023315
    (1,0)    0.0138882
    (2,0)    0.0123459
    (3,0)    0.0144757
    (4,0)    0.0141007
    (5,0)    0.0100514
    (6,0)    0.01274
    (7,0)    0.0143498
    (8,0)    0.0109688
    (9,0)    0.011013
    (10,0)    0.0118908
    (11,0)    0.00723635
    (12,0)    0.018764
    (13,0)    0.0140595
    (14,0)    0.0174087
    (15,0)    0.016953
    (16,0)    0.0119551
    (17,0)    0.0218167
    (18,0)    0.019598
    (19,0)    0.0389976
    (20,0)    0.0111503
    (21,0)    0.00900973
    (22,0)    0.0140049
    (23,0)    0.012208
    (24,0)    0.0152048
    (25,0)    0.0135736
    (26,0)    0.0159555
    (27,0)    0.015091
    (28,0)    0.0144859
    (29,0)    0.0136949
    ...
MKL info: 0
0.000172 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 6.28e-06 sec ]
 [ GrB_apply (inplace-op) 2.02e-06 sec ]
 [ GrB_reduce 7.61e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.82e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.98e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.88401e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023342
    (1,0)    0.0139194
    (2,0)    0.0123935
    (3,0)    0.0146033
    (4,0)    0.0142454
    (5,0)    0.0101259
    (6,0)    0.0128146
    (7,0)    0.0143784
    (8,0)    0.0110191
    (9,0)    0.0110391
    (10,0)    0.0119163
    (11,0)    0.00724003
    (12,0)    0.0188437
    (13,0)    0.0141657
    (14,0)    0.0174519
    (15,0)    0.0169961
    (16,0)    0.0120357
    (17,0)    0.0219393
    (18,0)    0.0196058
    (19,0)    0.039242
    (20,0)    0.0111945
    (21,0)    0.00902613
    (22,0)    0.0139688
    (23,0)    0.0122586
    (24,0)    0.0152724
    (25,0)    0.0134917
    (26,0)    0.015846
    (27,0)    0.0149329
    (28,0)    0.0144235
    (29,0)    0.0137047
    ...
MKL info: 0
0.000183 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 6.78e-06 sec ]
 [ GrB_apply (inplace-op) 2.21e-06 sec ]
 [ GrB_reduce 9.7e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 6.09e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.84e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.82101e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233566
    (1,0)    0.0139173
    (2,0)    0.0123504
    (3,0)    0.0145414
    (4,0)    0.0141934
    (5,0)    0.0100768
    (6,0)    0.012878
    (7,0)    0.0143949
    (8,0)    0.0110248
    (9,0)    0.0110496
    (10,0)    0.0119415
    (11,0)    0.00723282
    (12,0)    0.0188654
    (13,0)    0.0141705
    (14,0)    0.0174829
    (15,0)    0.0170494
    (16,0)    0.0120356
    (17,0)    0.0220092
    (18,0)    0.0195075
    (19,0)    0.0393968
    (20,0)    0.0111877
    (21,0)    0.0090195
    (22,0)    0.0139908
    (23,0)    0.0122687
    (24,0)    0.0153018
    (25,0)    0.0135228
    (26,0)    0.0159007
    (27,0)    0.0149564
    (28,0)    0.0144364
    (29,0)    0.0137454
    ...
MKL info: 0
0.000174 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 6.17e-06 sec ]
 [ GrB_apply (inplace-op) 2.02e-06 sec ]
 [ GrB_reduce 7.4e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.88e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.96e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.432e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233754
    (1,0)    0.0139103
    (2,0)    0.0123441
    (3,0)    0.0145657
    (4,0)    0.0142019
    (5,0)    0.0100792
    (6,0)    0.0128753
    (7,0)    0.0143946
    (8,0)    0.0110203
    (9,0)    0.0110525
    (10,0)    0.0119312
    (11,0)    0.00723823
    (12,0)    0.018868
    (13,0)    0.0141597
    (14,0)    0.0174878
    (15,0)    0.0170362
    (16,0)    0.0120434
    (17,0)    0.0219845
    (18,0)    0.0195274
    (19,0)    0.0394466
    (20,0)    0.0112039
    (21,0)    0.00901741
    (22,0)    0.0140088
    (23,0)    0.0122533
    (24,0)    0.0153346
    (25,0)    0.0135241
    (26,0)    0.0158715
    (27,0)    0.014969
    (28,0)    0.0144097
    (29,0)    0.0137583
    ...
MKL info: 0
0.000172 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 6.04e-06 sec ]
 [ GrB_apply (inplace-op) 2.13e-06 sec ]
 [ GrB_reduce 7.53e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 6e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.92e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.546e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233747
    (1,0)    0.013921
    (2,0)    0.0123442
    (3,0)    0.0145663
    (4,0)    0.0141993
    (5,0)    0.0100747
    (6,0)    0.0128759
    (7,0)    0.0143956
    (8,0)    0.011013
    (9,0)    0.0110446
    (10,0)    0.0119323
    (11,0)    0.00723176
    (12,0)    0.0188712
    (13,0)    0.0141589
    (14,0)    0.0174856
    (15,0)    0.0170393
    (16,0)    0.012043
    (17,0)    0.0219933
    (18,0)    0.0195201
    (19,0)    0.0394506
    (20,0)    0.0111963
    (21,0)    0.00901781
    (22,0)    0.0140029
    (23,0)    0.0122512
    (24,0)    0.0153417
    (25,0)    0.0135284
    (26,0)    0.0158778
    (27,0)    0.0149599
    (28,0)    0.0144113
    (29,0)    0.0137654
    ...
MKL info: 0
0.000174 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 6.09e-06 sec ]
 [ GrB_apply (inplace-op) 2.19e-06 sec ]
 [ GrB_reduce 7.43e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 6.14e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.87e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.60799e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023374
    (1,0)    0.0139214
    (2,0)    0.0123461
    (3,0)    0.0145676
    (4,0)    0.0141996
    (5,0)    0.0100757
    (6,0)    0.0128738
    (7,0)    0.0143951
    (8,0)    0.0110154
    (9,0)    0.0110448
    (10,0)    0.0119328
    (11,0)    0.00723062
    (12,0)    0.0188682
    (13,0)    0.0141567
    (14,0)    0.017484
    (15,0)    0.0170368
    (16,0)    0.0120386
    (17,0)    0.0219952
    (18,0)    0.0195214
    (19,0)    0.0394507
    (20,0)    0.0111962
    (21,0)    0.00901497
    (22,0)    0.0140044
    (23,0)    0.0122488
    (24,0)    0.015341
    (25,0)    0.0135295
    (26,0)    0.0158811
    (27,0)    0.0149651
    (28,0)    0.0144115
    (29,0)    0.0137667
    ...
MKL info: 0
0.000172 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 6.07e-06 sec ]
 [ GrB_apply (inplace-op) 2.09e-06 sec ]
 [ GrB_reduce 8.14e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 6.05e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.77e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.621e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233754
    (1,0)    0.0139228
    (2,0)    0.0123471
    (3,0)    0.0145696
    (4,0)    0.014201
    (5,0)    0.0100776
    (6,0)    0.0128739
    (7,0)    0.0143955
    (8,0)    0.0110162
    (9,0)    0.0110455
    (10,0)    0.0119336
    (11,0)    0.00723155
    (12,0)    0.0188687
    (13,0)    0.0141571
    (14,0)    0.0174838
    (15,0)    0.0170369
    (16,0)    0.0120391
    (17,0)    0.0219961
    (18,0)    0.0195227
    (19,0)    0.0394481
    (20,0)    0.0111962
    (21,0)    0.00901421
    (22,0)    0.0140042
    (23,0)    0.0122487
    (24,0)    0.0153409
    (25,0)    0.0135281
    (26,0)    0.0158792
    (27,0)    0.0149652
    (28,0)    0.0144109
    (29,0)    0.0137657
    ...
MKL info: 0
0.000172 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 6.02e-06 sec ]
 [ GrB_apply (inplace-op) 2.12e-06 sec ]
 [ GrB_reduce 7.29e-07 sec ]
trial:  2 time:     0.0023 sec
 [ GrB_assign (C empty) Method 21: (C dense) = scalar 5.92e-06 sec ]
 [ GrB_Vector_dup 6.32e-07 sec ]
 [ GrB_assign (C dense) Method 22: (C dense) += scalar 4.01e-06 sec ]
 [ GrB_eWiseMult (A dense) (B dense) dense C=A+B 5.07e-06 sec ]
 [ GrB_assign (C empty) Method 21: (C dense) = scalar 5.26e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.624e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0254975
    (1,0)    0.0136567
    (2,0)    0.0136567
    (3,0)    0.0136567
    (4,0)    0.0136567
    (5,0)    0.00942786
    (6,0)    0.0149254
    (7,0)    0.0115423
    (8,0)    0.0115423
    (9,0)    0.0115423
    (10,0)    0.0115423
    (11,0)    0.00731343
    (12,0)    0.0178856
    (13,0)    0.0178856
    (14,0)    0.0178856
    (15,0)    0.0178856
    (16,0)    0.0125995
    (17,0)    0.0212687
    (18,0)    0.018097
    (19,0)    0.0350124
    (20,0)    0.0115423
    (21,0)    0.0115423
    (22,0)    0.0115423
    (23,0)    0.0115423
    (24,0)    0.0104851
    (25,0)    0.0140796
    (26,0)    0.0140796
    (27,0)    0.0140796
    (28,0)    0.0140796
    (29,0)    0.00985075
    ...
MKL info: 0
0.00017 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 6.28e-06 sec ]
 [ GrB_apply (inplace-op) 2.16e-06 sec ]
 [ GrB_reduce 7.73e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.65e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.81e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.86399e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0220887
    (1,0)    0.0129318
    (2,0)    0.0127221
    (3,0)    0.0136567
    (4,0)    0.0130816
    (5,0)    0.00981128
    (6,0)    0.0126249
    (7,0)    0.0146456
    (8,0)    0.0105718
    (9,0)    0.0115063
    (10,0)    0.0109312
    (11,0)    0.00706182
    (12,0)    0.019551
    (13,0)    0.0142791
    (14,0)    0.0182091
    (15,0)    0.017634
    (16,0)    0.0124977
    (17,0)    0.0227065
    (18,0)    0.0203436
    (19,0)    0.0393438
    (20,0)    0.0114105
    (21,0)    0.00931368
    (22,0)    0.0137829
    (23,0)    0.0132437
    (24,0)    0.0148524
    (25,0)    0.0130612
    (26,0)    0.0167156
    (27,0)    0.0147146
    (28,0)    0.0158289
    (29,0)    0.0131218
    ...
MKL info: 0
0.000173 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 6.63e-06 sec ]
 [ GrB_apply (inplace-op) 2.1e-06 sec ]
 [ GrB_reduce 1.03e-06 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.85e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.84e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.92601e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0232132
    (1,0)    0.0137362
    (2,0)    0.0123324
    (3,0)    0.0145947
    (4,0)    0.014502
    (5,0)    0.0102149
    (6,0)    0.0125638
    (7,0)    0.0139089
    (8,0)    0.0107585
    (9,0)    0.0111774
    (10,0)    0.0117857
    (11,0)    0.00722375
    (12,0)    0.0180454
    (13,0)    0.0137987
    (14,0)    0.0177562
    (15,0)    0.0168708
    (16,0)    0.0121325
    (17,0)    0.0212654
    (18,0)    0.0181768
    (19,0)    0.0399208
    (20,0)    0.0112119
    (21,0)    0.00924239
    (22,0)    0.0145165
    (23,0)    0.0126211
    (24,0)    0.0156748
    (25,0)    0.0135252
    (26,0)    0.0155196
    (27,0)    0.0146325
    (28,0)    0.0148003
    (29,0)    0.0139976
    ...
MKL info: 0
0.000168 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 6.02e-06 sec ]
 [ GrB_apply (inplace-op) 1.96e-06 sec ]
 [ GrB_reduce 8.22e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.65e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.75e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.55898e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0232749
    (1,0)    0.0137944
    (2,0)    0.012203
    (3,0)    0.0143792
    (4,0)    0.0139452
    (5,0)    0.0098574
    (6,0)    0.01277
    (7,0)    0.0143065
    (8,0)    0.0108926
    (9,0)    0.0108941
    (10,0)    0.0117638
    (11,0)    0.00709306
    (12,0)    0.0187575
    (13,0)    0.014051
    (14,0)    0.0171187
    (15,0)    0.0167851
    (16,0)    0.0119779
    (17,0)    0.0219206
    (18,0)    0.0191946
    (19,0)    0.0388428
    (20,0)    0.0111562
    (21,0)    0.00905812
    (22,0)    0.0136768
    (23,0)    0.0119485
    (24,0)    0.0155086
    (25,0)    0.0137232
    (26,0)    0.0160246
    (27,0)    0.0149899
    (28,0)    0.0144007
    (29,0)    0.0139681
    ...
MKL info: 0
0.000176 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 6.52e-06 sec ]
 [ GrB_apply (inplace-op) 2.2e-06 sec ]
 [ GrB_reduce 9.94e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.98e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.89e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 3.04301e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023315
    (1,0)    0.0138882
    (2,0)    0.0123459
    (3,0)    0.0144757
    (4,0)    0.0141007
    (5,0)    0.0100514
    (6,0)    0.01274
    (7,0)    0.0143498
    (8,0)    0.0109688
    (9,0)    0.011013
    (10,0)    0.0118908
    (11,0)    0.00723635
    (12,0)    0.018764
    (13,0)    0.0140595
    (14,0)    0.0174087
    (15,0)    0.016953
    (16,0)    0.0119551
    (17,0)    0.0218167
    (18,0)    0.019598
    (19,0)    0.0389976
    (20,0)    0.0111503
    (21,0)    0.00900973
    (22,0)    0.0140049
    (23,0)    0.012208
    (24,0)    0.0152048
    (25,0)    0.0135736
    (26,0)    0.0159555
    (27,0)    0.015091
    (28,0)    0.0144859
    (29,0)    0.0136949
    ...
MKL info: 0
0.000181 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.77e-06 sec ]
 [ GrB_apply (inplace-op) 1.96e-06 sec ]
 [ GrB_reduce 7.57e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.75e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.58e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.35299e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023342
    (1,0)    0.0139194
    (2,0)    0.0123935
    (3,0)    0.0146033
    (4,0)    0.0142454
    (5,0)    0.0101259
    (6,0)    0.0128146
    (7,0)    0.0143784
    (8,0)    0.0110191
    (9,0)    0.0110391
    (10,0)    0.0119163
    (11,0)    0.00724003
    (12,0)    0.0188437
    (13,0)    0.0141657
    (14,0)    0.0174519
    (15,0)    0.0169961
    (16,0)    0.0120357
    (17,0)    0.0219393
    (18,0)    0.0196058
    (19,0)    0.039242
    (20,0)    0.0111945
    (21,0)    0.00902613
    (22,0)    0.0139688
    (23,0)    0.0122586
    (24,0)    0.0152724
    (25,0)    0.0134917
    (26,0)    0.015846
    (27,0)    0.0149329
    (28,0)    0.0144235
    (29,0)    0.0137047
    ...
MKL info: 0
0.000161 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.67e-06 sec ]
 [ GrB_apply (inplace-op) 1.97e-06 sec ]
 [ GrB_reduce 7.32e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.63e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.48e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.33701e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233566
    (1,0)    0.0139173
    (2,0)    0.0123504
    (3,0)    0.0145414
    (4,0)    0.0141934
    (5,0)    0.0100768
    (6,0)    0.012878
    (7,0)    0.0143949
    (8,0)    0.0110248
    (9,0)    0.0110496
    (10,0)    0.0119415
    (11,0)    0.00723282
    (12,0)    0.0188654
    (13,0)    0.0141705
    (14,0)    0.0174829
    (15,0)    0.0170494
    (16,0)    0.0120356
    (17,0)    0.0220092
    (18,0)    0.0195075
    (19,0)    0.0393968
    (20,0)    0.0111877
    (21,0)    0.0090195
    (22,0)    0.0139908
    (23,0)    0.0122687
    (24,0)    0.0153018
    (25,0)    0.0135228
    (26,0)    0.0159007
    (27,0)    0.0149564
    (28,0)    0.0144364
    (29,0)    0.0137454
    ...
MKL info: 0
0.000164 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.76e-06 sec ]
 [ GrB_apply (inplace-op) 2.13e-06 sec ]
 [ GrB_reduce 8.17e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.63e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.6e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.44801e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233754
    (1,0)    0.0139103
    (2,0)    0.0123441
    (3,0)    0.0145657
    (4,0)    0.0142019
    (5,0)    0.0100792
    (6,0)    0.0128753
    (7,0)    0.0143946
    (8,0)    0.0110203
    (9,0)    0.0110525
    (10,0)    0.0119312
    (11,0)    0.00723823
    (12,0)    0.018868
    (13,0)    0.0141597
    (14,0)    0.0174878
    (15,0)    0.0170362
    (16,0)    0.0120434
    (17,0)    0.0219845
    (18,0)    0.0195274
    (19,0)    0.0394466
    (20,0)    0.0112039
    (21,0)    0.00901741
    (22,0)    0.0140088
    (23,0)    0.0122533
    (24,0)    0.0153346
    (25,0)    0.0135241
    (26,0)    0.0158715
    (27,0)    0.014969
    (28,0)    0.0144097
    (29,0)    0.0137583
    ...
MKL info: 0
0.000169 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 6.38e-06 sec ]
 [ GrB_apply (inplace-op) 2.08e-06 sec ]
 [ GrB_reduce 9.59e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.54e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.67e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.53701e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233747
    (1,0)    0.013921
    (2,0)    0.0123442
    (3,0)    0.0145663
    (4,0)    0.0141993
    (5,0)    0.0100747
    (6,0)    0.0128759
    (7,0)    0.0143956
    (8,0)    0.011013
    (9,0)    0.0110446
    (10,0)    0.0119323
    (11,0)    0.00723176
    (12,0)    0.0188712
    (13,0)    0.0141589
    (14,0)    0.0174856
    (15,0)    0.0170393
    (16,0)    0.012043
    (17,0)    0.0219933
    (18,0)    0.0195201
    (19,0)    0.0394506
    (20,0)    0.0111963
    (21,0)    0.00901781
    (22,0)    0.0140029
    (23,0)    0.0122512
    (24,0)    0.0153417
    (25,0)    0.0135284
    (26,0)    0.0158778
    (27,0)    0.0149599
    (28,0)    0.0144113
    (29,0)    0.0137654
    ...
MKL info: 0
0.000162 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.98e-06 sec ]
 [ GrB_apply (inplace-op) 1.95e-06 sec ]
 [ GrB_reduce 7.63e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.4e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.85e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.477e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023374
    (1,0)    0.0139214
    (2,0)    0.0123461
    (3,0)    0.0145676
    (4,0)    0.0141996
    (5,0)    0.0100757
    (6,0)    0.0128738
    (7,0)    0.0143951
    (8,0)    0.0110154
    (9,0)    0.0110448
    (10,0)    0.0119328
    (11,0)    0.00723062
    (12,0)    0.0188682
    (13,0)    0.0141567
    (14,0)    0.017484
    (15,0)    0.0170368
    (16,0)    0.0120386
    (17,0)    0.0219952
    (18,0)    0.0195214
    (19,0)    0.0394507
    (20,0)    0.0111962
    (21,0)    0.00901497
    (22,0)    0.0140044
    (23,0)    0.0122488
    (24,0)    0.015341
    (25,0)    0.0135295
    (26,0)    0.0158811
    (27,0)    0.0149651
    (28,0)    0.0144115
    (29,0)    0.0137667
    ...
MKL info: 0
0.000162 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.97e-06 sec ]
 [ GrB_apply (inplace-op) 1.94e-06 sec ]
 [ GrB_reduce 8.01e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.52e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.77e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.40601e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233754
    (1,0)    0.0139228
    (2,0)    0.0123471
    (3,0)    0.0145696
    (4,0)    0.014201
    (5,0)    0.0100776
    (6,0)    0.0128739
    (7,0)    0.0143955
    (8,0)    0.0110162
    (9,0)    0.0110455
    (10,0)    0.0119336
    (11,0)    0.00723155
    (12,0)    0.0188687
    (13,0)    0.0141571
    (14,0)    0.0174838
    (15,0)    0.0170369
    (16,0)    0.0120391
    (17,0)    0.0219961
    (18,0)    0.0195227
    (19,0)    0.0394481
    (20,0)    0.0111962
    (21,0)    0.00901421
    (22,0)    0.0140042
    (23,0)    0.0122487
    (24,0)    0.0153409
    (25,0)    0.0135281
    (26,0)    0.0158792
    (27,0)    0.0149652
    (28,0)    0.0144109
    (29,0)    0.0137657
    ...
MKL info: 0
0.000162 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.73e-06 sec ]
 [ GrB_apply (inplace-op) 1.88e-06 sec ]
 [ GrB_reduce 8.19e-07 sec ]
trial:  3 time:     0.0023 sec
 [ GrB_assign (C empty) Method 21: (C dense) = scalar 5.51e-06 sec ]
 [ GrB_Vector_dup 6.77e-07 sec ]
 [ GrB_assign (C dense) Method 22: (C dense) += scalar 3.61e-06 sec ]
 [ GrB_eWiseMult (A dense) (B dense) dense C=A+B 5.04e-06 sec ]
 [ GrB_assign (C empty) Method 21: (C dense) = scalar 4.7e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.46e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0254975
    (1,0)    0.0136567
    (2,0)    0.0136567
    (3,0)    0.0136567
    (4,0)    0.0136567
    (5,0)    0.00942786
    (6,0)    0.0149254
    (7,0)    0.0115423
    (8,0)    0.0115423
    (9,0)    0.0115423
    (10,0)    0.0115423
    (11,0)    0.00731343
    (12,0)    0.0178856
    (13,0)    0.0178856
    (14,0)    0.0178856
    (15,0)    0.0178856
    (16,0)    0.0125995
    (17,0)    0.0212687
    (18,0)    0.018097
    (19,0)    0.0350124
    (20,0)    0.0115423
    (21,0)    0.0115423
    (22,0)    0.0115423
    (23,0)    0.0115423
    (24,0)    0.0104851
    (25,0)    0.0140796
    (26,0)    0.0140796
    (27,0)    0.0140796
    (28,0)    0.0140796
    (29,0)    0.00985075
    ...
MKL info: 0
0.000165 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.78e-06 sec ]
 [ GrB_apply (inplace-op) 2.16e-06 sec ]
 [ GrB_reduce 8.6e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.77e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.67e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.32601e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0220887
    (1,0)    0.0129318
    (2,0)    0.0127221
    (3,0)    0.0136567
    (4,0)    0.0130816
    (5,0)    0.00981128
    (6,0)    0.0126249
    (7,0)    0.0146456
    (8,0)    0.0105718
    (9,0)    0.0115063
    (10,0)    0.0109312
    (11,0)    0.00706182
    (12,0)    0.019551
    (13,0)    0.0142791
    (14,0)    0.0182091
    (15,0)    0.017634
    (16,0)    0.0124977
    (17,0)    0.0227065
    (18,0)    0.0203436
    (19,0)    0.0393438
    (20,0)    0.0114105
    (21,0)    0.00931368
    (22,0)    0.0137829
    (23,0)    0.0132437
    (24,0)    0.0148524
    (25,0)    0.0130612
    (26,0)    0.0167156
    (27,0)    0.0147146
    (28,0)    0.0158289
    (29,0)    0.0131218
    ...
MKL info: 0
0.000161 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.66e-06 sec ]
 [ GrB_apply (inplace-op) 2.04e-06 sec ]
 [ GrB_reduce 7.06e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.63e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.51e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.27199e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0232132
    (1,0)    0.0137362
    (2,0)    0.0123324
    (3,0)    0.0145947
    (4,0)    0.014502
    (5,0)    0.0102149
    (6,0)    0.0125638
    (7,0)    0.0139089
    (8,0)    0.0107585
    (9,0)    0.0111774
    (10,0)    0.0117857
    (11,0)    0.00722375
    (12,0)    0.0180454
    (13,0)    0.0137987
    (14,0)    0.0177562
    (15,0)    0.0168708
    (16,0)    0.0121325
    (17,0)    0.0212654
    (18,0)    0.0181768
    (19,0)    0.0399208
    (20,0)    0.0112119
    (21,0)    0.00924239
    (22,0)    0.0145165
    (23,0)    0.0126211
    (24,0)    0.0156748
    (25,0)    0.0135252
    (26,0)    0.0155196
    (27,0)    0.0146325
    (28,0)    0.0148003
    (29,0)    0.0139976
    ...
MKL info: 0
0.000168 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 6.17e-06 sec ]
 [ GrB_apply (inplace-op) 2.15e-06 sec ]
 [ GrB_reduce 8.84e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.81e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.53e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.563e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0232749
    (1,0)    0.0137944
    (2,0)    0.012203
    (3,0)    0.0143792
    (4,0)    0.0139452
    (5,0)    0.0098574
    (6,0)    0.01277
    (7,0)    0.0143065
    (8,0)    0.0108926
    (9,0)    0.0108941
    (10,0)    0.0117638
    (11,0)    0.00709306
    (12,0)    0.0187575
    (13,0)    0.014051
    (14,0)    0.0171187
    (15,0)    0.0167851
    (16,0)    0.0119779
    (17,0)    0.0219206
    (18,0)    0.0191946
    (19,0)    0.0388428
    (20,0)    0.0111562
    (21,0)    0.00905812
    (22,0)    0.0136768
    (23,0)    0.0119485
    (24,0)    0.0155086
    (25,0)    0.0137232
    (26,0)    0.0160246
    (27,0)    0.0149899
    (28,0)    0.0144007
    (29,0)    0.0139681
    ...
MKL info: 0
0.000165 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.82e-06 sec ]
 [ GrB_apply (inplace-op) 2.14e-06 sec ]
 [ GrB_reduce 8.08e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.69e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.57e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.457e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023315
    (1,0)    0.0138882
    (2,0)    0.0123459
    (3,0)    0.0144757
    (4,0)    0.0141007
    (5,0)    0.0100514
    (6,0)    0.01274
    (7,0)    0.0143498
    (8,0)    0.0109688
    (9,0)    0.011013
    (10,0)    0.0118908
    (11,0)    0.00723635
    (12,0)    0.018764
    (13,0)    0.0140595
    (14,0)    0.0174087
    (15,0)    0.016953
    (16,0)    0.0119551
    (17,0)    0.0218167
    (18,0)    0.019598
    (19,0)    0.0389976
    (20,0)    0.0111503
    (21,0)    0.00900973
    (22,0)    0.0140049
    (23,0)    0.012208
    (24,0)    0.0152048
    (25,0)    0.0135736
    (26,0)    0.0159555
    (27,0)    0.015091
    (28,0)    0.0144859
    (29,0)    0.0136949
    ...
MKL info: 0
0.000162 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.82e-06 sec ]
 [ GrB_apply (inplace-op) 1.96e-06 sec ]
 [ GrB_reduce 7.25e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.46e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.59e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.63599e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023342
    (1,0)    0.0139194
    (2,0)    0.0123935
    (3,0)    0.0146033
    (4,0)    0.0142454
    (5,0)    0.0101259
    (6,0)    0.0128146
    (7,0)    0.0143784
    (8,0)    0.0110191
    (9,0)    0.0110391
    (10,0)    0.0119163
    (11,0)    0.00724003
    (12,0)    0.0188437
    (13,0)    0.0141657
    (14,0)    0.0174519
    (15,0)    0.0169961
    (16,0)    0.0120357
    (17,0)    0.0219393
    (18,0)    0.0196058
    (19,0)    0.039242
    (20,0)    0.0111945
    (21,0)    0.00902613
    (22,0)    0.0139688
    (23,0)    0.0122586
    (24,0)    0.0152724
    (25,0)    0.0134917
    (26,0)    0.015846
    (27,0)    0.0149329
    (28,0)    0.0144235
    (29,0)    0.0137047
    ...
MKL info: 0
0.000162 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.91e-06 sec ]
 [ GrB_apply (inplace-op) 2.71e-06 sec ]
 [ GrB_reduce 8.78e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 7.12e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 5.1e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 3.17299e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233566
    (1,0)    0.0139173
    (2,0)    0.0123504
    (3,0)    0.0145414
    (4,0)    0.0141934
    (5,0)    0.0100768
    (6,0)    0.012878
    (7,0)    0.0143949
    (8,0)    0.0110248
    (9,0)    0.0110496
    (10,0)    0.0119415
    (11,0)    0.00723282
    (12,0)    0.0188654
    (13,0)    0.0141705
    (14,0)    0.0174829
    (15,0)    0.0170494
    (16,0)    0.0120356
    (17,0)    0.0220092
    (18,0)    0.0195075
    (19,0)    0.0393968
    (20,0)    0.0111877
    (21,0)    0.0090195
    (22,0)    0.0139908
    (23,0)    0.0122687
    (24,0)    0.0153018
    (25,0)    0.0135228
    (26,0)    0.0159007
    (27,0)    0.0149564
    (28,0)    0.0144364
    (29,0)    0.0137454
    ...
MKL info: 0
0.000189 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 7.5e-06 sec ]
 [ GrB_apply (inplace-op) 2.26e-06 sec ]
 [ GrB_reduce 1.37e-06 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.97e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.97e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 3.36498e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233754
    (1,0)    0.0139103
    (2,0)    0.0123441
    (3,0)    0.0145657
    (4,0)    0.0142019
    (5,0)    0.0100792
    (6,0)    0.0128753
    (7,0)    0.0143946
    (8,0)    0.0110203
    (9,0)    0.0110525
    (10,0)    0.0119312
    (11,0)    0.00723823
    (12,0)    0.018868
    (13,0)    0.0141597
    (14,0)    0.0174878
    (15,0)    0.0170362
    (16,0)    0.0120434
    (17,0)    0.0219845
    (18,0)    0.0195274
    (19,0)    0.0394466
    (20,0)    0.0112039
    (21,0)    0.00901741
    (22,0)    0.0140088
    (23,0)    0.0122533
    (24,0)    0.0153346
    (25,0)    0.0135241
    (26,0)    0.0158715
    (27,0)    0.014969
    (28,0)    0.0144097
    (29,0)    0.0137583
    ...
MKL info: 0
0.000165 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 6.05e-06 sec ]
 [ GrB_apply (inplace-op) 1.86e-06 sec ]
 [ GrB_reduce 9e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.55e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.64e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.891e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233747
    (1,0)    0.013921
    (2,0)    0.0123442
    (3,0)    0.0145663
    (4,0)    0.0141993
    (5,0)    0.0100747
    (6,0)    0.0128759
    (7,0)    0.0143956
    (8,0)    0.011013
    (9,0)    0.0110446
    (10,0)    0.0119323
    (11,0)    0.00723176
    (12,0)    0.0188712
    (13,0)    0.0141589
    (14,0)    0.0174856
    (15,0)    0.0170393
    (16,0)    0.012043
    (17,0)    0.0219933
    (18,0)    0.0195201
    (19,0)    0.0394506
    (20,0)    0.0111963
    (21,0)    0.00901781
    (22,0)    0.0140029
    (23,0)    0.0122512
    (24,0)    0.0153417
    (25,0)    0.0135284
    (26,0)    0.0158778
    (27,0)    0.0149599
    (28,0)    0.0144113
    (29,0)    0.0137654
    ...
MKL info: 0
0.000163 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.75e-06 sec ]
 [ GrB_apply (inplace-op) 1.92e-06 sec ]
 [ GrB_reduce 7.52e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.57e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.7e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.59301e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023374
    (1,0)    0.0139214
    (2,0)    0.0123461
    (3,0)    0.0145676
    (4,0)    0.0141996
    (5,0)    0.0100757
    (6,0)    0.0128738
    (7,0)    0.0143951
    (8,0)    0.0110154
    (9,0)    0.0110448
    (10,0)    0.0119328
    (11,0)    0.00723062
    (12,0)    0.0188682
    (13,0)    0.0141567
    (14,0)    0.017484
    (15,0)    0.0170368
    (16,0)    0.0120386
    (17,0)    0.0219952
    (18,0)    0.0195214
    (19,0)    0.0394507
    (20,0)    0.0111962
    (21,0)    0.00901497
    (22,0)    0.0140044
    (23,0)    0.0122488
    (24,0)    0.015341
    (25,0)    0.0135295
    (26,0)    0.0158811
    (27,0)    0.0149651
    (28,0)    0.0144115
    (29,0)    0.0137667
    ...
MKL info: 0
0.000165 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.81e-06 sec ]
 [ GrB_apply (inplace-op) 2.08e-06 sec ]
 [ GrB_reduce 7.72e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.67e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.6e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.872e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233754
    (1,0)    0.0139228
    (2,0)    0.0123471
    (3,0)    0.0145696
    (4,0)    0.014201
    (5,0)    0.0100776
    (6,0)    0.0128739
    (7,0)    0.0143955
    (8,0)    0.0110162
    (9,0)    0.0110455
    (10,0)    0.0119336
    (11,0)    0.00723155
    (12,0)    0.0188687
    (13,0)    0.0141571
    (14,0)    0.0174838
    (15,0)    0.0170369
    (16,0)    0.0120391
    (17,0)    0.0219961
    (18,0)    0.0195227
    (19,0)    0.0394481
    (20,0)    0.0111962
    (21,0)    0.00901421
    (22,0)    0.0140042
    (23,0)    0.0122487
    (24,0)    0.0153409
    (25,0)    0.0135281
    (26,0)    0.0158792
    (27,0)    0.0149652
    (28,0)    0.0144109
    (29,0)    0.0137657
    ...
MKL info: 0
0.000162 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.49e-06 sec ]
 [ GrB_apply (inplace-op) 1.99e-06 sec ]
 [ GrB_reduce 7.1e-07 sec ]
trial:  4 time:     0.0022 sec
 [ GrB_assign (C empty) Method 21: (C dense) = scalar 5.69e-06 sec ]
 [ GrB_Vector_dup 7.08e-07 sec ]
 [ GrB_assign (C dense) Method 22: (C dense) += scalar 3.91e-06 sec ]
 [ GrB_eWiseMult (A dense) (B dense) dense C=A+B 5.02e-06 sec ]
 [ GrB_assign (C empty) Method 21: (C dense) = scalar 4.85e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.69301e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0254975
    (1,0)    0.0136567
    (2,0)    0.0136567
    (3,0)    0.0136567
    (4,0)    0.0136567
    (5,0)    0.00942786
    (6,0)    0.0149254
    (7,0)    0.0115423
    (8,0)    0.0115423
    (9,0)    0.0115423
    (10,0)    0.0115423
    (11,0)    0.00731343
    (12,0)    0.0178856
    (13,0)    0.0178856
    (14,0)    0.0178856
    (15,0)    0.0178856
    (16,0)    0.0125995
    (17,0)    0.0212687
    (18,0)    0.018097
    (19,0)    0.0350124
    (20,0)    0.0115423
    (21,0)    0.0115423
    (22,0)    0.0115423
    (23,0)    0.0115423
    (24,0)    0.0104851
    (25,0)    0.0140796
    (26,0)    0.0140796
    (27,0)    0.0140796
    (28,0)    0.0140796
    (29,0)    0.00985075
    ...
MKL info: 0
0.000162 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.77e-06 sec ]
 [ GrB_apply (inplace-op) 2.17e-06 sec ]
 [ GrB_reduce 6.69e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.67e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.53e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.399e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0220887
    (1,0)    0.0129318
    (2,0)    0.0127221
    (3,0)    0.0136567
    (4,0)    0.0130816
    (5,0)    0.00981128
    (6,0)    0.0126249
    (7,0)    0.0146456
    (8,0)    0.0105718
    (9,0)    0.0115063
    (10,0)    0.0109312
    (11,0)    0.00706182
    (12,0)    0.019551
    (13,0)    0.0142791
    (14,0)    0.0182091
    (15,0)    0.017634
    (16,0)    0.0124977
    (17,0)    0.0227065
    (18,0)    0.0203436
    (19,0)    0.0393438
    (20,0)    0.0114105
    (21,0)    0.00931368
    (22,0)    0.0137829
    (23,0)    0.0132437
    (24,0)    0.0148524
    (25,0)    0.0130612
    (26,0)    0.0167156
    (27,0)    0.0147146
    (28,0)    0.0158289
    (29,0)    0.0131218
    ...
MKL info: 0
0.000164 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.94e-06 sec ]
 [ GrB_apply (inplace-op) 2.04e-06 sec ]
 [ GrB_reduce 7.1e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.53e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.56e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.63099e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0232132
    (1,0)    0.0137362
    (2,0)    0.0123324
    (3,0)    0.0145947
    (4,0)    0.014502
    (5,0)    0.0102149
    (6,0)    0.0125638
    (7,0)    0.0139089
    (8,0)    0.0107585
    (9,0)    0.0111774
    (10,0)    0.0117857
    (11,0)    0.00722375
    (12,0)    0.0180454
    (13,0)    0.0137987
    (14,0)    0.0177562
    (15,0)    0.0168708
    (16,0)    0.0121325
    (17,0)    0.0212654
    (18,0)    0.0181768
    (19,0)    0.0399208
    (20,0)    0.0112119
    (21,0)    0.00924239
    (22,0)    0.0145165
    (23,0)    0.0126211
    (24,0)    0.0156748
    (25,0)    0.0135252
    (26,0)    0.0155196
    (27,0)    0.0146325
    (28,0)    0.0148003
    (29,0)    0.0139976
    ...
MKL info: 0
0.000173 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.77e-06 sec ]
 [ GrB_apply (inplace-op) 1.9e-06 sec ]
 [ GrB_reduce 6.05e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.27e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.59e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.271e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0232749
    (1,0)    0.0137944
    (2,0)    0.012203
    (3,0)    0.0143792
    (4,0)    0.0139452
    (5,0)    0.0098574
    (6,0)    0.01277
    (7,0)    0.0143065
    (8,0)    0.0108926
    (9,0)    0.0108941
    (10,0)    0.0117638
    (11,0)    0.00709306
    (12,0)    0.0187575
    (13,0)    0.014051
    (14,0)    0.0171187
    (15,0)    0.0167851
    (16,0)    0.0119779
    (17,0)    0.0219206
    (18,0)    0.0191946
    (19,0)    0.0388428
    (20,0)    0.0111562
    (21,0)    0.00905812
    (22,0)    0.0136768
    (23,0)    0.0119485
    (24,0)    0.0155086
    (25,0)    0.0137232
    (26,0)    0.0160246
    (27,0)    0.0149899
    (28,0)    0.0144007
    (29,0)    0.0139681
    ...
MKL info: 0
0.000156 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.67e-06 sec ]
 [ GrB_apply (inplace-op) 1.83e-06 sec ]
 [ GrB_reduce 6.14e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.32e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.54e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.56201e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023315
    (1,0)    0.0138882
    (2,0)    0.0123459
    (3,0)    0.0144757
    (4,0)    0.0141007
    (5,0)    0.0100514
    (6,0)    0.01274
    (7,0)    0.0143498
    (8,0)    0.0109688
    (9,0)    0.011013
    (10,0)    0.0118908
    (11,0)    0.00723635
    (12,0)    0.018764
    (13,0)    0.0140595
    (14,0)    0.0174087
    (15,0)    0.016953
    (16,0)    0.0119551
    (17,0)    0.0218167
    (18,0)    0.019598
    (19,0)    0.0389976
    (20,0)    0.0111503
    (21,0)    0.00900973
    (22,0)    0.0140049
    (23,0)    0.012208
    (24,0)    0.0152048
    (25,0)    0.0135736
    (26,0)    0.0159555
    (27,0)    0.015091
    (28,0)    0.0144859
    (29,0)    0.0136949
    ...
MKL info: 0
0.000166 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 6.18e-06 sec ]
 [ GrB_apply (inplace-op) 1.99e-06 sec ]
 [ GrB_reduce 1e-06 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.61e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.63e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.84699e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023342
    (1,0)    0.0139194
    (2,0)    0.0123935
    (3,0)    0.0146033
    (4,0)    0.0142454
    (5,0)    0.0101259
    (6,0)    0.0128146
    (7,0)    0.0143784
    (8,0)    0.0110191
    (9,0)    0.0110391
    (10,0)    0.0119163
    (11,0)    0.00724003
    (12,0)    0.0188437
    (13,0)    0.0141657
    (14,0)    0.0174519
    (15,0)    0.0169961
    (16,0)    0.0120357
    (17,0)    0.0219393
    (18,0)    0.0196058
    (19,0)    0.039242
    (20,0)    0.0111945
    (21,0)    0.00902613
    (22,0)    0.0139688
    (23,0)    0.0122586
    (24,0)    0.0152724
    (25,0)    0.0134917
    (26,0)    0.015846
    (27,0)    0.0149329
    (28,0)    0.0144235
    (29,0)    0.0137047
    ...
MKL info: 0
0.000158 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.56e-06 sec ]
 [ GrB_apply (inplace-op) 1.93e-06 sec ]
 [ GrB_reduce 6.97e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.45e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.53e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.54498e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233566
    (1,0)    0.0139173
    (2,0)    0.0123504
    (3,0)    0.0145414
    (4,0)    0.0141934
    (5,0)    0.0100768
    (6,0)    0.012878
    (7,0)    0.0143949
    (8,0)    0.0110248
    (9,0)    0.0110496
    (10,0)    0.0119415
    (11,0)    0.00723282
    (12,0)    0.0188654
    (13,0)    0.0141705
    (14,0)    0.0174829
    (15,0)    0.0170494
    (16,0)    0.0120356
    (17,0)    0.0220092
    (18,0)    0.0195075
    (19,0)    0.0393968
    (20,0)    0.0111877
    (21,0)    0.0090195
    (22,0)    0.0139908
    (23,0)    0.0122687
    (24,0)    0.0153018
    (25,0)    0.0135228
    (26,0)    0.0159007
    (27,0)    0.0149564
    (28,0)    0.0144364
    (29,0)    0.0137454
    ...
MKL info: 0
0.000162 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.99e-06 sec ]
 [ GrB_apply (inplace-op) 2.05e-06 sec ]
 [ GrB_reduce 9.94e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.75e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.52e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.75701e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233754
    (1,0)    0.0139103
    (2,0)    0.0123441
    (3,0)    0.0145657
    (4,0)    0.0142019
    (5,0)    0.0100792
    (6,0)    0.0128753
    (7,0)    0.0143946
    (8,0)    0.0110203
    (9,0)    0.0110525
    (10,0)    0.0119312
    (11,0)    0.00723823
    (12,0)    0.018868
    (13,0)    0.0141597
    (14,0)    0.0174878
    (15,0)    0.0170362
    (16,0)    0.0120434
    (17,0)    0.0219845
    (18,0)    0.0195274
    (19,0)    0.0394466
    (20,0)    0.0112039
    (21,0)    0.00901741
    (22,0)    0.0140088
    (23,0)    0.0122533
    (24,0)    0.0153346
    (25,0)    0.0135241
    (26,0)    0.0158715
    (27,0)    0.014969
    (28,0)    0.0144097
    (29,0)    0.0137583
    ...
MKL info: 0
0.000184 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 6.19e-06 sec ]
 [ GrB_apply (inplace-op) 2.1e-06 sec ]
 [ GrB_reduce 9.52e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.54e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.61e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.62802e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233747
    (1,0)    0.013921
    (2,0)    0.0123442
    (3,0)    0.0145663
    (4,0)    0.0141993
    (5,0)    0.0100747
    (6,0)    0.0128759
    (7,0)    0.0143956
    (8,0)    0.011013
    (9,0)    0.0110446
    (10,0)    0.0119323
    (11,0)    0.00723176
    (12,0)    0.0188712
    (13,0)    0.0141589
    (14,0)    0.0174856
    (15,0)    0.0170393
    (16,0)    0.012043
    (17,0)    0.0219933
    (18,0)    0.0195201
    (19,0)    0.0394506
    (20,0)    0.0111963
    (21,0)    0.00901781
    (22,0)    0.0140029
    (23,0)    0.0122512
    (24,0)    0.0153417
    (25,0)    0.0135284
    (26,0)    0.0158778
    (27,0)    0.0149599
    (28,0)    0.0144113
    (29,0)    0.0137654
    ...
MKL info: 0
0.000153 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.42e-06 sec ]
 [ GrB_apply (inplace-op) 1.86e-06 sec ]
 [ GrB_reduce 7.29e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.36e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.26e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.15298e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023374
    (1,0)    0.0139214
    (2,0)    0.0123461
    (3,0)    0.0145676
    (4,0)    0.0141996
    (5,0)    0.0100757
    (6,0)    0.0128738
    (7,0)    0.0143951
    (8,0)    0.0110154
    (9,0)    0.0110448
    (10,0)    0.0119328
    (11,0)    0.00723062
    (12,0)    0.0188682
    (13,0)    0.0141567
    (14,0)    0.017484
    (15,0)    0.0170368
    (16,0)    0.0120386
    (17,0)    0.0219952
    (18,0)    0.0195214
    (19,0)    0.0394507
    (20,0)    0.0111962
    (21,0)    0.00901497
    (22,0)    0.0140044
    (23,0)    0.0122488
    (24,0)    0.015341
    (25,0)    0.0135295
    (26,0)    0.0158811
    (27,0)    0.0149651
    (28,0)    0.0144115
    (29,0)    0.0137667
    ...
MKL info: 0
0.000151 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.31e-06 sec ]
 [ GrB_apply (inplace-op) 1.85e-06 sec ]
 [ GrB_reduce 7.15e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.26e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 6.65e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.204e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233754
    (1,0)    0.0139228
    (2,0)    0.0123471
    (3,0)    0.0145696
    (4,0)    0.014201
    (5,0)    0.0100776
    (6,0)    0.0128739
    (7,0)    0.0143955
    (8,0)    0.0110162
    (9,0)    0.0110455
    (10,0)    0.0119336
    (11,0)    0.00723155
    (12,0)    0.0188687
    (13,0)    0.0141571
    (14,0)    0.0174838
    (15,0)    0.0170369
    (16,0)    0.0120391
    (17,0)    0.0219961
    (18,0)    0.0195227
    (19,0)    0.0394481
    (20,0)    0.0111962
    (21,0)    0.00901421
    (22,0)    0.0140042
    (23,0)    0.0122487
    (24,0)    0.0153409
    (25,0)    0.0135281
    (26,0)    0.0158792
    (27,0)    0.0149652
    (28,0)    0.0144109
    (29,0)    0.0137657
    ...
MKL info: 0
0.000152 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.44e-06 sec ]
 [ GrB_apply (inplace-op) 1.9e-06 sec ]
 [ GrB_reduce 7.75e-07 sec ]
trial:  5 time:     0.0022 sec
 [ GrB_assign (C empty) Method 21: (C dense) = scalar 5.05e-06 sec ]
 [ GrB_Vector_dup 6.18e-07 sec ]
 [ GrB_assign (C dense) Method 22: (C dense) += scalar 3.5e-06 sec ]
 [ GrB_eWiseMult (A dense) (B dense) dense C=A+B 4.72e-06 sec ]
 [ GrB_assign (C empty) Method 21: (C dense) = scalar 4.59e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.368e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0254975
    (1,0)    0.0136567
    (2,0)    0.0136567
    (3,0)    0.0136567
    (4,0)    0.0136567
    (5,0)    0.00942786
    (6,0)    0.0149254
    (7,0)    0.0115423
    (8,0)    0.0115423
    (9,0)    0.0115423
    (10,0)    0.0115423
    (11,0)    0.00731343
    (12,0)    0.0178856
    (13,0)    0.0178856
    (14,0)    0.0178856
    (15,0)    0.0178856
    (16,0)    0.0125995
    (17,0)    0.0212687
    (18,0)    0.018097
    (19,0)    0.0350124
    (20,0)    0.0115423
    (21,0)    0.0115423
    (22,0)    0.0115423
    (23,0)    0.0115423
    (24,0)    0.0104851
    (25,0)    0.0140796
    (26,0)    0.0140796
    (27,0)    0.0140796
    (28,0)    0.0140796
    (29,0)    0.00985075
    ...
MKL info: 0
0.00016 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 6.12e-06 sec ]
 [ GrB_apply (inplace-op) 2.03e-06 sec ]
 [ GrB_reduce 8.98e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.21e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.49e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.34501e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0220887
    (1,0)    0.0129318
    (2,0)    0.0127221
    (3,0)    0.0136567
    (4,0)    0.0130816
    (5,0)    0.00981128
    (6,0)    0.0126249
    (7,0)    0.0146456
    (8,0)    0.0105718
    (9,0)    0.0115063
    (10,0)    0.0109312
    (11,0)    0.00706182
    (12,0)    0.019551
    (13,0)    0.0142791
    (14,0)    0.0182091
    (15,0)    0.017634
    (16,0)    0.0124977
    (17,0)    0.0227065
    (18,0)    0.0203436
    (19,0)    0.0393438
    (20,0)    0.0114105
    (21,0)    0.00931368
    (22,0)    0.0137829
    (23,0)    0.0132437
    (24,0)    0.0148524
    (25,0)    0.0130612
    (26,0)    0.0167156
    (27,0)    0.0147146
    (28,0)    0.0158289
    (29,0)    0.0131218
    ...
MKL info: 0
0.000169 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.64e-06 sec ]
 [ GrB_apply (inplace-op) 1.8e-06 sec ]
 [ GrB_reduce 8.24e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.11e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.18e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.14999e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0232132
    (1,0)    0.0137362
    (2,0)    0.0123324
    (3,0)    0.0145947
    (4,0)    0.014502
    (5,0)    0.0102149
    (6,0)    0.0125638
    (7,0)    0.0139089
    (8,0)    0.0107585
    (9,0)    0.0111774
    (10,0)    0.0117857
    (11,0)    0.00722375
    (12,0)    0.0180454
    (13,0)    0.0137987
    (14,0)    0.0177562
    (15,0)    0.0168708
    (16,0)    0.0121325
    (17,0)    0.0212654
    (18,0)    0.0181768
    (19,0)    0.0399208
    (20,0)    0.0112119
    (21,0)    0.00924239
    (22,0)    0.0145165
    (23,0)    0.0126211
    (24,0)    0.0156748
    (25,0)    0.0135252
    (26,0)    0.0155196
    (27,0)    0.0146325
    (28,0)    0.0148003
    (29,0)    0.0139976
    ...
MKL info: 0
0.000148 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.32e-06 sec ]
 [ GrB_apply (inplace-op) 1.7e-06 sec ]
 [ GrB_reduce 7.02e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.02e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.31e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.06899e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0232749
    (1,0)    0.0137944
    (2,0)    0.012203
    (3,0)    0.0143792
    (4,0)    0.0139452
    (5,0)    0.0098574
    (6,0)    0.01277
    (7,0)    0.0143065
    (8,0)    0.0108926
    (9,0)    0.0108941
    (10,0)    0.0117638
    (11,0)    0.00709306
    (12,0)    0.0187575
    (13,0)    0.014051
    (14,0)    0.0171187
    (15,0)    0.0167851
    (16,0)    0.0119779
    (17,0)    0.0219206
    (18,0)    0.0191946
    (19,0)    0.0388428
    (20,0)    0.0111562
    (21,0)    0.00905812
    (22,0)    0.0136768
    (23,0)    0.0119485
    (24,0)    0.0155086
    (25,0)    0.0137232
    (26,0)    0.0160246
    (27,0)    0.0149899
    (28,0)    0.0144007
    (29,0)    0.0139681
    ...
MKL info: 0
0.000147 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.18e-06 sec ]
 [ GrB_apply (inplace-op) 1.76e-06 sec ]
 [ GrB_reduce 5.96e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.12e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.35e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.31699e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023315
    (1,0)    0.0138882
    (2,0)    0.0123459
    (3,0)    0.0144757
    (4,0)    0.0141007
    (5,0)    0.0100514
    (6,0)    0.01274
    (7,0)    0.0143498
    (8,0)    0.0109688
    (9,0)    0.011013
    (10,0)    0.0118908
    (11,0)    0.00723635
    (12,0)    0.018764
    (13,0)    0.0140595
    (14,0)    0.0174087
    (15,0)    0.016953
    (16,0)    0.0119551
    (17,0)    0.0218167
    (18,0)    0.019598
    (19,0)    0.0389976
    (20,0)    0.0111503
    (21,0)    0.00900973
    (22,0)    0.0140049
    (23,0)    0.012208
    (24,0)    0.0152048
    (25,0)    0.0135736
    (26,0)    0.0159555
    (27,0)    0.015091
    (28,0)    0.0144859
    (29,0)    0.0136949
    ...
MKL info: 0
0.00015 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.28e-06 sec ]
 [ GrB_apply (inplace-op) 1.86e-06 sec ]
 [ GrB_reduce 7.31e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.24e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.28e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.229e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023342
    (1,0)    0.0139194
    (2,0)    0.0123935
    (3,0)    0.0146033
    (4,0)    0.0142454
    (5,0)    0.0101259
    (6,0)    0.0128146
    (7,0)    0.0143784
    (8,0)    0.0110191
    (9,0)    0.0110391
    (10,0)    0.0119163
    (11,0)    0.00724003
    (12,0)    0.0188437
    (13,0)    0.0141657
    (14,0)    0.0174519
    (15,0)    0.0169961
    (16,0)    0.0120357
    (17,0)    0.0219393
    (18,0)    0.0196058
    (19,0)    0.039242
    (20,0)    0.0111945
    (21,0)    0.00902613
    (22,0)    0.0139688
    (23,0)    0.0122586
    (24,0)    0.0152724
    (25,0)    0.0134917
    (26,0)    0.015846
    (27,0)    0.0149329
    (28,0)    0.0144235
    (29,0)    0.0137047
    ...
MKL info: 0
0.000147 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.12e-06 sec ]
 [ GrB_apply (inplace-op) 1.8e-06 sec ]
 [ GrB_reduce 6.66e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.18e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.14e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.096e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233566
    (1,0)    0.0139173
    (2,0)    0.0123504
    (3,0)    0.0145414
    (4,0)    0.0141934
    (5,0)    0.0100768
    (6,0)    0.012878
    (7,0)    0.0143949
    (8,0)    0.0110248
    (9,0)    0.0110496
    (10,0)    0.0119415
    (11,0)    0.00723282
    (12,0)    0.0188654
    (13,0)    0.0141705
    (14,0)    0.0174829
    (15,0)    0.0170494
    (16,0)    0.0120356
    (17,0)    0.0220092
    (18,0)    0.0195075
    (19,0)    0.0393968
    (20,0)    0.0111877
    (21,0)    0.0090195
    (22,0)    0.0139908
    (23,0)    0.0122687
    (24,0)    0.0153018
    (25,0)    0.0135228
    (26,0)    0.0159007
    (27,0)    0.0149564
    (28,0)    0.0144364
    (29,0)    0.0137454
    ...
MKL info: 0
0.000147 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.21e-06 sec ]
 [ GrB_apply (inplace-op) 1.81e-06 sec ]
 [ GrB_reduce 5.97e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.07e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.19e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.22499e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233754
    (1,0)    0.0139103
    (2,0)    0.0123441
    (3,0)    0.0145657
    (4,0)    0.0142019
    (5,0)    0.0100792
    (6,0)    0.0128753
    (7,0)    0.0143946
    (8,0)    0.0110203
    (9,0)    0.0110525
    (10,0)    0.0119312
    (11,0)    0.00723823
    (12,0)    0.018868
    (13,0)    0.0141597
    (14,0)    0.0174878
    (15,0)    0.0170362
    (16,0)    0.0120434
    (17,0)    0.0219845
    (18,0)    0.0195274
    (19,0)    0.0394466
    (20,0)    0.0112039
    (21,0)    0.00901741
    (22,0)    0.0140088
    (23,0)    0.0122533
    (24,0)    0.0153346
    (25,0)    0.0135241
    (26,0)    0.0158715
    (27,0)    0.014969
    (28,0)    0.0144097
    (29,0)    0.0137583
    ...
MKL info: 0
0.000149 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.36e-06 sec ]
 [ GrB_apply (inplace-op) 1.83e-06 sec ]
 [ GrB_reduce 6.86e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.05e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.27e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.263e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233747
    (1,0)    0.013921
    (2,0)    0.0123442
    (3,0)    0.0145663
    (4,0)    0.0141993
    (5,0)    0.0100747
    (6,0)    0.0128759
    (7,0)    0.0143956
    (8,0)    0.011013
    (9,0)    0.0110446
    (10,0)    0.0119323
    (11,0)    0.00723176
    (12,0)    0.0188712
    (13,0)    0.0141589
    (14,0)    0.0174856
    (15,0)    0.0170393
    (16,0)    0.012043
    (17,0)    0.0219933
    (18,0)    0.0195201
    (19,0)    0.0394506
    (20,0)    0.0111963
    (21,0)    0.00901781
    (22,0)    0.0140029
    (23,0)    0.0122512
    (24,0)    0.0153417
    (25,0)    0.0135284
    (26,0)    0.0158778
    (27,0)    0.0149599
    (28,0)    0.0144113
    (29,0)    0.0137654
    ...
MKL info: 0
0.000148 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.36e-06 sec ]
 [ GrB_apply (inplace-op) 1.77e-06 sec ]
 [ GrB_reduce 7.03e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.91e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.38e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.18701e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023374
    (1,0)    0.0139214
    (2,0)    0.0123461
    (3,0)    0.0145676
    (4,0)    0.0141996
    (5,0)    0.0100757
    (6,0)    0.0128738
    (7,0)    0.0143951
    (8,0)    0.0110154
    (9,0)    0.0110448
    (10,0)    0.0119328
    (11,0)    0.00723062
    (12,0)    0.0188682
    (13,0)    0.0141567
    (14,0)    0.017484
    (15,0)    0.0170368
    (16,0)    0.0120386
    (17,0)    0.0219952
    (18,0)    0.0195214
    (19,0)    0.0394507
    (20,0)    0.0111962
    (21,0)    0.00901497
    (22,0)    0.0140044
    (23,0)    0.0122488
    (24,0)    0.015341
    (25,0)    0.0135295
    (26,0)    0.0158811
    (27,0)    0.0149651
    (28,0)    0.0144115
    (29,0)    0.0137667
    ...
MKL info: 0
0.000147 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.32e-06 sec ]
 [ GrB_apply (inplace-op) 1.72e-06 sec ]
 [ GrB_reduce 6.61e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.02e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.35e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.15901e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233754
    (1,0)    0.0139228
    (2,0)    0.0123471
    (3,0)    0.0145696
    (4,0)    0.014201
    (5,0)    0.0100776
    (6,0)    0.0128739
    (7,0)    0.0143955
    (8,0)    0.0110162
    (9,0)    0.0110455
    (10,0)    0.0119336
    (11,0)    0.00723155
    (12,0)    0.0188687
    (13,0)    0.0141571
    (14,0)    0.0174838
    (15,0)    0.0170369
    (16,0)    0.0120391
    (17,0)    0.0219961
    (18,0)    0.0195227
    (19,0)    0.0394481
    (20,0)    0.0111962
    (21,0)    0.00901421
    (22,0)    0.0140042
    (23,0)    0.0122487
    (24,0)    0.0153409
    (25,0)    0.0135281
    (26,0)    0.0158792
    (27,0)    0.0149652
    (28,0)    0.0144109
    (29,0)    0.0137657
    ...
MKL info: 0
0.000151 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.33e-06 sec ]
 [ GrB_apply (inplace-op) 1.78e-06 sec ]
 [ GrB_reduce 7.48e-07 sec ]
trial:  6 time:     0.0020 sec
 [ GrB_assign (C empty) Method 21: (C dense) = scalar 4.79e-06 sec ]
 [ GrB_Vector_dup 5.97e-07 sec ]
 [ GrB_assign (C dense) Method 22: (C dense) += scalar 3.39e-06 sec ]
 [ GrB_eWiseMult (A dense) (B dense) dense C=A+B 4.65e-06 sec ]
 [ GrB_assign (C empty) Method 21: (C dense) = scalar 4.33e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.48599e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0254975
    (1,0)    0.0136567
    (2,0)    0.0136567
    (3,0)    0.0136567
    (4,0)    0.0136567
    (5,0)    0.00942786
    (6,0)    0.0149254
    (7,0)    0.0115423
    (8,0)    0.0115423
    (9,0)    0.0115423
    (10,0)    0.0115423
    (11,0)    0.00731343
    (12,0)    0.0178856
    (13,0)    0.0178856
    (14,0)    0.0178856
    (15,0)    0.0178856
    (16,0)    0.0125995
    (17,0)    0.0212687
    (18,0)    0.018097
    (19,0)    0.0350124
    (20,0)    0.0115423
    (21,0)    0.0115423
    (22,0)    0.0115423
    (23,0)    0.0115423
    (24,0)    0.0104851
    (25,0)    0.0140796
    (26,0)    0.0140796
    (27,0)    0.0140796
    (28,0)    0.0140796
    (29,0)    0.00985075
    ...
MKL info: 0
0.000148 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.21e-06 sec ]
 [ GrB_apply (inplace-op) 1.93e-06 sec ]
 [ GrB_reduce 6.9e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.26e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.26e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.10799e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0220887
    (1,0)    0.0129318
    (2,0)    0.0127221
    (3,0)    0.0136567
    (4,0)    0.0130816
    (5,0)    0.00981128
    (6,0)    0.0126249
    (7,0)    0.0146456
    (8,0)    0.0105718
    (9,0)    0.0115063
    (10,0)    0.0109312
    (11,0)    0.00706182
    (12,0)    0.019551
    (13,0)    0.0142791
    (14,0)    0.0182091
    (15,0)    0.017634
    (16,0)    0.0124977
    (17,0)    0.0227065
    (18,0)    0.0203436
    (19,0)    0.0393438
    (20,0)    0.0114105
    (21,0)    0.00931368
    (22,0)    0.0137829
    (23,0)    0.0132437
    (24,0)    0.0148524
    (25,0)    0.0130612
    (26,0)    0.0167156
    (27,0)    0.0147146
    (28,0)    0.0158289
    (29,0)    0.0131218
    ...
MKL info: 0
0.000147 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.19e-06 sec ]
 [ GrB_apply (inplace-op) 1.85e-06 sec ]
 [ GrB_reduce 6.74e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.28e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.14e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.14501e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0232132
    (1,0)    0.0137362
    (2,0)    0.0123324
    (3,0)    0.0145947
    (4,0)    0.014502
    (5,0)    0.0102149
    (6,0)    0.0125638
    (7,0)    0.0139089
    (8,0)    0.0107585
    (9,0)    0.0111774
    (10,0)    0.0117857
    (11,0)    0.00722375
    (12,0)    0.0180454
    (13,0)    0.0137987
    (14,0)    0.0177562
    (15,0)    0.0168708
    (16,0)    0.0121325
    (17,0)    0.0212654
    (18,0)    0.0181768
    (19,0)    0.0399208
    (20,0)    0.0112119
    (21,0)    0.00924239
    (22,0)    0.0145165
    (23,0)    0.0126211
    (24,0)    0.0156748
    (25,0)    0.0135252
    (26,0)    0.0155196
    (27,0)    0.0146325
    (28,0)    0.0148003
    (29,0)    0.0139976
    ...
MKL info: 0
0.00015 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.28e-06 sec ]
 [ GrB_apply (inplace-op) 1.93e-06 sec ]
 [ GrB_reduce 7.02e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.15e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.23e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.152e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0232749
    (1,0)    0.0137944
    (2,0)    0.012203
    (3,0)    0.0143792
    (4,0)    0.0139452
    (5,0)    0.0098574
    (6,0)    0.01277
    (7,0)    0.0143065
    (8,0)    0.0108926
    (9,0)    0.0108941
    (10,0)    0.0117638
    (11,0)    0.00709306
    (12,0)    0.0187575
    (13,0)    0.014051
    (14,0)    0.0171187
    (15,0)    0.0167851
    (16,0)    0.0119779
    (17,0)    0.0219206
    (18,0)    0.0191946
    (19,0)    0.0388428
    (20,0)    0.0111562
    (21,0)    0.00905812
    (22,0)    0.0136768
    (23,0)    0.0119485
    (24,0)    0.0155086
    (25,0)    0.0137232
    (26,0)    0.0160246
    (27,0)    0.0149899
    (28,0)    0.0144007
    (29,0)    0.0139681
    ...
MKL info: 0
0.000147 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.3e-06 sec ]
 [ GrB_apply (inplace-op) 1.76e-06 sec ]
 [ GrB_reduce 6.11e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.26e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.02702e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023315
    (1,0)    0.0138882
    (2,0)    0.0123459
    (3,0)    0.0144757
    (4,0)    0.0141007
    (5,0)    0.0100514
    (6,0)    0.01274
    (7,0)    0.0143498
    (8,0)    0.0109688
    (9,0)    0.011013
    (10,0)    0.0118908
    (11,0)    0.00723635
    (12,0)    0.018764
    (13,0)    0.0140595
    (14,0)    0.0174087
    (15,0)    0.016953
    (16,0)    0.0119551
    (17,0)    0.0218167
    (18,0)    0.019598
    (19,0)    0.0389976
    (20,0)    0.0111503
    (21,0)    0.00900973
    (22,0)    0.0140049
    (23,0)    0.012208
    (24,0)    0.0152048
    (25,0)    0.0135736
    (26,0)    0.0159555
    (27,0)    0.015091
    (28,0)    0.0144859
    (29,0)    0.0136949
    ...
MKL info: 0
0.000147 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.37e-06 sec ]
 [ GrB_apply (inplace-op) 1.79e-06 sec ]
 [ GrB_reduce 6.39e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.87e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.3e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.043e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023342
    (1,0)    0.0139194
    (2,0)    0.0123935
    (3,0)    0.0146033
    (4,0)    0.0142454
    (5,0)    0.0101259
    (6,0)    0.0128146
    (7,0)    0.0143784
    (8,0)    0.0110191
    (9,0)    0.0110391
    (10,0)    0.0119163
    (11,0)    0.00724003
    (12,0)    0.0188437
    (13,0)    0.0141657
    (14,0)    0.0174519
    (15,0)    0.0169961
    (16,0)    0.0120357
    (17,0)    0.0219393
    (18,0)    0.0196058
    (19,0)    0.039242
    (20,0)    0.0111945
    (21,0)    0.00902613
    (22,0)    0.0139688
    (23,0)    0.0122586
    (24,0)    0.0152724
    (25,0)    0.0134917
    (26,0)    0.015846
    (27,0)    0.0149329
    (28,0)    0.0144235
    (29,0)    0.0137047
    ...
MKL info: 0
0.00015 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.39e-06 sec ]
 [ GrB_apply (inplace-op) 1.78e-06 sec ]
 [ GrB_reduce 7.01e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.08e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.37e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.06e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233566
    (1,0)    0.0139173
    (2,0)    0.0123504
    (3,0)    0.0145414
    (4,0)    0.0141934
    (5,0)    0.0100768
    (6,0)    0.012878
    (7,0)    0.0143949
    (8,0)    0.0110248
    (9,0)    0.0110496
    (10,0)    0.0119415
    (11,0)    0.00723282
    (12,0)    0.0188654
    (13,0)    0.0141705
    (14,0)    0.0174829
    (15,0)    0.0170494
    (16,0)    0.0120356
    (17,0)    0.0220092
    (18,0)    0.0195075
    (19,0)    0.0393968
    (20,0)    0.0111877
    (21,0)    0.0090195
    (22,0)    0.0139908
    (23,0)    0.0122687
    (24,0)    0.0153018
    (25,0)    0.0135228
    (26,0)    0.0159007
    (27,0)    0.0149564
    (28,0)    0.0144364
    (29,0)    0.0137454
    ...
MKL info: 0
0.000148 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.21e-06 sec ]
 [ GrB_apply (inplace-op) 1.71e-06 sec ]
 [ GrB_reduce 6.98e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.02e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.33e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.16998e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233754
    (1,0)    0.0139103
    (2,0)    0.0123441
    (3,0)    0.0145657
    (4,0)    0.0142019
    (5,0)    0.0100792
    (6,0)    0.0128753
    (7,0)    0.0143946
    (8,0)    0.0110203
    (9,0)    0.0110525
    (10,0)    0.0119312
    (11,0)    0.00723823
    (12,0)    0.018868
    (13,0)    0.0141597
    (14,0)    0.0174878
    (15,0)    0.0170362
    (16,0)    0.0120434
    (17,0)    0.0219845
    (18,0)    0.0195274
    (19,0)    0.0394466
    (20,0)    0.0112039
    (21,0)    0.00901741
    (22,0)    0.0140088
    (23,0)    0.0122533
    (24,0)    0.0153346
    (25,0)    0.0135241
    (26,0)    0.0158715
    (27,0)    0.014969
    (28,0)    0.0144097
    (29,0)    0.0137583
    ...
MKL info: 0
0.000147 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.1e-06 sec ]
 [ GrB_apply (inplace-op) 1.8e-06 sec ]
 [ GrB_reduce 6.2e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.16e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.35e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.188e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233747
    (1,0)    0.013921
    (2,0)    0.0123442
    (3,0)    0.0145663
    (4,0)    0.0141993
    (5,0)    0.0100747
    (6,0)    0.0128759
    (7,0)    0.0143956
    (8,0)    0.011013
    (9,0)    0.0110446
    (10,0)    0.0119323
    (11,0)    0.00723176
    (12,0)    0.0188712
    (13,0)    0.0141589
    (14,0)    0.0174856
    (15,0)    0.0170393
    (16,0)    0.012043
    (17,0)    0.0219933
    (18,0)    0.0195201
    (19,0)    0.0394506
    (20,0)    0.0111963
    (21,0)    0.00901781
    (22,0)    0.0140029
    (23,0)    0.0122512
    (24,0)    0.0153417
    (25,0)    0.0135284
    (26,0)    0.0158778
    (27,0)    0.0149599
    (28,0)    0.0144113
    (29,0)    0.0137654
    ...
MKL info: 0
0.00015 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.22e-06 sec ]
 [ GrB_apply (inplace-op) 1.85e-06 sec ]
 [ GrB_reduce 7.45e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.26e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.33e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.243e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023374
    (1,0)    0.0139214
    (2,0)    0.0123461
    (3,0)    0.0145676
    (4,0)    0.0141996
    (5,0)    0.0100757
    (6,0)    0.0128738
    (7,0)    0.0143951
    (8,0)    0.0110154
    (9,0)    0.0110448
    (10,0)    0.0119328
    (11,0)    0.00723062
    (12,0)    0.0188682
    (13,0)    0.0141567
    (14,0)    0.017484
    (15,0)    0.0170368
    (16,0)    0.0120386
    (17,0)    0.0219952
    (18,0)    0.0195214
    (19,0)    0.0394507
    (20,0)    0.0111962
    (21,0)    0.00901497
    (22,0)    0.0140044
    (23,0)    0.0122488
    (24,0)    0.015341
    (25,0)    0.0135295
    (26,0)    0.0158811
    (27,0)    0.0149651
    (28,0)    0.0144115
    (29,0)    0.0137667
    ...
MKL info: 0
0.000154 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.89e-06 sec ]
 [ GrB_apply (inplace-op) 1.96e-06 sec ]
 [ GrB_reduce 9.31e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.32e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.4e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.50697e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233754
    (1,0)    0.0139228
    (2,0)    0.0123471
    (3,0)    0.0145696
    (4,0)    0.014201
    (5,0)    0.0100776
    (6,0)    0.0128739
    (7,0)    0.0143955
    (8,0)    0.0110162
    (9,0)    0.0110455
    (10,0)    0.0119336
    (11,0)    0.00723155
    (12,0)    0.0188687
    (13,0)    0.0141571
    (14,0)    0.0174838
    (15,0)    0.0170369
    (16,0)    0.0120391
    (17,0)    0.0219961
    (18,0)    0.0195227
    (19,0)    0.0394481
    (20,0)    0.0111962
    (21,0)    0.00901421
    (22,0)    0.0140042
    (23,0)    0.0122487
    (24,0)    0.0153409
    (25,0)    0.0135281
    (26,0)    0.0158792
    (27,0)    0.0149652
    (28,0)    0.0144109
    (29,0)    0.0137657
    ...
MKL info: 0
0.000149 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.12e-06 sec ]
 [ GrB_apply (inplace-op) 1.85e-06 sec ]
 [ GrB_reduce 6.48e-07 sec ]
trial:  7 time:     0.0020 sec
 [ GrB_assign (C empty) Method 21: (C dense) = scalar 4.88e-06 sec ]
 [ GrB_Vector_dup 5.59e-07 sec ]
 [ GrB_assign (C dense) Method 22: (C dense) += scalar 6.55e-06 sec ]
 [ GrB_eWiseMult (A dense) (B dense) dense C=A+B 4.63e-06 sec ]
 [ GrB_assign (C empty) Method 21: (C dense) = scalar 4.49e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.36399e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0254975
    (1,0)    0.0136567
    (2,0)    0.0136567
    (3,0)    0.0136567
    (4,0)    0.0136567
    (5,0)    0.00942786
    (6,0)    0.0149254
    (7,0)    0.0115423
    (8,0)    0.0115423
    (9,0)    0.0115423
    (10,0)    0.0115423
    (11,0)    0.00731343
    (12,0)    0.0178856
    (13,0)    0.0178856
    (14,0)    0.0178856
    (15,0)    0.0178856
    (16,0)    0.0125995
    (17,0)    0.0212687
    (18,0)    0.018097
    (19,0)    0.0350124
    (20,0)    0.0115423
    (21,0)    0.0115423
    (22,0)    0.0115423
    (23,0)    0.0115423
    (24,0)    0.0104851
    (25,0)    0.0140796
    (26,0)    0.0140796
    (27,0)    0.0140796
    (28,0)    0.0140796
    (29,0)    0.00985075
    ...
MKL info: 0
0.000156 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.78e-06 sec ]
 [ GrB_apply (inplace-op) 1.99e-06 sec ]
 [ GrB_reduce 9.04e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.21e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 4.54e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.74999e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0220887
    (1,0)    0.0129318
    (2,0)    0.0127221
    (3,0)    0.0136567
    (4,0)    0.0130816
    (5,0)    0.00981128
    (6,0)    0.0126249
    (7,0)    0.0146456
    (8,0)    0.0105718
    (9,0)    0.0115063
    (10,0)    0.0109312
    (11,0)    0.00706182
    (12,0)    0.019551
    (13,0)    0.0142791
    (14,0)    0.0182091
    (15,0)    0.017634
    (16,0)    0.0124977
    (17,0)    0.0227065
    (18,0)    0.0203436
    (19,0)    0.0393438
    (20,0)    0.0114105
    (21,0)    0.00931368
    (22,0)    0.0137829
    (23,0)    0.0132437
    (24,0)    0.0148524
    (25,0)    0.0130612
    (26,0)    0.0167156
    (27,0)    0.0147146
    (28,0)    0.0158289
    (29,0)    0.0131218
    ...
MKL info: 0
0.000164 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.53e-06 sec ]
 [ GrB_apply (inplace-op) 1.86e-06 sec ]
 [ GrB_reduce 8.84e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.04e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.29e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.14498e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0232132
    (1,0)    0.0137362
    (2,0)    0.0123324
    (3,0)    0.0145947
    (4,0)    0.014502
    (5,0)    0.0102149
    (6,0)    0.0125638
    (7,0)    0.0139089
    (8,0)    0.0107585
    (9,0)    0.0111774
    (10,0)    0.0117857
    (11,0)    0.00722375
    (12,0)    0.0180454
    (13,0)    0.0137987
    (14,0)    0.0177562
    (15,0)    0.0168708
    (16,0)    0.0121325
    (17,0)    0.0212654
    (18,0)    0.0181768
    (19,0)    0.0399208
    (20,0)    0.0112119
    (21,0)    0.00924239
    (22,0)    0.0145165
    (23,0)    0.0126211
    (24,0)    0.0156748
    (25,0)    0.0135252
    (26,0)    0.0155196
    (27,0)    0.0146325
    (28,0)    0.0148003
    (29,0)    0.0139976
    ...
MKL info: 0
0.000144 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.4e-06 sec ]
 [ GrB_apply (inplace-op) 1.8e-06 sec ]
 [ GrB_reduce 7.17e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.94e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.27e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.11102e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0232749
    (1,0)    0.0137944
    (2,0)    0.012203
    (3,0)    0.0143792
    (4,0)    0.0139452
    (5,0)    0.0098574
    (6,0)    0.01277
    (7,0)    0.0143065
    (8,0)    0.0108926
    (9,0)    0.0108941
    (10,0)    0.0117638
    (11,0)    0.00709306
    (12,0)    0.0187575
    (13,0)    0.014051
    (14,0)    0.0171187
    (15,0)    0.0167851
    (16,0)    0.0119779
    (17,0)    0.0219206
    (18,0)    0.0191946
    (19,0)    0.0388428
    (20,0)    0.0111562
    (21,0)    0.00905812
    (22,0)    0.0136768
    (23,0)    0.0119485
    (24,0)    0.0155086
    (25,0)    0.0137232
    (26,0)    0.0160246
    (27,0)    0.0149899
    (28,0)    0.0144007
    (29,0)    0.0139681
    ...
MKL info: 0
0.000144 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.15e-06 sec ]
 [ GrB_apply (inplace-op) 1.71e-06 sec ]
 [ GrB_reduce 6.72e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.88e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.31e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.17598e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023315
    (1,0)    0.0138882
    (2,0)    0.0123459
    (3,0)    0.0144757
    (4,0)    0.0141007
    (5,0)    0.0100514
    (6,0)    0.01274
    (7,0)    0.0143498
    (8,0)    0.0109688
    (9,0)    0.011013
    (10,0)    0.0118908
    (11,0)    0.00723635
    (12,0)    0.018764
    (13,0)    0.0140595
    (14,0)    0.0174087
    (15,0)    0.016953
    (16,0)    0.0119551
    (17,0)    0.0218167
    (18,0)    0.019598
    (19,0)    0.0389976
    (20,0)    0.0111503
    (21,0)    0.00900973
    (22,0)    0.0140049
    (23,0)    0.012208
    (24,0)    0.0152048
    (25,0)    0.0135736
    (26,0)    0.0159555
    (27,0)    0.015091
    (28,0)    0.0144859
    (29,0)    0.0136949
    ...
MKL info: 0
0.000149 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.6e-06 sec ]
 [ GrB_apply (inplace-op) 1.85e-06 sec ]
 [ GrB_reduce 9.17e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.17e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.35e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.30799e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023342
    (1,0)    0.0139194
    (2,0)    0.0123935
    (3,0)    0.0146033
    (4,0)    0.0142454
    (5,0)    0.0101259
    (6,0)    0.0128146
    (7,0)    0.0143784
    (8,0)    0.0110191
    (9,0)    0.0110391
    (10,0)    0.0119163
    (11,0)    0.00724003
    (12,0)    0.0188437
    (13,0)    0.0141657
    (14,0)    0.0174519
    (15,0)    0.0169961
    (16,0)    0.0120357
    (17,0)    0.0219393
    (18,0)    0.0196058
    (19,0)    0.039242
    (20,0)    0.0111945
    (21,0)    0.00902613
    (22,0)    0.0139688
    (23,0)    0.0122586
    (24,0)    0.0152724
    (25,0)    0.0134917
    (26,0)    0.015846
    (27,0)    0.0149329
    (28,0)    0.0144235
    (29,0)    0.0137047
    ...
MKL info: 0
0.000147 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.18e-06 sec ]
 [ GrB_apply (inplace-op) 1.78e-06 sec ]
 [ GrB_reduce 7.73e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.13e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.22e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.032e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233566
    (1,0)    0.0139173
    (2,0)    0.0123504
    (3,0)    0.0145414
    (4,0)    0.0141934
    (5,0)    0.0100768
    (6,0)    0.012878
    (7,0)    0.0143949
    (8,0)    0.0110248
    (9,0)    0.0110496
    (10,0)    0.0119415
    (11,0)    0.00723282
    (12,0)    0.0188654
    (13,0)    0.0141705
    (14,0)    0.0174829
    (15,0)    0.0170494
    (16,0)    0.0120356
    (17,0)    0.0220092
    (18,0)    0.0195075
    (19,0)    0.0393968
    (20,0)    0.0111877
    (21,0)    0.0090195
    (22,0)    0.0139908
    (23,0)    0.0122687
    (24,0)    0.0153018
    (25,0)    0.0135228
    (26,0)    0.0159007
    (27,0)    0.0149564
    (28,0)    0.0144364
    (29,0)    0.0137454
    ...
MKL info: 0
0.000143 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.05e-06 sec ]
 [ GrB_apply (inplace-op) 1.73e-06 sec ]
 [ GrB_reduce 7.05e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.02e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.05e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.135e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233754
    (1,0)    0.0139103
    (2,0)    0.0123441
    (3,0)    0.0145657
    (4,0)    0.0142019
    (5,0)    0.0100792
    (6,0)    0.0128753
    (7,0)    0.0143946
    (8,0)    0.0110203
    (9,0)    0.0110525
    (10,0)    0.0119312
    (11,0)    0.00723823
    (12,0)    0.018868
    (13,0)    0.0141597
    (14,0)    0.0174878
    (15,0)    0.0170362
    (16,0)    0.0120434
    (17,0)    0.0219845
    (18,0)    0.0195274
    (19,0)    0.0394466
    (20,0)    0.0112039
    (21,0)    0.00901741
    (22,0)    0.0140088
    (23,0)    0.0122533
    (24,0)    0.0153346
    (25,0)    0.0135241
    (26,0)    0.0158715
    (27,0)    0.014969
    (28,0)    0.0144097
    (29,0)    0.0137583
    ...
MKL info: 0
0.000143 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5e-06 sec ]
 [ GrB_apply (inplace-op) 1.74e-06 sec ]
 [ GrB_reduce 6.78e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.16e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.10301e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233747
    (1,0)    0.013921
    (2,0)    0.0123442
    (3,0)    0.0145663
    (4,0)    0.0141993
    (5,0)    0.0100747
    (6,0)    0.0128759
    (7,0)    0.0143956
    (8,0)    0.011013
    (9,0)    0.0110446
    (10,0)    0.0119323
    (11,0)    0.00723176
    (12,0)    0.0188712
    (13,0)    0.0141589
    (14,0)    0.0174856
    (15,0)    0.0170393
    (16,0)    0.012043
    (17,0)    0.0219933
    (18,0)    0.0195201
    (19,0)    0.0394506
    (20,0)    0.0111963
    (21,0)    0.00901781
    (22,0)    0.0140029
    (23,0)    0.0122512
    (24,0)    0.0153417
    (25,0)    0.0135284
    (26,0)    0.0158778
    (27,0)    0.0149599
    (28,0)    0.0144113
    (29,0)    0.0137654
    ...
MKL info: 0
0.000145 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.24e-06 sec ]
 [ GrB_apply (inplace-op) 1.74e-06 sec ]
 [ GrB_reduce 7.2e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.88e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.18e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.02801e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023374
    (1,0)    0.0139214
    (2,0)    0.0123461
    (3,0)    0.0145676
    (4,0)    0.0141996
    (5,0)    0.0100757
    (6,0)    0.0128738
    (7,0)    0.0143951
    (8,0)    0.0110154
    (9,0)    0.0110448
    (10,0)    0.0119328
    (11,0)    0.00723062
    (12,0)    0.0188682
    (13,0)    0.0141567
    (14,0)    0.017484
    (15,0)    0.0170368
    (16,0)    0.0120386
    (17,0)    0.0219952
    (18,0)    0.0195214
    (19,0)    0.0394507
    (20,0)    0.0111962
    (21,0)    0.00901497
    (22,0)    0.0140044
    (23,0)    0.0122488
    (24,0)    0.015341
    (25,0)    0.0135295
    (26,0)    0.0158811
    (27,0)    0.0149651
    (28,0)    0.0144115
    (29,0)    0.0137667
    ...
MKL info: 0
0.000143 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.18e-06 sec ]
 [ GrB_apply (inplace-op) 1.72e-06 sec ]
 [ GrB_reduce 6.18e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.81e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.3e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.03599e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233754
    (1,0)    0.0139228
    (2,0)    0.0123471
    (3,0)    0.0145696
    (4,0)    0.014201
    (5,0)    0.0100776
    (6,0)    0.0128739
    (7,0)    0.0143955
    (8,0)    0.0110162
    (9,0)    0.0110455
    (10,0)    0.0119336
    (11,0)    0.00723155
    (12,0)    0.0188687
    (13,0)    0.0141571
    (14,0)    0.0174838
    (15,0)    0.0170369
    (16,0)    0.0120391
    (17,0)    0.0219961
    (18,0)    0.0195227
    (19,0)    0.0394481
    (20,0)    0.0111962
    (21,0)    0.00901421
    (22,0)    0.0140042
    (23,0)    0.0122487
    (24,0)    0.0153409
    (25,0)    0.0135281
    (26,0)    0.0158792
    (27,0)    0.0149652
    (28,0)    0.0144109
    (29,0)    0.0137657
    ...
MKL info: 0
0.000143 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.12e-06 sec ]
 [ GrB_apply (inplace-op) 1.64e-06 sec ]
 [ GrB_reduce 6.06e-07 sec ]
trial:  8 time:     0.0020 sec
 [ GrB_assign (C empty) Method 21: (C dense) = scalar 4.93e-06 sec ]
 [ GrB_Vector_dup 5.5e-07 sec ]
 [ GrB_assign (C dense) Method 22: (C dense) += scalar 3.25e-06 sec ]
 [ GrB_eWiseMult (A dense) (B dense) dense C=A+B 4.61e-06 sec ]
 [ GrB_assign (C empty) Method 21: (C dense) = scalar 4.32e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.185e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0254975
    (1,0)    0.0136567
    (2,0)    0.0136567
    (3,0)    0.0136567
    (4,0)    0.0136567
    (5,0)    0.00942786
    (6,0)    0.0149254
    (7,0)    0.0115423
    (8,0)    0.0115423
    (9,0)    0.0115423
    (10,0)    0.0115423
    (11,0)    0.00731343
    (12,0)    0.0178856
    (13,0)    0.0178856
    (14,0)    0.0178856
    (15,0)    0.0178856
    (16,0)    0.0125995
    (17,0)    0.0212687
    (18,0)    0.018097
    (19,0)    0.0350124
    (20,0)    0.0115423
    (21,0)    0.0115423
    (22,0)    0.0115423
    (23,0)    0.0115423
    (24,0)    0.0104851
    (25,0)    0.0140796
    (26,0)    0.0140796
    (27,0)    0.0140796
    (28,0)    0.0140796
    (29,0)    0.00985075
    ...
MKL info: 0
0.000146 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.09e-06 sec ]
 [ GrB_apply (inplace-op) 1.92e-06 sec ]
 [ GrB_reduce 6.78e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.08e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.13e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.213e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0220887
    (1,0)    0.0129318
    (2,0)    0.0127221
    (3,0)    0.0136567
    (4,0)    0.0130816
    (5,0)    0.00981128
    (6,0)    0.0126249
    (7,0)    0.0146456
    (8,0)    0.0105718
    (9,0)    0.0115063
    (10,0)    0.0109312
    (11,0)    0.00706182
    (12,0)    0.019551
    (13,0)    0.0142791
    (14,0)    0.0182091
    (15,0)    0.017634
    (16,0)    0.0124977
    (17,0)    0.0227065
    (18,0)    0.0203436
    (19,0)    0.0393438
    (20,0)    0.0114105
    (21,0)    0.00931368
    (22,0)    0.0137829
    (23,0)    0.0132437
    (24,0)    0.0148524
    (25,0)    0.0130612
    (26,0)    0.0167156
    (27,0)    0.0147146
    (28,0)    0.0158289
    (29,0)    0.0131218
    ...
MKL info: 0
0.000143 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.94e-06 sec ]
 [ GrB_apply (inplace-op) 1.78e-06 sec ]
 [ GrB_reduce 5.95e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 1.83e-05 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.15e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 1.94801e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0232132
    (1,0)    0.0137362
    (2,0)    0.0123324
    (3,0)    0.0145947
    (4,0)    0.014502
    (5,0)    0.0102149
    (6,0)    0.0125638
    (7,0)    0.0139089
    (8,0)    0.0107585
    (9,0)    0.0111774
    (10,0)    0.0117857
    (11,0)    0.00722375
    (12,0)    0.0180454
    (13,0)    0.0137987
    (14,0)    0.0177562
    (15,0)    0.0168708
    (16,0)    0.0121325
    (17,0)    0.0212654
    (18,0)    0.0181768
    (19,0)    0.0399208
    (20,0)    0.0112119
    (21,0)    0.00924239
    (22,0)    0.0145165
    (23,0)    0.0126211
    (24,0)    0.0156748
    (25,0)    0.0135252
    (26,0)    0.0155196
    (27,0)    0.0146325
    (28,0)    0.0148003
    (29,0)    0.0139976
    ...
MKL info: 0
0.000139 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.88e-06 sec ]
 [ GrB_apply (inplace-op) 1.74e-06 sec ]
 [ GrB_reduce 7.09e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.9e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 2.97e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.00199e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0232749
    (1,0)    0.0137944
    (2,0)    0.012203
    (3,0)    0.0143792
    (4,0)    0.0139452
    (5,0)    0.0098574
    (6,0)    0.01277
    (7,0)    0.0143065
    (8,0)    0.0108926
    (9,0)    0.0108941
    (10,0)    0.0117638
    (11,0)    0.00709306
    (12,0)    0.0187575
    (13,0)    0.014051
    (14,0)    0.0171187
    (15,0)    0.0167851
    (16,0)    0.0119779
    (17,0)    0.0219206
    (18,0)    0.0191946
    (19,0)    0.0388428
    (20,0)    0.0111562
    (21,0)    0.00905812
    (22,0)    0.0136768
    (23,0)    0.0119485
    (24,0)    0.0155086
    (25,0)    0.0137232
    (26,0)    0.0160246
    (27,0)    0.0149899
    (28,0)    0.0144007
    (29,0)    0.0139681
    ...
MKL info: 0
0.000141 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.98e-06 sec ]
 [ GrB_apply (inplace-op) 1.81e-06 sec ]
 [ GrB_reduce 6.91e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.86e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.06602e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023315
    (1,0)    0.0138882
    (2,0)    0.0123459
    (3,0)    0.0144757
    (4,0)    0.0141007
    (5,0)    0.0100514
    (6,0)    0.01274
    (7,0)    0.0143498
    (8,0)    0.0109688
    (9,0)    0.011013
    (10,0)    0.0118908
    (11,0)    0.00723635
    (12,0)    0.018764
    (13,0)    0.0140595
    (14,0)    0.0174087
    (15,0)    0.016953
    (16,0)    0.0119551
    (17,0)    0.0218167
    (18,0)    0.019598
    (19,0)    0.0389976
    (20,0)    0.0111503
    (21,0)    0.00900973
    (22,0)    0.0140049
    (23,0)    0.012208
    (24,0)    0.0152048
    (25,0)    0.0135736
    (26,0)    0.0159555
    (27,0)    0.015091
    (28,0)    0.0144859
    (29,0)    0.0136949
    ...
MKL info: 0
0.000139 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.98e-06 sec ]
 [ GrB_apply (inplace-op) 1.66e-06 sec ]
 [ GrB_reduce 6.47e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.76e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.12e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.02001e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023342
    (1,0)    0.0139194
    (2,0)    0.0123935
    (3,0)    0.0146033
    (4,0)    0.0142454
    (5,0)    0.0101259
    (6,0)    0.0128146
    (7,0)    0.0143784
    (8,0)    0.0110191
    (9,0)    0.0110391
    (10,0)    0.0119163
    (11,0)    0.00724003
    (12,0)    0.0188437
    (13,0)    0.0141657
    (14,0)    0.0174519
    (15,0)    0.0169961
    (16,0)    0.0120357
    (17,0)    0.0219393
    (18,0)    0.0196058
    (19,0)    0.039242
    (20,0)    0.0111945
    (21,0)    0.00902613
    (22,0)    0.0139688
    (23,0)    0.0122586
    (24,0)    0.0152724
    (25,0)    0.0134917
    (26,0)    0.015846
    (27,0)    0.0149329
    (28,0)    0.0144235
    (29,0)    0.0137047
    ...
MKL info: 0
0.000139 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.02e-06 sec ]
 [ GrB_apply (inplace-op) 1.67e-06 sec ]
 [ GrB_reduce 6.11e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.64e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.2e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 1.90901e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233566
    (1,0)    0.0139173
    (2,0)    0.0123504
    (3,0)    0.0145414
    (4,0)    0.0141934
    (5,0)    0.0100768
    (6,0)    0.012878
    (7,0)    0.0143949
    (8,0)    0.0110248
    (9,0)    0.0110496
    (10,0)    0.0119415
    (11,0)    0.00723282
    (12,0)    0.0188654
    (13,0)    0.0141705
    (14,0)    0.0174829
    (15,0)    0.0170494
    (16,0)    0.0120356
    (17,0)    0.0220092
    (18,0)    0.0195075
    (19,0)    0.0393968
    (20,0)    0.0111877
    (21,0)    0.0090195
    (22,0)    0.0139908
    (23,0)    0.0122687
    (24,0)    0.0153018
    (25,0)    0.0135228
    (26,0)    0.0159007
    (27,0)    0.0149564
    (28,0)    0.0144364
    (29,0)    0.0137454
    ...
MKL info: 0
0.000141 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.14e-06 sec ]
 [ GrB_apply (inplace-op) 1.68e-06 sec ]
 [ GrB_reduce 6.62e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.81e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.22e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.00499e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233754
    (1,0)    0.0139103
    (2,0)    0.0123441
    (3,0)    0.0145657
    (4,0)    0.0142019
    (5,0)    0.0100792
    (6,0)    0.0128753
    (7,0)    0.0143946
    (8,0)    0.0110203
    (9,0)    0.0110525
    (10,0)    0.0119312
    (11,0)    0.00723823
    (12,0)    0.018868
    (13,0)    0.0141597
    (14,0)    0.0174878
    (15,0)    0.0170362
    (16,0)    0.0120434
    (17,0)    0.0219845
    (18,0)    0.0195274
    (19,0)    0.0394466
    (20,0)    0.0112039
    (21,0)    0.00901741
    (22,0)    0.0140088
    (23,0)    0.0122533
    (24,0)    0.0153346
    (25,0)    0.0135241
    (26,0)    0.0158715
    (27,0)    0.014969
    (28,0)    0.0144097
    (29,0)    0.0137583
    ...
MKL info: 0
0.00014 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.89e-06 sec ]
 [ GrB_apply (inplace-op) 1.6e-06 sec ]
 [ GrB_reduce 5.89e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.79e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.2e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.07301e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233747
    (1,0)    0.013921
    (2,0)    0.0123442
    (3,0)    0.0145663
    (4,0)    0.0141993
    (5,0)    0.0100747
    (6,0)    0.0128759
    (7,0)    0.0143956
    (8,0)    0.011013
    (9,0)    0.0110446
    (10,0)    0.0119323
    (11,0)    0.00723176
    (12,0)    0.0188712
    (13,0)    0.0141589
    (14,0)    0.0174856
    (15,0)    0.0170393
    (16,0)    0.012043
    (17,0)    0.0219933
    (18,0)    0.0195201
    (19,0)    0.0394506
    (20,0)    0.0111963
    (21,0)    0.00901781
    (22,0)    0.0140029
    (23,0)    0.0122512
    (24,0)    0.0153417
    (25,0)    0.0135284
    (26,0)    0.0158778
    (27,0)    0.0149599
    (28,0)    0.0144113
    (29,0)    0.0137654
    ...
MKL info: 0
0.000139 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.86e-06 sec ]
 [ GrB_apply (inplace-op) 1.69e-06 sec ]
 [ GrB_reduce 6.17e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.88e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.16e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.054e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023374
    (1,0)    0.0139214
    (2,0)    0.0123461
    (3,0)    0.0145676
    (4,0)    0.0141996
    (5,0)    0.0100757
    (6,0)    0.0128738
    (7,0)    0.0143951
    (8,0)    0.0110154
    (9,0)    0.0110448
    (10,0)    0.0119328
    (11,0)    0.00723062
    (12,0)    0.0188682
    (13,0)    0.0141567
    (14,0)    0.017484
    (15,0)    0.0170368
    (16,0)    0.0120386
    (17,0)    0.0219952
    (18,0)    0.0195214
    (19,0)    0.0394507
    (20,0)    0.0111962
    (21,0)    0.00901497
    (22,0)    0.0140044
    (23,0)    0.0122488
    (24,0)    0.015341
    (25,0)    0.0135295
    (26,0)    0.0158811
    (27,0)    0.0149651
    (28,0)    0.0144115
    (29,0)    0.0137667
    ...
MKL info: 0
0.000141 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.96e-06 sec ]
 [ GrB_apply (inplace-op) 1.75e-06 sec ]
 [ GrB_reduce 7.65e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.02e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.09e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 1.90901e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233754
    (1,0)    0.0139228
    (2,0)    0.0123471
    (3,0)    0.0145696
    (4,0)    0.014201
    (5,0)    0.0100776
    (6,0)    0.0128739
    (7,0)    0.0143955
    (8,0)    0.0110162
    (9,0)    0.0110455
    (10,0)    0.0119336
    (11,0)    0.00723155
    (12,0)    0.0188687
    (13,0)    0.0141571
    (14,0)    0.0174838
    (15,0)    0.0170369
    (16,0)    0.0120391
    (17,0)    0.0219961
    (18,0)    0.0195227
    (19,0)    0.0394481
    (20,0)    0.0111962
    (21,0)    0.00901421
    (22,0)    0.0140042
    (23,0)    0.0122487
    (24,0)    0.0153409
    (25,0)    0.0135281
    (26,0)    0.0158792
    (27,0)    0.0149652
    (28,0)    0.0144109
    (29,0)    0.0137657
    ...
MKL info: 0
0.000139 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.9e-06 sec ]
 [ GrB_apply (inplace-op) 1.72e-06 sec ]
 [ GrB_reduce 6.7e-07 sec ]
trial:  9 time:     0.0019 sec
 [ GrB_assign (C empty) Method 21: (C dense) = scalar 4.71e-06 sec ]
 [ GrB_Vector_dup 4.68e-07 sec ]
 [ GrB_assign (C dense) Method 22: (C dense) += scalar 3.23e-06 sec ]
 [ GrB_eWiseMult (A dense) (B dense) dense C=A+B 4.14e-06 sec ]
 [ GrB_assign (C empty) Method 21: (C dense) = scalar 4.29e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.17999e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0254975
    (1,0)    0.0136567
    (2,0)    0.0136567
    (3,0)    0.0136567
    (4,0)    0.0136567
    (5,0)    0.00942786
    (6,0)    0.0149254
    (7,0)    0.0115423
    (8,0)    0.0115423
    (9,0)    0.0115423
    (10,0)    0.0115423
    (11,0)    0.00731343
    (12,0)    0.0178856
    (13,0)    0.0178856
    (14,0)    0.0178856
    (15,0)    0.0178856
    (16,0)    0.0125995
    (17,0)    0.0212687
    (18,0)    0.018097
    (19,0)    0.0350124
    (20,0)    0.0115423
    (21,0)    0.0115423
    (22,0)    0.0115423
    (23,0)    0.0115423
    (24,0)    0.0104851
    (25,0)    0.0140796
    (26,0)    0.0140796
    (27,0)    0.0140796
    (28,0)    0.0140796
    (29,0)    0.00985075
    ...
MKL info: 0
0.00014 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.01e-06 sec ]
 [ GrB_apply (inplace-op) 1.77e-06 sec ]
 [ GrB_reduce 6.77e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 7.12e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.16e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.03701e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0220887
    (1,0)    0.0129318
    (2,0)    0.0127221
    (3,0)    0.0136567
    (4,0)    0.0130816
    (5,0)    0.00981128
    (6,0)    0.0126249
    (7,0)    0.0146456
    (8,0)    0.0105718
    (9,0)    0.0115063
    (10,0)    0.0109312
    (11,0)    0.00706182
    (12,0)    0.019551
    (13,0)    0.0142791
    (14,0)    0.0182091
    (15,0)    0.017634
    (16,0)    0.0124977
    (17,0)    0.0227065
    (18,0)    0.0203436
    (19,0)    0.0393438
    (20,0)    0.0114105
    (21,0)    0.00931368
    (22,0)    0.0137829
    (23,0)    0.0132437
    (24,0)    0.0148524
    (25,0)    0.0130612
    (26,0)    0.0167156
    (27,0)    0.0147146
    (28,0)    0.0158289
    (29,0)    0.0131218
    ...
MKL info: 0
0.000144 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.15e-06 sec ]
 [ GrB_apply (inplace-op) 1.77e-06 sec ]
 [ GrB_reduce 7.87e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.71e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.1e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.03602e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0232132
    (1,0)    0.0137362
    (2,0)    0.0123324
    (3,0)    0.0145947
    (4,0)    0.014502
    (5,0)    0.0102149
    (6,0)    0.0125638
    (7,0)    0.0139089
    (8,0)    0.0107585
    (9,0)    0.0111774
    (10,0)    0.0117857
    (11,0)    0.00722375
    (12,0)    0.0180454
    (13,0)    0.0137987
    (14,0)    0.0177562
    (15,0)    0.0168708
    (16,0)    0.0121325
    (17,0)    0.0212654
    (18,0)    0.0181768
    (19,0)    0.0399208
    (20,0)    0.0112119
    (21,0)    0.00924239
    (22,0)    0.0145165
    (23,0)    0.0126211
    (24,0)    0.0156748
    (25,0)    0.0135252
    (26,0)    0.0155196
    (27,0)    0.0146325
    (28,0)    0.0148003
    (29,0)    0.0139976
    ...
MKL info: 0
0.00014 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.11e-06 sec ]
 [ GrB_apply (inplace-op) 1.65e-06 sec ]
 [ GrB_reduce 7.03e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.61e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.21e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.06698e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0232749
    (1,0)    0.0137944
    (2,0)    0.012203
    (3,0)    0.0143792
    (4,0)    0.0139452
    (5,0)    0.0098574
    (6,0)    0.01277
    (7,0)    0.0143065
    (8,0)    0.0108926
    (9,0)    0.0108941
    (10,0)    0.0117638
    (11,0)    0.00709306
    (12,0)    0.0187575
    (13,0)    0.014051
    (14,0)    0.0171187
    (15,0)    0.0167851
    (16,0)    0.0119779
    (17,0)    0.0219206
    (18,0)    0.0191946
    (19,0)    0.0388428
    (20,0)    0.0111562
    (21,0)    0.00905812
    (22,0)    0.0136768
    (23,0)    0.0119485
    (24,0)    0.0155086
    (25,0)    0.0137232
    (26,0)    0.0160246
    (27,0)    0.0149899
    (28,0)    0.0144007
    (29,0)    0.0139681
    ...
MKL info: 0
0.000139 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 7.36e-06 sec ]
 [ GrB_apply (inplace-op) 1.72e-06 sec ]
 [ GrB_reduce 7.36e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.76e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.16e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 1.92499e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023315
    (1,0)    0.0138882
    (2,0)    0.0123459
    (3,0)    0.0144757
    (4,0)    0.0141007
    (5,0)    0.0100514
    (6,0)    0.01274
    (7,0)    0.0143498
    (8,0)    0.0109688
    (9,0)    0.011013
    (10,0)    0.0118908
    (11,0)    0.00723635
    (12,0)    0.018764
    (13,0)    0.0140595
    (14,0)    0.0174087
    (15,0)    0.016953
    (16,0)    0.0119551
    (17,0)    0.0218167
    (18,0)    0.019598
    (19,0)    0.0389976
    (20,0)    0.0111503
    (21,0)    0.00900973
    (22,0)    0.0140049
    (23,0)    0.012208
    (24,0)    0.0152048
    (25,0)    0.0135736
    (26,0)    0.0159555
    (27,0)    0.015091
    (28,0)    0.0144859
    (29,0)    0.0136949
    ...
MKL info: 0
0.00014 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.01e-06 sec ]
 [ GrB_apply (inplace-op) 1.57e-06 sec ]
 [ GrB_reduce 6.31e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 6.67e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 4.79e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.40802e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023342
    (1,0)    0.0139194
    (2,0)    0.0123935
    (3,0)    0.0146033
    (4,0)    0.0142454
    (5,0)    0.0101259
    (6,0)    0.0128146
    (7,0)    0.0143784
    (8,0)    0.0110191
    (9,0)    0.0110391
    (10,0)    0.0119163
    (11,0)    0.00724003
    (12,0)    0.0188437
    (13,0)    0.0141657
    (14,0)    0.0174519
    (15,0)    0.0169961
    (16,0)    0.0120357
    (17,0)    0.0219393
    (18,0)    0.0196058
    (19,0)    0.039242
    (20,0)    0.0111945
    (21,0)    0.00902613
    (22,0)    0.0139688
    (23,0)    0.0122586
    (24,0)    0.0152724
    (25,0)    0.0134917
    (26,0)    0.015846
    (27,0)    0.0149329
    (28,0)    0.0144235
    (29,0)    0.0137047
    ...
MKL info: 0
0.000141 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.08e-06 sec ]
 [ GrB_apply (inplace-op) 1.81e-06 sec ]
 [ GrB_reduce 8.53e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.13e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.23e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.09402e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233566
    (1,0)    0.0139173
    (2,0)    0.0123504
    (3,0)    0.0145414
    (4,0)    0.0141934
    (5,0)    0.0100768
    (6,0)    0.012878
    (7,0)    0.0143949
    (8,0)    0.0110248
    (9,0)    0.0110496
    (10,0)    0.0119415
    (11,0)    0.00723282
    (12,0)    0.0188654
    (13,0)    0.0141705
    (14,0)    0.0174829
    (15,0)    0.0170494
    (16,0)    0.0120356
    (17,0)    0.0220092
    (18,0)    0.0195075
    (19,0)    0.0393968
    (20,0)    0.0111877
    (21,0)    0.0090195
    (22,0)    0.0139908
    (23,0)    0.0122687
    (24,0)    0.0153018
    (25,0)    0.0135228
    (26,0)    0.0159007
    (27,0)    0.0149564
    (28,0)    0.0144364
    (29,0)    0.0137454
    ...
MKL info: 0
0.000143 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.98e-06 sec ]
 [ GrB_apply (inplace-op) 1.75e-06 sec ]
 [ GrB_reduce 7.52e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.02e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.15e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.074e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233754
    (1,0)    0.0139103
    (2,0)    0.0123441
    (3,0)    0.0145657
    (4,0)    0.0142019
    (5,0)    0.0100792
    (6,0)    0.0128753
    (7,0)    0.0143946
    (8,0)    0.0110203
    (9,0)    0.0110525
    (10,0)    0.0119312
    (11,0)    0.00723823
    (12,0)    0.018868
    (13,0)    0.0141597
    (14,0)    0.0174878
    (15,0)    0.0170362
    (16,0)    0.0120434
    (17,0)    0.0219845
    (18,0)    0.0195274
    (19,0)    0.0394466
    (20,0)    0.0112039
    (21,0)    0.00901741
    (22,0)    0.0140088
    (23,0)    0.0122533
    (24,0)    0.0153346
    (25,0)    0.0135241
    (26,0)    0.0158715
    (27,0)    0.014969
    (28,0)    0.0144097
    (29,0)    0.0137583
    ...
MKL info: 0
0.000139 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.94e-06 sec ]
 [ GrB_apply (inplace-op) 1.72e-06 sec ]
 [ GrB_reduce 6.6e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 6.95e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 4.65e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.37601e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233747
    (1,0)    0.013921
    (2,0)    0.0123442
    (3,0)    0.0145663
    (4,0)    0.0141993
    (5,0)    0.0100747
    (6,0)    0.0128759
    (7,0)    0.0143956
    (8,0)    0.011013
    (9,0)    0.0110446
    (10,0)    0.0119323
    (11,0)    0.00723176
    (12,0)    0.0188712
    (13,0)    0.0141589
    (14,0)    0.0174856
    (15,0)    0.0170393
    (16,0)    0.012043
    (17,0)    0.0219933
    (18,0)    0.0195201
    (19,0)    0.0394506
    (20,0)    0.0111963
    (21,0)    0.00901781
    (22,0)    0.0140029
    (23,0)    0.0122512
    (24,0)    0.0153417
    (25,0)    0.0135284
    (26,0)    0.0158778
    (27,0)    0.0149599
    (28,0)    0.0144113
    (29,0)    0.0137654
    ...
MKL info: 0
0.000141 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.96e-06 sec ]
 [ GrB_apply (inplace-op) 1.84e-06 sec ]
 [ GrB_reduce 8.35e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.92e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 2.99e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.03802e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023374
    (1,0)    0.0139214
    (2,0)    0.0123461
    (3,0)    0.0145676
    (4,0)    0.0141996
    (5,0)    0.0100757
    (6,0)    0.0128738
    (7,0)    0.0143951
    (8,0)    0.0110154
    (9,0)    0.0110448
    (10,0)    0.0119328
    (11,0)    0.00723062
    (12,0)    0.0188682
    (13,0)    0.0141567
    (14,0)    0.017484
    (15,0)    0.0170368
    (16,0)    0.0120386
    (17,0)    0.0219952
    (18,0)    0.0195214
    (19,0)    0.0394507
    (20,0)    0.0111962
    (21,0)    0.00901497
    (22,0)    0.0140044
    (23,0)    0.0122488
    (24,0)    0.015341
    (25,0)    0.0135295
    (26,0)    0.0158811
    (27,0)    0.0149651
    (28,0)    0.0144115
    (29,0)    0.0137667
    ...
MKL info: 0
0.000142 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.01e-06 sec ]
 [ GrB_apply (inplace-op) 1.72e-06 sec ]
 [ GrB_reduce 7.56e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.79e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.12e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.001e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233754
    (1,0)    0.0139228
    (2,0)    0.0123471
    (3,0)    0.0145696
    (4,0)    0.014201
    (5,0)    0.0100776
    (6,0)    0.0128739
    (7,0)    0.0143955
    (8,0)    0.0110162
    (9,0)    0.0110455
    (10,0)    0.0119336
    (11,0)    0.00723155
    (12,0)    0.0188687
    (13,0)    0.0141571
    (14,0)    0.0174838
    (15,0)    0.0170369
    (16,0)    0.0120391
    (17,0)    0.0219961
    (18,0)    0.0195227
    (19,0)    0.0394481
    (20,0)    0.0111962
    (21,0)    0.00901421
    (22,0)    0.0140042
    (23,0)    0.0122487
    (24,0)    0.0153409
    (25,0)    0.0135281
    (26,0)    0.0158792
    (27,0)    0.0149652
    (28,0)    0.0144109
    (29,0)    0.0137657
    ...
MKL info: 0
0.000139 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.14e-06 sec ]
 [ GrB_apply (inplace-op) 1.66e-06 sec ]
 [ GrB_reduce 7.07e-07 sec ]
trial: 10 time:     0.0019 sec
 [ GrB_assign (C empty) Method 21: (C dense) = scalar 4.57e-06 sec ]
 [ GrB_Vector_dup 6e-07 sec ]
 [ GrB_assign (C dense) Method 22: (C dense) += scalar 3.14e-06 sec ]
 [ GrB_eWiseMult (A dense) (B dense) dense C=A+B 4.18e-06 sec ]
 [ GrB_assign (C empty) Method 21: (C dense) = scalar 4.2e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.26698e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0254975
    (1,0)    0.0136567
    (2,0)    0.0136567
    (3,0)    0.0136567
    (4,0)    0.0136567
    (5,0)    0.00942786
    (6,0)    0.0149254
    (7,0)    0.0115423
    (8,0)    0.0115423
    (9,0)    0.0115423
    (10,0)    0.0115423
    (11,0)    0.00731343
    (12,0)    0.0178856
    (13,0)    0.0178856
    (14,0)    0.0178856
    (15,0)    0.0178856
    (16,0)    0.0125995
    (17,0)    0.0212687
    (18,0)    0.018097
    (19,0)    0.0350124
    (20,0)    0.0115423
    (21,0)    0.0115423
    (22,0)    0.0115423
    (23,0)    0.0115423
    (24,0)    0.0104851
    (25,0)    0.0140796
    (26,0)    0.0140796
    (27,0)    0.0140796
    (28,0)    0.0140796
    (29,0)    0.00985075
    ...
MKL info: 0
0.00014 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.03e-06 sec ]
 [ GrB_apply (inplace-op) 1.69e-06 sec ]
 [ GrB_reduce 6.64e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.79e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.2e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.291e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0220887
    (1,0)    0.0129318
    (2,0)    0.0127221
    (3,0)    0.0136567
    (4,0)    0.0130816
    (5,0)    0.00981128
    (6,0)    0.0126249
    (7,0)    0.0146456
    (8,0)    0.0105718
    (9,0)    0.0115063
    (10,0)    0.0109312
    (11,0)    0.00706182
    (12,0)    0.019551
    (13,0)    0.0142791
    (14,0)    0.0182091
    (15,0)    0.017634
    (16,0)    0.0124977
    (17,0)    0.0227065
    (18,0)    0.0203436
    (19,0)    0.0393438
    (20,0)    0.0114105
    (21,0)    0.00931368
    (22,0)    0.0137829
    (23,0)    0.0132437
    (24,0)    0.0148524
    (25,0)    0.0130612
    (26,0)    0.0167156
    (27,0)    0.0147146
    (28,0)    0.0158289
    (29,0)    0.0131218
    ...
MKL info: 0
0.000141 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.99e-06 sec ]
 [ GrB_apply (inplace-op) 1.79e-06 sec ]
 [ GrB_reduce 7.18e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.88e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.31e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.13902e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0232132
    (1,0)    0.0137362
    (2,0)    0.0123324
    (3,0)    0.0145947
    (4,0)    0.014502
    (5,0)    0.0102149
    (6,0)    0.0125638
    (7,0)    0.0139089
    (8,0)    0.0107585
    (9,0)    0.0111774
    (10,0)    0.0117857
    (11,0)    0.00722375
    (12,0)    0.0180454
    (13,0)    0.0137987
    (14,0)    0.0177562
    (15,0)    0.0168708
    (16,0)    0.0121325
    (17,0)    0.0212654
    (18,0)    0.0181768
    (19,0)    0.0399208
    (20,0)    0.0112119
    (21,0)    0.00924239
    (22,0)    0.0145165
    (23,0)    0.0126211
    (24,0)    0.0156748
    (25,0)    0.0135252
    (26,0)    0.0155196
    (27,0)    0.0146325
    (28,0)    0.0148003
    (29,0)    0.0139976
    ...
MKL info: 0
0.000139 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.83e-06 sec ]
 [ GrB_apply (inplace-op) 1.63e-06 sec ]
 [ GrB_reduce 6.02e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.96e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.11e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 1.95502e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0232749
    (1,0)    0.0137944
    (2,0)    0.012203
    (3,0)    0.0143792
    (4,0)    0.0139452
    (5,0)    0.0098574
    (6,0)    0.01277
    (7,0)    0.0143065
    (8,0)    0.0108926
    (9,0)    0.0108941
    (10,0)    0.0117638
    (11,0)    0.00709306
    (12,0)    0.0187575
    (13,0)    0.014051
    (14,0)    0.0171187
    (15,0)    0.0167851
    (16,0)    0.0119779
    (17,0)    0.0219206
    (18,0)    0.0191946
    (19,0)    0.0388428
    (20,0)    0.0111562
    (21,0)    0.00905812
    (22,0)    0.0136768
    (23,0)    0.0119485
    (24,0)    0.0155086
    (25,0)    0.0137232
    (26,0)    0.0160246
    (27,0)    0.0149899
    (28,0)    0.0144007
    (29,0)    0.0139681
    ...
MKL info: 0
0.000139 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.91e-06 sec ]
 [ GrB_apply (inplace-op) 1.72e-06 sec ]
 [ GrB_reduce 6.1e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.92e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 1.95601e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023315
    (1,0)    0.0138882
    (2,0)    0.0123459
    (3,0)    0.0144757
    (4,0)    0.0141007
    (5,0)    0.0100514
    (6,0)    0.01274
    (7,0)    0.0143498
    (8,0)    0.0109688
    (9,0)    0.011013
    (10,0)    0.0118908
    (11,0)    0.00723635
    (12,0)    0.018764
    (13,0)    0.0140595
    (14,0)    0.0174087
    (15,0)    0.016953
    (16,0)    0.0119551
    (17,0)    0.0218167
    (18,0)    0.019598
    (19,0)    0.0389976
    (20,0)    0.0111503
    (21,0)    0.00900973
    (22,0)    0.0140049
    (23,0)    0.012208
    (24,0)    0.0152048
    (25,0)    0.0135736
    (26,0)    0.0159555
    (27,0)    0.015091
    (28,0)    0.0144859
    (29,0)    0.0136949
    ...
MKL info: 0
0.000141 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.99e-06 sec ]
 [ GrB_apply (inplace-op) 1.77e-06 sec ]
 [ GrB_reduce 6.99e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.9e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.19001e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023342
    (1,0)    0.0139194
    (2,0)    0.0123935
    (3,0)    0.0146033
    (4,0)    0.0142454
    (5,0)    0.0101259
    (6,0)    0.0128146
    (7,0)    0.0143784
    (8,0)    0.0110191
    (9,0)    0.0110391
    (10,0)    0.0119163
    (11,0)    0.00724003
    (12,0)    0.0188437
    (13,0)    0.0141657
    (14,0)    0.0174519
    (15,0)    0.0169961
    (16,0)    0.0120357
    (17,0)    0.0219393
    (18,0)    0.0196058
    (19,0)    0.039242
    (20,0)    0.0111945
    (21,0)    0.00902613
    (22,0)    0.0139688
    (23,0)    0.0122586
    (24,0)    0.0152724
    (25,0)    0.0134917
    (26,0)    0.015846
    (27,0)    0.0149329
    (28,0)    0.0144235
    (29,0)    0.0137047
    ...
MKL info: 0
0.00014 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.99e-06 sec ]
 [ GrB_apply (inplace-op) 1.64e-06 sec ]
 [ GrB_reduce 6.14e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.8e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.03e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 1.97298e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233566
    (1,0)    0.0139173
    (2,0)    0.0123504
    (3,0)    0.0145414
    (4,0)    0.0141934
    (5,0)    0.0100768
    (6,0)    0.012878
    (7,0)    0.0143949
    (8,0)    0.0110248
    (9,0)    0.0110496
    (10,0)    0.0119415
    (11,0)    0.00723282
    (12,0)    0.0188654
    (13,0)    0.0141705
    (14,0)    0.0174829
    (15,0)    0.0170494
    (16,0)    0.0120356
    (17,0)    0.0220092
    (18,0)    0.0195075
    (19,0)    0.0393968
    (20,0)    0.0111877
    (21,0)    0.0090195
    (22,0)    0.0139908
    (23,0)    0.0122687
    (24,0)    0.0153018
    (25,0)    0.0135228
    (26,0)    0.0159007
    (27,0)    0.0149564
    (28,0)    0.0144364
    (29,0)    0.0137454
    ...
MKL info: 0
0.000139 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.04e-06 sec ]
 [ GrB_apply (inplace-op) 1.68e-06 sec ]
 [ GrB_reduce 6.24e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.68e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.17e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.28899e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233754
    (1,0)    0.0139103
    (2,0)    0.0123441
    (3,0)    0.0145657
    (4,0)    0.0142019
    (5,0)    0.0100792
    (6,0)    0.0128753
    (7,0)    0.0143946
    (8,0)    0.0110203
    (9,0)    0.0110525
    (10,0)    0.0119312
    (11,0)    0.00723823
    (12,0)    0.018868
    (13,0)    0.0141597
    (14,0)    0.0174878
    (15,0)    0.0170362
    (16,0)    0.0120434
    (17,0)    0.0219845
    (18,0)    0.0195274
    (19,0)    0.0394466
    (20,0)    0.0112039
    (21,0)    0.00901741
    (22,0)    0.0140088
    (23,0)    0.0122533
    (24,0)    0.0153346
    (25,0)    0.0135241
    (26,0)    0.0158715
    (27,0)    0.014969
    (28,0)    0.0144097
    (29,0)    0.0137583
    ...
MKL info: 0
0.000141 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.12e-06 sec ]
 [ GrB_apply (inplace-op) 1.67e-06 sec ]
 [ GrB_reduce 6.68e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.78e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.23e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.21399e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233747
    (1,0)    0.013921
    (2,0)    0.0123442
    (3,0)    0.0145663
    (4,0)    0.0141993
    (5,0)    0.0100747
    (6,0)    0.0128759
    (7,0)    0.0143956
    (8,0)    0.011013
    (9,0)    0.0110446
    (10,0)    0.0119323
    (11,0)    0.00723176
    (12,0)    0.0188712
    (13,0)    0.0141589
    (14,0)    0.0174856
    (15,0)    0.0170393
    (16,0)    0.012043
    (17,0)    0.0219933
    (18,0)    0.0195201
    (19,0)    0.0394506
    (20,0)    0.0111963
    (21,0)    0.00901781
    (22,0)    0.0140029
    (23,0)    0.0122512
    (24,0)    0.0153417
    (25,0)    0.0135284
    (26,0)    0.0158778
    (27,0)    0.0149599
    (28,0)    0.0144113
    (29,0)    0.0137654
    ...
MKL info: 0
0.000139 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.99e-06 sec ]
 [ GrB_apply (inplace-op) 1.62e-06 sec ]
 [ GrB_reduce 5.85e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.78e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.24e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.243e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023374
    (1,0)    0.0139214
    (2,0)    0.0123461
    (3,0)    0.0145676
    (4,0)    0.0141996
    (5,0)    0.0100757
    (6,0)    0.0128738
    (7,0)    0.0143951
    (8,0)    0.0110154
    (9,0)    0.0110448
    (10,0)    0.0119328
    (11,0)    0.00723062
    (12,0)    0.0188682
    (13,0)    0.0141567
    (14,0)    0.017484
    (15,0)    0.0170368
    (16,0)    0.0120386
    (17,0)    0.0219952
    (18,0)    0.0195214
    (19,0)    0.0394507
    (20,0)    0.0111962
    (21,0)    0.00901497
    (22,0)    0.0140044
    (23,0)    0.0122488
    (24,0)    0.015341
    (25,0)    0.0135295
    (26,0)    0.0158811
    (27,0)    0.0149651
    (28,0)    0.0144115
    (29,0)    0.0137667
    ...
MKL info: 0
0.000149 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.8e-06 sec ]
 [ GrB_apply (inplace-op) 1.62e-06 sec ]
 [ GrB_reduce 6.06e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.73e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.04e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.17801e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233754
    (1,0)    0.0139228
    (2,0)    0.0123471
    (3,0)    0.0145696
    (4,0)    0.014201
    (5,0)    0.0100776
    (6,0)    0.0128739
    (7,0)    0.0143955
    (8,0)    0.0110162
    (9,0)    0.0110455
    (10,0)    0.0119336
    (11,0)    0.00723155
    (12,0)    0.0188687
    (13,0)    0.0141571
    (14,0)    0.0174838
    (15,0)    0.0170369
    (16,0)    0.0120391
    (17,0)    0.0219961
    (18,0)    0.0195227
    (19,0)    0.0394481
    (20,0)    0.0111962
    (21,0)    0.00901421
    (22,0)    0.0140042
    (23,0)    0.0122487
    (24,0)    0.0153409
    (25,0)    0.0135281
    (26,0)    0.0158792
    (27,0)    0.0149652
    (28,0)    0.0144109
    (29,0)    0.0137657
    ...
MKL info: 0
0.000138 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.81e-06 sec ]
 [ GrB_apply (inplace-op) 1.74e-06 sec ]
 [ GrB_reduce 6.59e-07 sec ]
trial: 11 time:     0.0019 sec
 [ GrB_assign (C empty) Method 21: (C dense) = scalar 4.6e-06 sec ]
 [ GrB_Vector_dup 4.48e-07 sec ]
 [ GrB_assign (C dense) Method 22: (C dense) += scalar 3.01e-06 sec ]
 [ GrB_eWiseMult (A dense) (B dense) dense C=A+B 4.09e-06 sec ]
 [ GrB_assign (C empty) Method 21: (C dense) = scalar 4.05e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.25098e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0254975
    (1,0)    0.0136567
    (2,0)    0.0136567
    (3,0)    0.0136567
    (4,0)    0.0136567
    (5,0)    0.00942786
    (6,0)    0.0149254
    (7,0)    0.0115423
    (8,0)    0.0115423
    (9,0)    0.0115423
    (10,0)    0.0115423
    (11,0)    0.00731343
    (12,0)    0.0178856
    (13,0)    0.0178856
    (14,0)    0.0178856
    (15,0)    0.0178856
    (16,0)    0.0125995
    (17,0)    0.0212687
    (18,0)    0.018097
    (19,0)    0.0350124
    (20,0)    0.0115423
    (21,0)    0.0115423
    (22,0)    0.0115423
    (23,0)    0.0115423
    (24,0)    0.0104851
    (25,0)    0.0140796
    (26,0)    0.0140796
    (27,0)    0.0140796
    (28,0)    0.0140796
    (29,0)    0.00985075
    ...
MKL info: 0
0.000136 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.84e-06 sec ]
 [ GrB_apply (inplace-op) 1.79e-06 sec ]
 [ GrB_reduce 6.28e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.71e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.02e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.032e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0220887
    (1,0)    0.0129318
    (2,0)    0.0127221
    (3,0)    0.0136567
    (4,0)    0.0130816
    (5,0)    0.00981128
    (6,0)    0.0126249
    (7,0)    0.0146456
    (8,0)    0.0105718
    (9,0)    0.0115063
    (10,0)    0.0109312
    (11,0)    0.00706182
    (12,0)    0.019551
    (13,0)    0.0142791
    (14,0)    0.0182091
    (15,0)    0.017634
    (16,0)    0.0124977
    (17,0)    0.0227065
    (18,0)    0.0203436
    (19,0)    0.0393438
    (20,0)    0.0114105
    (21,0)    0.00931368
    (22,0)    0.0137829
    (23,0)    0.0132437
    (24,0)    0.0148524
    (25,0)    0.0130612
    (26,0)    0.0167156
    (27,0)    0.0147146
    (28,0)    0.0158289
    (29,0)    0.0131218
    ...
MKL info: 0
0.000135 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.8e-06 sec ]
 [ GrB_apply (inplace-op) 1.62e-06 sec ]
 [ GrB_reduce 6.21e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.65e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.10901e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0232132
    (1,0)    0.0137362
    (2,0)    0.0123324
    (3,0)    0.0145947
    (4,0)    0.014502
    (5,0)    0.0102149
    (6,0)    0.0125638
    (7,0)    0.0139089
    (8,0)    0.0107585
    (9,0)    0.0111774
    (10,0)    0.0117857
    (11,0)    0.00722375
    (12,0)    0.0180454
    (13,0)    0.0137987
    (14,0)    0.0177562
    (15,0)    0.0168708
    (16,0)    0.0121325
    (17,0)    0.0212654
    (18,0)    0.0181768
    (19,0)    0.0399208
    (20,0)    0.0112119
    (21,0)    0.00924239
    (22,0)    0.0145165
    (23,0)    0.0126211
    (24,0)    0.0156748
    (25,0)    0.0135252
    (26,0)    0.0155196
    (27,0)    0.0146325
    (28,0)    0.0148003
    (29,0)    0.0139976
    ...
MKL info: 0
0.000139 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.99e-06 sec ]
 [ GrB_apply (inplace-op) 1.71e-06 sec ]
 [ GrB_reduce 7.06e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.64e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.08e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.038e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0232749
    (1,0)    0.0137944
    (2,0)    0.012203
    (3,0)    0.0143792
    (4,0)    0.0139452
    (5,0)    0.0098574
    (6,0)    0.01277
    (7,0)    0.0143065
    (8,0)    0.0108926
    (9,0)    0.0108941
    (10,0)    0.0117638
    (11,0)    0.00709306
    (12,0)    0.0187575
    (13,0)    0.014051
    (14,0)    0.0171187
    (15,0)    0.0167851
    (16,0)    0.0119779
    (17,0)    0.0219206
    (18,0)    0.0191946
    (19,0)    0.0388428
    (20,0)    0.0111562
    (21,0)    0.00905812
    (22,0)    0.0136768
    (23,0)    0.0119485
    (24,0)    0.0155086
    (25,0)    0.0137232
    (26,0)    0.0160246
    (27,0)    0.0149899
    (28,0)    0.0144007
    (29,0)    0.0139681
    ...
MKL info: 0
0.000136 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.94e-06 sec ]
 [ GrB_apply (inplace-op) 1.63e-06 sec ]
 [ GrB_reduce 6.64e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.52e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.14e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.01302e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023315
    (1,0)    0.0138882
    (2,0)    0.0123459
    (3,0)    0.0144757
    (4,0)    0.0141007
    (5,0)    0.0100514
    (6,0)    0.01274
    (7,0)    0.0143498
    (8,0)    0.0109688
    (9,0)    0.011013
    (10,0)    0.0118908
    (11,0)    0.00723635
    (12,0)    0.018764
    (13,0)    0.0140595
    (14,0)    0.0174087
    (15,0)    0.016953
    (16,0)    0.0119551
    (17,0)    0.0218167
    (18,0)    0.019598
    (19,0)    0.0389976
    (20,0)    0.0111503
    (21,0)    0.00900973
    (22,0)    0.0140049
    (23,0)    0.012208
    (24,0)    0.0152048
    (25,0)    0.0135736
    (26,0)    0.0159555
    (27,0)    0.015091
    (28,0)    0.0144859
    (29,0)    0.0136949
    ...
MKL info: 0
0.000136 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.83e-06 sec ]
 [ GrB_apply (inplace-op) 3.68e-06 sec ]
 [ GrB_reduce 6.34e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.64e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.09e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.00199e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023342
    (1,0)    0.0139194
    (2,0)    0.0123935
    (3,0)    0.0146033
    (4,0)    0.0142454
    (5,0)    0.0101259
    (6,0)    0.0128146
    (7,0)    0.0143784
    (8,0)    0.0110191
    (9,0)    0.0110391
    (10,0)    0.0119163
    (11,0)    0.00724003
    (12,0)    0.0188437
    (13,0)    0.0141657
    (14,0)    0.0174519
    (15,0)    0.0169961
    (16,0)    0.0120357
    (17,0)    0.0219393
    (18,0)    0.0196058
    (19,0)    0.039242
    (20,0)    0.0111945
    (21,0)    0.00902613
    (22,0)    0.0139688
    (23,0)    0.0122586
    (24,0)    0.0152724
    (25,0)    0.0134917
    (26,0)    0.015846
    (27,0)    0.0149329
    (28,0)    0.0144235
    (29,0)    0.0137047
    ...
MKL info: 0
0.000136 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.86e-06 sec ]
 [ GrB_apply (inplace-op) 1.56e-06 sec ]
 [ GrB_reduce 6.35e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.62e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.13e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.224e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233566
    (1,0)    0.0139173
    (2,0)    0.0123504
    (3,0)    0.0145414
    (4,0)    0.0141934
    (5,0)    0.0100768
    (6,0)    0.012878
    (7,0)    0.0143949
    (8,0)    0.0110248
    (9,0)    0.0110496
    (10,0)    0.0119415
    (11,0)    0.00723282
    (12,0)    0.0188654
    (13,0)    0.0141705
    (14,0)    0.0174829
    (15,0)    0.0170494
    (16,0)    0.0120356
    (17,0)    0.0220092
    (18,0)    0.0195075
    (19,0)    0.0393968
    (20,0)    0.0111877
    (21,0)    0.0090195
    (22,0)    0.0139908
    (23,0)    0.0122687
    (24,0)    0.0153018
    (25,0)    0.0135228
    (26,0)    0.0159007
    (27,0)    0.0149564
    (28,0)    0.0144364
    (29,0)    0.0137454
    ...
MKL info: 0
0.000135 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.69e-06 sec ]
 [ GrB_apply (inplace-op) 1.55e-06 sec ]
 [ GrB_reduce 6.31e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.7e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.05e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 1.996e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233754
    (1,0)    0.0139103
    (2,0)    0.0123441
    (3,0)    0.0145657
    (4,0)    0.0142019
    (5,0)    0.0100792
    (6,0)    0.0128753
    (7,0)    0.0143946
    (8,0)    0.0110203
    (9,0)    0.0110525
    (10,0)    0.0119312
    (11,0)    0.00723823
    (12,0)    0.018868
    (13,0)    0.0141597
    (14,0)    0.0174878
    (15,0)    0.0170362
    (16,0)    0.0120434
    (17,0)    0.0219845
    (18,0)    0.0195274
    (19,0)    0.0394466
    (20,0)    0.0112039
    (21,0)    0.00901741
    (22,0)    0.0140088
    (23,0)    0.0122533
    (24,0)    0.0153346
    (25,0)    0.0135241
    (26,0)    0.0158715
    (27,0)    0.014969
    (28,0)    0.0144097
    (29,0)    0.0137583
    ...
MKL info: 0
0.000135 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.78e-06 sec ]
 [ GrB_apply (inplace-op) 1.78e-06 sec ]
 [ GrB_reduce 6.44e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.75e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.21102e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233747
    (1,0)    0.013921
    (2,0)    0.0123442
    (3,0)    0.0145663
    (4,0)    0.0141993
    (5,0)    0.0100747
    (6,0)    0.0128759
    (7,0)    0.0143956
    (8,0)    0.011013
    (9,0)    0.0110446
    (10,0)    0.0119323
    (11,0)    0.00723176
    (12,0)    0.0188712
    (13,0)    0.0141589
    (14,0)    0.0174856
    (15,0)    0.0170393
    (16,0)    0.012043
    (17,0)    0.0219933
    (18,0)    0.0195201
    (19,0)    0.0394506
    (20,0)    0.0111963
    (21,0)    0.00901781
    (22,0)    0.0140029
    (23,0)    0.0122512
    (24,0)    0.0153417
    (25,0)    0.0135284
    (26,0)    0.0158778
    (27,0)    0.0149599
    (28,0)    0.0144113
    (29,0)    0.0137654
    ...
MKL info: 0
0.000157 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 7.9e-06 sec ]
 [ GrB_apply (inplace-op) 2.89e-06 sec ]
 [ GrB_reduce 1.16e-06 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.23e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.38e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.82199e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023374
    (1,0)    0.0139214
    (2,0)    0.0123461
    (3,0)    0.0145676
    (4,0)    0.0141996
    (5,0)    0.0100757
    (6,0)    0.0128738
    (7,0)    0.0143951
    (8,0)    0.0110154
    (9,0)    0.0110448
    (10,0)    0.0119328
    (11,0)    0.00723062
    (12,0)    0.0188682
    (13,0)    0.0141567
    (14,0)    0.017484
    (15,0)    0.0170368
    (16,0)    0.0120386
    (17,0)    0.0219952
    (18,0)    0.0195214
    (19,0)    0.0394507
    (20,0)    0.0111962
    (21,0)    0.00901497
    (22,0)    0.0140044
    (23,0)    0.0122488
    (24,0)    0.015341
    (25,0)    0.0135295
    (26,0)    0.0158811
    (27,0)    0.0149651
    (28,0)    0.0144115
    (29,0)    0.0137667
    ...
MKL info: 0
0.000139 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.04e-06 sec ]
 [ GrB_apply (inplace-op) 1.67e-06 sec ]
 [ GrB_reduce 6.81e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.71e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 2.9e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.17301e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233754
    (1,0)    0.0139228
    (2,0)    0.0123471
    (3,0)    0.0145696
    (4,0)    0.014201
    (5,0)    0.0100776
    (6,0)    0.0128739
    (7,0)    0.0143955
    (8,0)    0.0110162
    (9,0)    0.0110455
    (10,0)    0.0119336
    (11,0)    0.00723155
    (12,0)    0.0188687
    (13,0)    0.0141571
    (14,0)    0.0174838
    (15,0)    0.0170369
    (16,0)    0.0120391
    (17,0)    0.0219961
    (18,0)    0.0195227
    (19,0)    0.0394481
    (20,0)    0.0111962
    (21,0)    0.00901421
    (22,0)    0.0140042
    (23,0)    0.0122487
    (24,0)    0.0153409
    (25,0)    0.0135281
    (26,0)    0.0158792
    (27,0)    0.0149652
    (28,0)    0.0144109
    (29,0)    0.0137657
    ...
MKL info: 0
0.000139 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5e-06 sec ]
 [ GrB_apply (inplace-op) 1.64e-06 sec ]
 [ GrB_reduce 7.08e-07 sec ]
trial: 12 time:     0.0019 sec
 [ GrB_assign (C empty) Method 21: (C dense) = scalar 4.63e-06 sec ]
 [ GrB_Vector_dup 5.69e-07 sec ]
 [ GrB_assign (C dense) Method 22: (C dense) += scalar 3.26e-06 sec ]
 [ GrB_eWiseMult (A dense) (B dense) dense C=A+B 4.31e-06 sec ]
 [ GrB_assign (C empty) Method 21: (C dense) = scalar 4.22e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.29501e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0254975
    (1,0)    0.0136567
    (2,0)    0.0136567
    (3,0)    0.0136567
    (4,0)    0.0136567
    (5,0)    0.00942786
    (6,0)    0.0149254
    (7,0)    0.0115423
    (8,0)    0.0115423
    (9,0)    0.0115423
    (10,0)    0.0115423
    (11,0)    0.00731343
    (12,0)    0.0178856
    (13,0)    0.0178856
    (14,0)    0.0178856
    (15,0)    0.0178856
    (16,0)    0.0125995
    (17,0)    0.0212687
    (18,0)    0.018097
    (19,0)    0.0350124
    (20,0)    0.0115423
    (21,0)    0.0115423
    (22,0)    0.0115423
    (23,0)    0.0115423
    (24,0)    0.0104851
    (25,0)    0.0140796
    (26,0)    0.0140796
    (27,0)    0.0140796
    (28,0)    0.0140796
    (29,0)    0.00985075
    ...
MKL info: 0
0.000137 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.03e-06 sec ]
 [ GrB_apply (inplace-op) 1.66e-06 sec ]
 [ GrB_reduce 5.94e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.62e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.14e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.121e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0220887
    (1,0)    0.0129318
    (2,0)    0.0127221
    (3,0)    0.0136567
    (4,0)    0.0130816
    (5,0)    0.00981128
    (6,0)    0.0126249
    (7,0)    0.0146456
    (8,0)    0.0105718
    (9,0)    0.0115063
    (10,0)    0.0109312
    (11,0)    0.00706182
    (12,0)    0.019551
    (13,0)    0.0142791
    (14,0)    0.0182091
    (15,0)    0.017634
    (16,0)    0.0124977
    (17,0)    0.0227065
    (18,0)    0.0203436
    (19,0)    0.0393438
    (20,0)    0.0114105
    (21,0)    0.00931368
    (22,0)    0.0137829
    (23,0)    0.0132437
    (24,0)    0.0148524
    (25,0)    0.0130612
    (26,0)    0.0167156
    (27,0)    0.0147146
    (28,0)    0.0158289
    (29,0)    0.0131218
    ...
MKL info: 0
0.000141 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.3e-06 sec ]
 [ GrB_apply (inplace-op) 1.67e-06 sec ]
 [ GrB_reduce 8.46e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.91e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.11e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.23101e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0232132
    (1,0)    0.0137362
    (2,0)    0.0123324
    (3,0)    0.0145947
    (4,0)    0.014502
    (5,0)    0.0102149
    (6,0)    0.0125638
    (7,0)    0.0139089
    (8,0)    0.0107585
    (9,0)    0.0111774
    (10,0)    0.0117857
    (11,0)    0.00722375
    (12,0)    0.0180454
    (13,0)    0.0137987
    (14,0)    0.0177562
    (15,0)    0.0168708
    (16,0)    0.0121325
    (17,0)    0.0212654
    (18,0)    0.0181768
    (19,0)    0.0399208
    (20,0)    0.0112119
    (21,0)    0.00924239
    (22,0)    0.0145165
    (23,0)    0.0126211
    (24,0)    0.0156748
    (25,0)    0.0135252
    (26,0)    0.0155196
    (27,0)    0.0146325
    (28,0)    0.0148003
    (29,0)    0.0139976
    ...
MKL info: 0
0.000139 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.87e-06 sec ]
 [ GrB_apply (inplace-op) 1.77e-06 sec ]
 [ GrB_reduce 7.24e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.66e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.03e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.146e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0232749
    (1,0)    0.0137944
    (2,0)    0.012203
    (3,0)    0.0143792
    (4,0)    0.0139452
    (5,0)    0.0098574
    (6,0)    0.01277
    (7,0)    0.0143065
    (8,0)    0.0108926
    (9,0)    0.0108941
    (10,0)    0.0117638
    (11,0)    0.00709306
    (12,0)    0.0187575
    (13,0)    0.014051
    (14,0)    0.0171187
    (15,0)    0.0167851
    (16,0)    0.0119779
    (17,0)    0.0219206
    (18,0)    0.0191946
    (19,0)    0.0388428
    (20,0)    0.0111562
    (21,0)    0.00905812
    (22,0)    0.0136768
    (23,0)    0.0119485
    (24,0)    0.0155086
    (25,0)    0.0137232
    (26,0)    0.0160246
    (27,0)    0.0149899
    (28,0)    0.0144007
    (29,0)    0.0139681
    ...
MKL info: 0
0.000135 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.72e-06 sec ]
 [ GrB_apply (inplace-op) 1.67e-06 sec ]
 [ GrB_reduce 6.07e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.81e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.02e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 1.95199e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023315
    (1,0)    0.0138882
    (2,0)    0.0123459
    (3,0)    0.0144757
    (4,0)    0.0141007
    (5,0)    0.0100514
    (6,0)    0.01274
    (7,0)    0.0143498
    (8,0)    0.0109688
    (9,0)    0.011013
    (10,0)    0.0118908
    (11,0)    0.00723635
    (12,0)    0.018764
    (13,0)    0.0140595
    (14,0)    0.0174087
    (15,0)    0.016953
    (16,0)    0.0119551
    (17,0)    0.0218167
    (18,0)    0.019598
    (19,0)    0.0389976
    (20,0)    0.0111503
    (21,0)    0.00900973
    (22,0)    0.0140049
    (23,0)    0.012208
    (24,0)    0.0152048
    (25,0)    0.0135736
    (26,0)    0.0159555
    (27,0)    0.015091
    (28,0)    0.0144859
    (29,0)    0.0136949
    ...
MKL info: 0
0.000151 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.06e-06 sec ]
 [ GrB_apply (inplace-op) 1.68e-06 sec ]
 [ GrB_reduce 8.58e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.83e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 2.86e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.421e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023342
    (1,0)    0.0139194
    (2,0)    0.0123935
    (3,0)    0.0146033
    (4,0)    0.0142454
    (5,0)    0.0101259
    (6,0)    0.0128146
    (7,0)    0.0143784
    (8,0)    0.0110191
    (9,0)    0.0110391
    (10,0)    0.0119163
    (11,0)    0.00724003
    (12,0)    0.0188437
    (13,0)    0.0141657
    (14,0)    0.0174519
    (15,0)    0.0169961
    (16,0)    0.0120357
    (17,0)    0.0219393
    (18,0)    0.0196058
    (19,0)    0.039242
    (20,0)    0.0111945
    (21,0)    0.00902613
    (22,0)    0.0139688
    (23,0)    0.0122586
    (24,0)    0.0152724
    (25,0)    0.0134917
    (26,0)    0.015846
    (27,0)    0.0149329
    (28,0)    0.0144235
    (29,0)    0.0137047
    ...
MKL info: 0
0.000136 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.83e-06 sec ]
 [ GrB_apply (inplace-op) 1.67e-06 sec ]
 [ GrB_reduce 7.28e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.6e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 2.85e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 1.92202e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233566
    (1,0)    0.0139173
    (2,0)    0.0123504
    (3,0)    0.0145414
    (4,0)    0.0141934
    (5,0)    0.0100768
    (6,0)    0.012878
    (7,0)    0.0143949
    (8,0)    0.0110248
    (9,0)    0.0110496
    (10,0)    0.0119415
    (11,0)    0.00723282
    (12,0)    0.0188654
    (13,0)    0.0141705
    (14,0)    0.0174829
    (15,0)    0.0170494
    (16,0)    0.0120356
    (17,0)    0.0220092
    (18,0)    0.0195075
    (19,0)    0.0393968
    (20,0)    0.0111877
    (21,0)    0.0090195
    (22,0)    0.0139908
    (23,0)    0.0122687
    (24,0)    0.0153018
    (25,0)    0.0135228
    (26,0)    0.0159007
    (27,0)    0.0149564
    (28,0)    0.0144364
    (29,0)    0.0137454
    ...
MKL info: 0
0.000132 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.72e-06 sec ]
 [ GrB_apply (inplace-op) 1.54e-06 sec ]
 [ GrB_reduce 6.94e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.53e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 2.93e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 1.97103e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233754
    (1,0)    0.0139103
    (2,0)    0.0123441
    (3,0)    0.0145657
    (4,0)    0.0142019
    (5,0)    0.0100792
    (6,0)    0.0128753
    (7,0)    0.0143946
    (8,0)    0.0110203
    (9,0)    0.0110525
    (10,0)    0.0119312
    (11,0)    0.00723823
    (12,0)    0.018868
    (13,0)    0.0141597
    (14,0)    0.0174878
    (15,0)    0.0170362
    (16,0)    0.0120434
    (17,0)    0.0219845
    (18,0)    0.0195274
    (19,0)    0.0394466
    (20,0)    0.0112039
    (21,0)    0.00901741
    (22,0)    0.0140088
    (23,0)    0.0122533
    (24,0)    0.0153346
    (25,0)    0.0135241
    (26,0)    0.0158715
    (27,0)    0.014969
    (28,0)    0.0144097
    (29,0)    0.0137583
    ...
MKL info: 0
0.000132 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.76e-06 sec ]
 [ GrB_apply (inplace-op) 1.56e-06 sec ]
 [ GrB_reduce 6.05e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.42e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 2.99e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 1.843e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233747
    (1,0)    0.013921
    (2,0)    0.0123442
    (3,0)    0.0145663
    (4,0)    0.0141993
    (5,0)    0.0100747
    (6,0)    0.0128759
    (7,0)    0.0143956
    (8,0)    0.011013
    (9,0)    0.0110446
    (10,0)    0.0119323
    (11,0)    0.00723176
    (12,0)    0.0188712
    (13,0)    0.0141589
    (14,0)    0.0174856
    (15,0)    0.0170393
    (16,0)    0.012043
    (17,0)    0.0219933
    (18,0)    0.0195201
    (19,0)    0.0394506
    (20,0)    0.0111963
    (21,0)    0.00901781
    (22,0)    0.0140029
    (23,0)    0.0122512
    (24,0)    0.0153417
    (25,0)    0.0135284
    (26,0)    0.0158778
    (27,0)    0.0149599
    (28,0)    0.0144113
    (29,0)    0.0137654
    ...
MKL info: 0
0.000139 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.35e-06 sec ]
 [ GrB_apply (inplace-op) 1.68e-06 sec ]
 [ GrB_reduce 7.54e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.79e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.08e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 2.24801e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023374
    (1,0)    0.0139214
    (2,0)    0.0123461
    (3,0)    0.0145676
    (4,0)    0.0141996
    (5,0)    0.0100757
    (6,0)    0.0128738
    (7,0)    0.0143951
    (8,0)    0.0110154
    (9,0)    0.0110448
    (10,0)    0.0119328
    (11,0)    0.00723062
    (12,0)    0.0188682
    (13,0)    0.0141567
    (14,0)    0.017484
    (15,0)    0.0170368
    (16,0)    0.0120386
    (17,0)    0.0219952
    (18,0)    0.0195214
    (19,0)    0.0394507
    (20,0)    0.0111962
    (21,0)    0.00901497
    (22,0)    0.0140044
    (23,0)    0.0122488
    (24,0)    0.015341
    (25,0)    0.0135295
    (26,0)    0.0158811
    (27,0)    0.0149651
    (28,0)    0.0144115
    (29,0)    0.0137667
    ...
MKL info: 0
0.000133 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.73e-06 sec ]
 [ GrB_apply (inplace-op) 1.55e-06 sec ]
 [ GrB_reduce 6.83e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.53e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 2.94e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 1.918e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233754
    (1,0)    0.0139228
    (2,0)    0.0123471
    (3,0)    0.0145696
    (4,0)    0.014201
    (5,0)    0.0100776
    (6,0)    0.0128739
    (7,0)    0.0143955
    (8,0)    0.0110162
    (9,0)    0.0110455
    (10,0)    0.0119336
    (11,0)    0.00723155
    (12,0)    0.0188687
    (13,0)    0.0141571
    (14,0)    0.0174838
    (15,0)    0.0170369
    (16,0)    0.0120391
    (17,0)    0.0219961
    (18,0)    0.0195227
    (19,0)    0.0394481
    (20,0)    0.0111962
    (21,0)    0.00901421
    (22,0)    0.0140042
    (23,0)    0.0122487
    (24,0)    0.0153409
    (25,0)    0.0135281
    (26,0)    0.0158792
    (27,0)    0.0149652
    (28,0)    0.0144109
    (29,0)    0.0137657
    ...
MKL info: 0
0.000144 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.51e-06 sec ]
 [ GrB_apply (inplace-op) 1.55e-06 sec ]
 [ GrB_reduce 5.76e-07 sec ]
trial: 13 time:     0.0018 sec
 [ GrB_assign (C empty) Method 21: (C dense) = scalar 4.38e-06 sec ]
 [ GrB_Vector_dup 5.16e-07 sec ]
 [ GrB_assign (C dense) Method 22: (C dense) += scalar 2.85e-06 sec ]
 [ GrB_eWiseMult (A dense) (B dense) dense C=A+B 4.07e-06 sec ]
 [ GrB_assign (C empty) Method 21: (C dense) = scalar 3.81e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 1.943e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0254975
    (1,0)    0.0136567
    (2,0)    0.0136567
    (3,0)    0.0136567
    (4,0)    0.0136567
    (5,0)    0.00942786
    (6,0)    0.0149254
    (7,0)    0.0115423
    (8,0)    0.0115423
    (9,0)    0.0115423
    (10,0)    0.0115423
    (11,0)    0.00731343
    (12,0)    0.0178856
    (13,0)    0.0178856
    (14,0)    0.0178856
    (15,0)    0.0178856
    (16,0)    0.0125995
    (17,0)    0.0212687
    (18,0)    0.018097
    (19,0)    0.0350124
    (20,0)    0.0115423
    (21,0)    0.0115423
    (22,0)    0.0115423
    (23,0)    0.0115423
    (24,0)    0.0104851
    (25,0)    0.0140796
    (26,0)    0.0140796
    (27,0)    0.0140796
    (28,0)    0.0140796
    (29,0)    0.00985075
    ...
MKL info: 0
0.000132 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.67e-06 sec ]
 [ GrB_apply (inplace-op) 1.7e-06 sec ]
 [ GrB_reduce 6.12e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.68e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 2.85e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 1.90097e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0220887
    (1,0)    0.0129318
    (2,0)    0.0127221
    (3,0)    0.0136567
    (4,0)    0.0130816
    (5,0)    0.00981128
    (6,0)    0.0126249
    (7,0)    0.0146456
    (8,0)    0.0105718
    (9,0)    0.0115063
    (10,0)    0.0109312
    (11,0)    0.00706182
    (12,0)    0.019551
    (13,0)    0.0142791
    (14,0)    0.0182091
    (15,0)    0.017634
    (16,0)    0.0124977
    (17,0)    0.0227065
    (18,0)    0.0203436
    (19,0)    0.0393438
    (20,0)    0.0114105
    (21,0)    0.00931368
    (22,0)    0.0137829
    (23,0)    0.0132437
    (24,0)    0.0148524
    (25,0)    0.0130612
    (26,0)    0.0167156
    (27,0)    0.0147146
    (28,0)    0.0158289
    (29,0)    0.0131218
    ...
MKL info: 0
0.000129 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.51e-06 sec ]
 [ GrB_apply (inplace-op) 1.61e-06 sec ]
 [ GrB_reduce 5.51e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.49e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 2.82e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 1.85499e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0232132
    (1,0)    0.0137362
    (2,0)    0.0123324
    (3,0)    0.0145947
    (4,0)    0.014502
    (5,0)    0.0102149
    (6,0)    0.0125638
    (7,0)    0.0139089
    (8,0)    0.0107585
    (9,0)    0.0111774
    (10,0)    0.0117857
    (11,0)    0.00722375
    (12,0)    0.0180454
    (13,0)    0.0137987
    (14,0)    0.0177562
    (15,0)    0.0168708
    (16,0)    0.0121325
    (17,0)    0.0212654
    (18,0)    0.0181768
    (19,0)    0.0399208
    (20,0)    0.0112119
    (21,0)    0.00924239
    (22,0)    0.0145165
    (23,0)    0.0126211
    (24,0)    0.0156748
    (25,0)    0.0135252
    (26,0)    0.0155196
    (27,0)    0.0146325
    (28,0)    0.0148003
    (29,0)    0.0139976
    ...
MKL info: 0
0.000128 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.58e-06 sec ]
 [ GrB_apply (inplace-op) 1.53e-06 sec ]
 [ GrB_reduce 5.68e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.4e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 5.55e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 1.97702e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0232749
    (1,0)    0.0137944
    (2,0)    0.012203
    (3,0)    0.0143792
    (4,0)    0.0139452
    (5,0)    0.0098574
    (6,0)    0.01277
    (7,0)    0.0143065
    (8,0)    0.0108926
    (9,0)    0.0108941
    (10,0)    0.0117638
    (11,0)    0.00709306
    (12,0)    0.0187575
    (13,0)    0.014051
    (14,0)    0.0171187
    (15,0)    0.0167851
    (16,0)    0.0119779
    (17,0)    0.0219206
    (18,0)    0.0191946
    (19,0)    0.0388428
    (20,0)    0.0111562
    (21,0)    0.00905812
    (22,0)    0.0136768
    (23,0)    0.0119485
    (24,0)    0.0155086
    (25,0)    0.0137232
    (26,0)    0.0160246
    (27,0)    0.0149899
    (28,0)    0.0144007
    (29,0)    0.0139681
    ...
MKL info: 0
0.000129 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.8e-06 sec ]
 [ GrB_apply (inplace-op) 1.6e-06 sec ]
 [ GrB_reduce 6.57e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.31e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 2.95e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 1.91099e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023315
    (1,0)    0.0138882
    (2,0)    0.0123459
    (3,0)    0.0144757
    (4,0)    0.0141007
    (5,0)    0.0100514
    (6,0)    0.01274
    (7,0)    0.0143498
    (8,0)    0.0109688
    (9,0)    0.011013
    (10,0)    0.0118908
    (11,0)    0.00723635
    (12,0)    0.018764
    (13,0)    0.0140595
    (14,0)    0.0174087
    (15,0)    0.016953
    (16,0)    0.0119551
    (17,0)    0.0218167
    (18,0)    0.019598
    (19,0)    0.0389976
    (20,0)    0.0111503
    (21,0)    0.00900973
    (22,0)    0.0140049
    (23,0)    0.012208
    (24,0)    0.0152048
    (25,0)    0.0135736
    (26,0)    0.0159555
    (27,0)    0.015091
    (28,0)    0.0144859
    (29,0)    0.0136949
    ...
MKL info: 0
0.000133 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.86e-06 sec ]
 [ GrB_apply (inplace-op) 1.57e-06 sec ]
 [ GrB_reduce 6.56e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.32e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 3.05e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 1.93401e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023342
    (1,0)    0.0139194
    (2,0)    0.0123935
    (3,0)    0.0146033
    (4,0)    0.0142454
    (5,0)    0.0101259
    (6,0)    0.0128146
    (7,0)    0.0143784
    (8,0)    0.0110191
    (9,0)    0.0110391
    (10,0)    0.0119163
    (11,0)    0.00724003
    (12,0)    0.0188437
    (13,0)    0.0141657
    (14,0)    0.0174519
    (15,0)    0.0169961
    (16,0)    0.0120357
    (17,0)    0.0219393
    (18,0)    0.0196058
    (19,0)    0.039242
    (20,0)    0.0111945
    (21,0)    0.00902613
    (22,0)    0.0139688
    (23,0)    0.0122586
    (24,0)    0.0152724
    (25,0)    0.0134917
    (26,0)    0.015846
    (27,0)    0.0149329
    (28,0)    0.0144235
    (29,0)    0.0137047
    ...
MKL info: 0
0.000141 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.63e-06 sec ]
 [ GrB_apply (inplace-op) 1.42e-06 sec ]
 [ GrB_reduce 5.95e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.39e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 2.89e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 1.94699e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233566
    (1,0)    0.0139173
    (2,0)    0.0123504
    (3,0)    0.0145414
    (4,0)    0.0141934
    (5,0)    0.0100768
    (6,0)    0.012878
    (7,0)    0.0143949
    (8,0)    0.0110248
    (9,0)    0.0110496
    (10,0)    0.0119415
    (11,0)    0.00723282
    (12,0)    0.0188654
    (13,0)    0.0141705
    (14,0)    0.0174829
    (15,0)    0.0170494
    (16,0)    0.0120356
    (17,0)    0.0220092
    (18,0)    0.0195075
    (19,0)    0.0393968
    (20,0)    0.0111877
    (21,0)    0.0090195
    (22,0)    0.0139908
    (23,0)    0.0122687
    (24,0)    0.0153018
    (25,0)    0.0135228
    (26,0)    0.0159007
    (27,0)    0.0149564
    (28,0)    0.0144364
    (29,0)    0.0137454
    ...
MKL info: 0
0.000126 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.53e-06 sec ]
 [ GrB_apply (inplace-op) 1.52e-06 sec ]
 [ GrB_reduce 5.84e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.31e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 2.8e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 1.98302e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233754
    (1,0)    0.0139103
    (2,0)    0.0123441
    (3,0)    0.0145657
    (4,0)    0.0142019
    (5,0)    0.0100792
    (6,0)    0.0128753
    (7,0)    0.0143946
    (8,0)    0.0110203
    (9,0)    0.0110525
    (10,0)    0.0119312
    (11,0)    0.00723823
    (12,0)    0.018868
    (13,0)    0.0141597
    (14,0)    0.0174878
    (15,0)    0.0170362
    (16,0)    0.0120434
    (17,0)    0.0219845
    (18,0)    0.0195274
    (19,0)    0.0394466
    (20,0)    0.0112039
    (21,0)    0.00901741
    (22,0)    0.0140088
    (23,0)    0.0122533
    (24,0)    0.0153346
    (25,0)    0.0135241
    (26,0)    0.0158715
    (27,0)    0.014969
    (28,0)    0.0144097
    (29,0)    0.0137583
    ...
MKL info: 0
0.000126 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.41e-06 sec ]
 [ GrB_apply (inplace-op) 1.52e-06 sec ]
 [ GrB_reduce 5.75e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.36e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 2.82e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 1.854e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233747
    (1,0)    0.013921
    (2,0)    0.0123442
    (3,0)    0.0145663
    (4,0)    0.0141993
    (5,0)    0.0100747
    (6,0)    0.0128759
    (7,0)    0.0143956
    (8,0)    0.011013
    (9,0)    0.0110446
    (10,0)    0.0119323
    (11,0)    0.00723176
    (12,0)    0.0188712
    (13,0)    0.0141589
    (14,0)    0.0174856
    (15,0)    0.0170393
    (16,0)    0.012043
    (17,0)    0.0219933
    (18,0)    0.0195201
    (19,0)    0.0394506
    (20,0)    0.0111963
    (21,0)    0.00901781
    (22,0)    0.0140029
    (23,0)    0.0122512
    (24,0)    0.0153417
    (25,0)    0.0135284
    (26,0)    0.0158778
    (27,0)    0.0149599
    (28,0)    0.0144113
    (29,0)    0.0137654
    ...
MKL info: 0
0.000125 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 6.29e-06 sec ]
 [ GrB_apply (inplace-op) 1.65e-06 sec ]
 [ GrB_reduce 6.15e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.49e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 2.8e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 1.77103e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023374
    (1,0)    0.0139214
    (2,0)    0.0123461
    (3,0)    0.0145676
    (4,0)    0.0141996
    (5,0)    0.0100757
    (6,0)    0.0128738
    (7,0)    0.0143951
    (8,0)    0.0110154
    (9,0)    0.0110448
    (10,0)    0.0119328
    (11,0)    0.00723062
    (12,0)    0.0188682
    (13,0)    0.0141567
    (14,0)    0.017484
    (15,0)    0.0170368
    (16,0)    0.0120386
    (17,0)    0.0219952
    (18,0)    0.0195214
    (19,0)    0.0394507
    (20,0)    0.0111962
    (21,0)    0.00901497
    (22,0)    0.0140044
    (23,0)    0.0122488
    (24,0)    0.015341
    (25,0)    0.0135295
    (26,0)    0.0158811
    (27,0)    0.0149651
    (28,0)    0.0144115
    (29,0)    0.0137667
    ...
MKL info: 0
0.000125 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.48e-06 sec ]
 [ GrB_apply (inplace-op) 1.56e-06 sec ]
 [ GrB_reduce 5.88e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.41e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 2.7e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 1.80601e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233754
    (1,0)    0.0139228
    (2,0)    0.0123471
    (3,0)    0.0145696
    (4,0)    0.014201
    (5,0)    0.0100776
    (6,0)    0.0128739
    (7,0)    0.0143955
    (8,0)    0.0110162
    (9,0)    0.0110455
    (10,0)    0.0119336
    (11,0)    0.00723155
    (12,0)    0.0188687
    (13,0)    0.0141571
    (14,0)    0.0174838
    (15,0)    0.0170369
    (16,0)    0.0120391
    (17,0)    0.0219961
    (18,0)    0.0195227
    (19,0)    0.0394481
    (20,0)    0.0111962
    (21,0)    0.00901421
    (22,0)    0.0140042
    (23,0)    0.0122487
    (24,0)    0.0153409
    (25,0)    0.0135281
    (26,0)    0.0158792
    (27,0)    0.0149652
    (28,0)    0.0144109
    (29,0)    0.0137657
    ...
MKL info: 0
0.000125 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.42e-06 sec ]
 [ GrB_apply (inplace-op) 1.54e-06 sec ]
 [ GrB_reduce 5.8e-07 sec ]
trial: 14 time:     0.0017 sec
 [ GrB_assign (C empty) Method 21: (C dense) = scalar 4.11e-06 sec ]
 [ GrB_Vector_dup 4.92e-07 sec ]
 [ GrB_assign (C dense) Method 22: (C dense) += scalar 2.84e-06 sec ]
 [ GrB_eWiseMult (A dense) (B dense) dense C=A+B 3.7e-06 sec ]
 [ GrB_assign (C empty) Method 21: (C dense) = scalar 3.76e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 1.78503e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0254975
    (1,0)    0.0136567
    (2,0)    0.0136567
    (3,0)    0.0136567
    (4,0)    0.0136567
    (5,0)    0.00942786
    (6,0)    0.0149254
    (7,0)    0.0115423
    (8,0)    0.0115423
    (9,0)    0.0115423
    (10,0)    0.0115423
    (11,0)    0.00731343
    (12,0)    0.0178856
    (13,0)    0.0178856
    (14,0)    0.0178856
    (15,0)    0.0178856
    (16,0)    0.0125995
    (17,0)    0.0212687
    (18,0)    0.018097
    (19,0)    0.0350124
    (20,0)    0.0115423
    (21,0)    0.0115423
    (22,0)    0.0115423
    (23,0)    0.0115423
    (24,0)    0.0104851
    (25,0)    0.0140796
    (26,0)    0.0140796
    (27,0)    0.0140796
    (28,0)    0.0140796
    (29,0)    0.00985075
    ...
MKL info: 0
0.000128 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.75e-06 sec ]
 [ GrB_apply (inplace-op) 1.64e-06 sec ]
 [ GrB_reduce 6.4e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.29e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 2.79e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 1.99399e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0220887
    (1,0)    0.0129318
    (2,0)    0.0127221
    (3,0)    0.0136567
    (4,0)    0.0130816
    (5,0)    0.00981128
    (6,0)    0.0126249
    (7,0)    0.0146456
    (8,0)    0.0105718
    (9,0)    0.0115063
    (10,0)    0.0109312
    (11,0)    0.00706182
    (12,0)    0.019551
    (13,0)    0.0142791
    (14,0)    0.0182091
    (15,0)    0.017634
    (16,0)    0.0124977
    (17,0)    0.0227065
    (18,0)    0.0203436
    (19,0)    0.0393438
    (20,0)    0.0114105
    (21,0)    0.00931368
    (22,0)    0.0137829
    (23,0)    0.0132437
    (24,0)    0.0148524
    (25,0)    0.0130612
    (26,0)    0.0167156
    (27,0)    0.0147146
    (28,0)    0.0158289
    (29,0)    0.0131218
    ...
MKL info: 0
0.000126 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.54e-06 sec ]
 [ GrB_apply (inplace-op) 1.44e-06 sec ]
 [ GrB_reduce 5.14e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.29e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 2.86e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 1.83799e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0232132
    (1,0)    0.0137362
    (2,0)    0.0123324
    (3,0)    0.0145947
    (4,0)    0.014502
    (5,0)    0.0102149
    (6,0)    0.0125638
    (7,0)    0.0139089
    (8,0)    0.0107585
    (9,0)    0.0111774
    (10,0)    0.0117857
    (11,0)    0.00722375
    (12,0)    0.0180454
    (13,0)    0.0137987
    (14,0)    0.0177562
    (15,0)    0.0168708
    (16,0)    0.0121325
    (17,0)    0.0212654
    (18,0)    0.0181768
    (19,0)    0.0399208
    (20,0)    0.0112119
    (21,0)    0.00924239
    (22,0)    0.0145165
    (23,0)    0.0126211
    (24,0)    0.0156748
    (25,0)    0.0135252
    (26,0)    0.0155196
    (27,0)    0.0146325
    (28,0)    0.0148003
    (29,0)    0.0139976
    ...
MKL info: 0
0.000125 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.52e-06 sec ]
 [ GrB_apply (inplace-op) 1.45e-06 sec ]
 [ GrB_reduce 5.2e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.27e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 2.84e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 1.812e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0232749
    (1,0)    0.0137944
    (2,0)    0.012203
    (3,0)    0.0143792
    (4,0)    0.0139452
    (5,0)    0.0098574
    (6,0)    0.01277
    (7,0)    0.0143065
    (8,0)    0.0108926
    (9,0)    0.0108941
    (10,0)    0.0117638
    (11,0)    0.00709306
    (12,0)    0.0187575
    (13,0)    0.014051
    (14,0)    0.0171187
    (15,0)    0.0167851
    (16,0)    0.0119779
    (17,0)    0.0219206
    (18,0)    0.0191946
    (19,0)    0.0388428
    (20,0)    0.0111562
    (21,0)    0.00905812
    (22,0)    0.0136768
    (23,0)    0.0119485
    (24,0)    0.0155086
    (25,0)    0.0137232
    (26,0)    0.0160246
    (27,0)    0.0149899
    (28,0)    0.0144007
    (29,0)    0.0139681
    ...
MKL info: 0
0.000127 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.43e-06 sec ]
 [ GrB_apply (inplace-op) 1.58e-06 sec ]
 [ GrB_reduce 6.16e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.39e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 2.85e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 1.86099e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023315
    (1,0)    0.0138882
    (2,0)    0.0123459
    (3,0)    0.0144757
    (4,0)    0.0141007
    (5,0)    0.0100514
    (6,0)    0.01274
    (7,0)    0.0143498
    (8,0)    0.0109688
    (9,0)    0.011013
    (10,0)    0.0118908
    (11,0)    0.00723635
    (12,0)    0.018764
    (13,0)    0.0140595
    (14,0)    0.0174087
    (15,0)    0.016953
    (16,0)    0.0119551
    (17,0)    0.0218167
    (18,0)    0.019598
    (19,0)    0.0389976
    (20,0)    0.0111503
    (21,0)    0.00900973
    (22,0)    0.0140049
    (23,0)    0.012208
    (24,0)    0.0152048
    (25,0)    0.0135736
    (26,0)    0.0159555
    (27,0)    0.015091
    (28,0)    0.0144859
    (29,0)    0.0136949
    ...
MKL info: 0
0.000125 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.43e-06 sec ]
 [ GrB_apply (inplace-op) 1.53e-06 sec ]
 [ GrB_reduce 5.24e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.44e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 2.73e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 1.75799e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023342
    (1,0)    0.0139194
    (2,0)    0.0123935
    (3,0)    0.0146033
    (4,0)    0.0142454
    (5,0)    0.0101259
    (6,0)    0.0128146
    (7,0)    0.0143784
    (8,0)    0.0110191
    (9,0)    0.0110391
    (10,0)    0.0119163
    (11,0)    0.00724003
    (12,0)    0.0188437
    (13,0)    0.0141657
    (14,0)    0.0174519
    (15,0)    0.0169961
    (16,0)    0.0120357
    (17,0)    0.0219393
    (18,0)    0.0196058
    (19,0)    0.039242
    (20,0)    0.0111945
    (21,0)    0.00902613
    (22,0)    0.0139688
    (23,0)    0.0122586
    (24,0)    0.0152724
    (25,0)    0.0134917
    (26,0)    0.015846
    (27,0)    0.0149329
    (28,0)    0.0144235
    (29,0)    0.0137047
    ...
MKL info: 0
0.000125 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.42e-06 sec ]
 [ GrB_apply (inplace-op) 1.54e-06 sec ]
 [ GrB_reduce 5.83e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.44e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 2.77e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 1.726e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233566
    (1,0)    0.0139173
    (2,0)    0.0123504
    (3,0)    0.0145414
    (4,0)    0.0141934
    (5,0)    0.0100768
    (6,0)    0.012878
    (7,0)    0.0143949
    (8,0)    0.0110248
    (9,0)    0.0110496
    (10,0)    0.0119415
    (11,0)    0.00723282
    (12,0)    0.0188654
    (13,0)    0.0141705
    (14,0)    0.0174829
    (15,0)    0.0170494
    (16,0)    0.0120356
    (17,0)    0.0220092
    (18,0)    0.0195075
    (19,0)    0.0393968
    (20,0)    0.0111877
    (21,0)    0.0090195
    (22,0)    0.0139908
    (23,0)    0.0122687
    (24,0)    0.0153018
    (25,0)    0.0135228
    (26,0)    0.0159007
    (27,0)    0.0149564
    (28,0)    0.0144364
    (29,0)    0.0137454
    ...
MKL info: 0
0.000128 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.54e-06 sec ]
 [ GrB_apply (inplace-op) 1.63e-06 sec ]
 [ GrB_reduce 6.18e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.37e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 2.73e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 1.915e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233754
    (1,0)    0.0139103
    (2,0)    0.0123441
    (3,0)    0.0145657
    (4,0)    0.0142019
    (5,0)    0.0100792
    (6,0)    0.0128753
    (7,0)    0.0143946
    (8,0)    0.0110203
    (9,0)    0.0110525
    (10,0)    0.0119312
    (11,0)    0.00723823
    (12,0)    0.018868
    (13,0)    0.0141597
    (14,0)    0.0174878
    (15,0)    0.0170362
    (16,0)    0.0120434
    (17,0)    0.0219845
    (18,0)    0.0195274
    (19,0)    0.0394466
    (20,0)    0.0112039
    (21,0)    0.00901741
    (22,0)    0.0140088
    (23,0)    0.0122533
    (24,0)    0.0153346
    (25,0)    0.0135241
    (26,0)    0.0158715
    (27,0)    0.014969
    (28,0)    0.0144097
    (29,0)    0.0137583
    ...
MKL info: 0
0.000127 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.53e-06 sec ]
 [ GrB_apply (inplace-op) 1.51e-06 sec ]
 [ GrB_reduce 5.32e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.28e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 2.69e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 1.771e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233747
    (1,0)    0.013921
    (2,0)    0.0123442
    (3,0)    0.0145663
    (4,0)    0.0141993
    (5,0)    0.0100747
    (6,0)    0.0128759
    (7,0)    0.0143956
    (8,0)    0.011013
    (9,0)    0.0110446
    (10,0)    0.0119323
    (11,0)    0.00723176
    (12,0)    0.0188712
    (13,0)    0.0141589
    (14,0)    0.0174856
    (15,0)    0.0170393
    (16,0)    0.012043
    (17,0)    0.0219933
    (18,0)    0.0195201
    (19,0)    0.0394506
    (20,0)    0.0111963
    (21,0)    0.00901781
    (22,0)    0.0140029
    (23,0)    0.0122512
    (24,0)    0.0153417
    (25,0)    0.0135284
    (26,0)    0.0158778
    (27,0)    0.0149599
    (28,0)    0.0144113
    (29,0)    0.0137654
    ...
MKL info: 0
0.000126 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.62e-06 sec ]
 [ GrB_apply (inplace-op) 1.48e-06 sec ]
 [ GrB_reduce 5.68e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.22e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 2.91e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 1.79702e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.023374
    (1,0)    0.0139214
    (2,0)    0.0123461
    (3,0)    0.0145676
    (4,0)    0.0141996
    (5,0)    0.0100757
    (6,0)    0.0128738
    (7,0)    0.0143951
    (8,0)    0.0110154
    (9,0)    0.0110448
    (10,0)    0.0119328
    (11,0)    0.00723062
    (12,0)    0.0188682
    (13,0)    0.0141567
    (14,0)    0.017484
    (15,0)    0.0170368
    (16,0)    0.0120386
    (17,0)    0.0219952
    (18,0)    0.0195214
    (19,0)    0.0394507
    (20,0)    0.0111962
    (21,0)    0.00901497
    (22,0)    0.0140044
    (23,0)    0.0122488
    (24,0)    0.015341
    (25,0)    0.0135295
    (26,0)    0.0158811
    (27,0)    0.0149651
    (28,0)    0.0144115
    (29,0)    0.0137667
    ...
MKL info: 0
0.000128 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.7e-06 sec ]
 [ GrB_apply (inplace-op) 1.5e-06 sec ]
 [ GrB_reduce 6.53e-07 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.32e-06 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 2.87e-06 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 
Testing MKL mvx: C += A'*b where b is a dense vector
calling MKL here, semiring 0
calling MKL mxv 0: plus.times.float
created z
MKL time: 1.81299e-06
MKL claims to be successful: plus.times.float
Zx 0x556b0b6cd000
(cblas_saxpy) 
  67x1 GraphBLAS float vector, sparse by col:
  mkl mxv result, 67 entries

    (0,0)    0.0233754
    (1,0)    0.0139228
    (2,0)    0.0123471
    (3,0)    0.0145696
    (4,0)    0.014201
    (5,0)    0.0100776
    (6,0)    0.0128739
    (7,0)    0.0143955
    (8,0)    0.0110162
    (9,0)    0.0110455
    (10,0)    0.0119336
    (11,0)    0.00723155
    (12,0)    0.0188687
    (13,0)    0.0141571
    (14,0)    0.0174838
    (15,0)    0.0170369
    (16,0)    0.0120391
    (17,0)    0.0219961
    (18,0)    0.0195227
    (19,0)    0.0394481
    (20,0)    0.0111962
    (21,0)    0.00901421
    (22,0)    0.0140042
    (23,0)    0.0122487
    (24,0)    0.0153409
    (25,0)    0.0135281
    (26,0)    0.0158792
    (27,0)    0.0149652
    (28,0)    0.0144109
    (29,0)    0.0137657
    ...
MKL info: 0
0.000127 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 4.47e-06 sec ]
 [ GrB_apply (inplace-op) 1.48e-06 sec ]
 [ GrB_reduce 5.56e-07 sec ]
trial: 15 time:     0.0017 sec
3f:  8: avg time:      0.002 (sec), rate:      1.566 iters: 11

  67x1 GraphBLAS float vector, sparse by col:
  PR, 67 entries

    (0,0)    0.0233754
    (1,0)    0.0139228
    (2,0)    0.0123471
    (3,0)    0.0145696
    (4,0)    0.014201
    (5,0)    0.0100776
    (6,0)    0.0128739
    (7,0)    0.0143955
    (8,0)    0.0110162
    (9,0)    0.0110455
    (10,0)    0.0119336
    (11,0)    0.00723155
    (12,0)    0.0188687
    (13,0)    0.0141571
    (14,0)    0.0174838
    (15,0)    0.0170369
    (16,0)    0.0120391
    (17,0)    0.0219961
    (18,0)    0.0195227
    (19,0)    0.0394481
    (20,0)    0.0111962
    (21,0)    0.00901421
    (22,0)    0.0140042
    (23,0)    0.0122487
    (24,0)    0.0153409
    (25,0)    0.0135281
    (26,0)    0.0158792
    (27,0)    0.0149652
    (28,0)    0.0144109
    (29,0)    0.0137657
    ...
