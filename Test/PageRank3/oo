MKL version: 202101
threads to test:  8 4
matrix: ../BinRead/west0067.grb
[.grb]
Reading binary file: ../BinRead/west0067.grb
 [ GxB_Matrix_import_CSR 0.00238 sec ]
 [ GxB_set 0.00142 sec ]
 [ GrB_apply (shallow-op) generic 0.0216 sec ]
 [ GxB_set (transpose) 0.0101 sec ]
 [ GrB_Matrix_nvals 0.000502 sec ]
 [ GrB_Matrix_dup 0.00233 sec ]
original # of edges: 294
 [ GrB_reduce 0.00755 sec ]
 [ GrB_reduce 0.00839 sec ]
 [ GrB_Vector_nvals 0.000177 sec ]
 [ GrB_Vector_nvals 1.71e-06 sec ]
 [ GrB_reduce 0.000112 sec ]
 [ GrB_Vector_nvals 1.62e-06 sec ]
 [ GrB_Vector_dup 0.000302 sec ]
 [ GxB_Vector_export 0.000664 sec ]

==========input graph: nodes: 67 edges: 294
diag entries added: 0
 [ GrB_Matrix_nvals 1.69e-06 sec ]
read time: 0.0923001 sec
# of trials: 2
chunk: 65536

Method 3f: with MKL: 0
 [ GrB_assign (C empty) Method 21: (C dense) = scalar 0.0125 sec ]
 [ GrB_Vector_dup 2.36e-05 sec ]
 [ GrB_assign (C dense) Method 22: (C dense) += scalar 0.00574 sec ]
 [ GxB_mxv_optimize 0.000329 sec ]
 [ GrB_eWiseMult (A dense) (B dense) dense C=A+B 0.00688 sec ]
 [ GrB_assign (C empty) Method 21: (C dense) = scalar 8.47e-05 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 0.0143 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 0.164 sec ]
 [ GrB_apply (inplace-op) 0.00214 sec ]
 [ GrB_reduce 0.00368 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 0.00063 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 0.000325 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 0.000124 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 0.00266 sec ]
 [ GrB_apply (inplace-op) 3.19e-05 sec ]
 [ GrB_reduce 1.65e-05 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 5.05e-05 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 4.87e-05 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 0.000102 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.7e-05 sec ]
 [ GrB_apply (inplace-op) 2.61e-05 sec ]
 [ GrB_reduce 1.47e-05 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.86e-05 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 4.57e-05 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 0.0001 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.48e-05 sec ]
 [ GrB_apply (inplace-op) 2.56e-05 sec ]
 [ GrB_reduce 1.45e-05 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.72e-05 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 4.66e-05 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 9.72e-05 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.42e-05 sec ]
 [ GrB_apply (inplace-op) 2.79e-05 sec ]
 [ GrB_reduce 1.44e-05 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.73e-05 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 4.47e-05 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 9.8e-05 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.38e-05 sec ]
 [ GrB_apply (inplace-op) 2.54e-05 sec ]
 [ GrB_reduce 1.45e-05 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.86e-05 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 4.47e-05 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 9.76e-05 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.31e-05 sec ]
 [ GrB_apply (inplace-op) 2.53e-05 sec ]
 [ GrB_reduce 1.45e-05 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.65e-05 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 4.62e-05 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 9.7e-05 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.4e-05 sec ]
 [ GrB_apply (inplace-op) 2.68e-05 sec ]
 [ GrB_reduce 1.44e-05 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.65e-05 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 4.5e-05 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 9.89e-05 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.34e-05 sec ]
 [ GrB_apply (inplace-op) 2.53e-05 sec ]
 [ GrB_reduce 1.44e-05 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.82e-05 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 4.5e-05 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 9.84e-05 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.42e-05 sec ]
 [ GrB_apply (inplace-op) 2.54e-05 sec ]
 [ GrB_reduce 1.43e-05 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 4.61e-05 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 5.92e-05 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place 9.66e-05 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 5.41e-05 sec ]
 [ GrB_apply (inplace-op) 2.71e-05 sec ]
 [ GrB_reduce 1.42e-05 sec ]
 [ GxB_mxv_optimize_free info 0
iters 11
warmup (3f):      0.227 (threads: 8) MKL: 0

Method 3f: with MKL: 1
 [ GrB_assign (C empty) Method 21: (C dense) = scalar 9.24e-05 sec ]
 [ GrB_Vector_dup 2.78e-05 sec ]
 [ GrB_assign (C dense) Method 22: (C dense) += scalar 5.31e-05 sec ]
 [ GxB_mxv_optimize 0.0418 sec ]
 [ GrB_eWiseMult (A dense) (B dense) dense C=A+B 0.000104 sec ]
 [ GrB_assign (C empty) Method 21: (C dense) = scalar 9.87e-05 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place (MKL mxv time: 0.0892978) (cblas_saxpy) 0.0974 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 0.000292 sec ]
 [ GrB_apply (inplace-op) 0.0019 sec ]
 [ GrB_reduce 2.36e-05 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 0.0017 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 0.000177 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place (MKL mxv time: 0.00298253) (cblas_saxpy) 0.00352 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 0.000201 sec ]
 [ GrB_apply (inplace-op) 0.000219 sec ]
 [ GrB_reduce 2.09e-05 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 0.00195 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 0.000176 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place (MKL mxv time: 0.000278002) (cblas_saxpy) 0.000604 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 0.000215 sec ]
 [ GrB_apply (inplace-op) 0.000136 sec ]
 [ GrB_reduce 1.71e-05 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 0.000276 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 0.00206 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place (MKL mxv time: 0.00193802) (cblas_saxpy) 0.00796 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 0.000297 sec ]
 [ GrB_apply (inplace-op) 0.000115 sec ]
 [ GrB_reduce 2.01e-05 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 0.00575 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 0.000198 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place (MKL mxv time: 0.0017217) (cblas_saxpy) 0.00216 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 0.00022 sec ]
 [ GrB_apply (inplace-op) 0.000134 sec ]
 [ GrB_reduce 2.12e-05 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 0.00232 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 0.0112 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place (MKL mxv time: 0.00214847) (cblas_saxpy) 0.00246 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 0.000296 sec ]
 [ GrB_apply (inplace-op) 0.00243 sec ]
 [ GrB_reduce 2.2e-05 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 0.00238 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 0.000293 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place (MKL mxv time: 0.00192683) (cblas_saxpy) 0.00224 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 0.00024 sec ]
 [ GrB_apply (inplace-op) 0.000109 sec ]
 [ GrB_reduce 1.84e-05 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 0.00219 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 0.00237 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place (MKL mxv time: 0.000141653) (cblas_saxpy) 0.00049 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 0.000219 sec ]
 [ GrB_apply (inplace-op) 0.00159 sec ]
 [ GrB_reduce 2.1e-05 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 0.00957 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 0.000203 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place (MKL mxv time: 0.00017945) (cblas_saxpy) 0.000493 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 0.000315 sec ]
 [ GrB_apply (inplace-op) 0.000256 sec ]
 [ GrB_reduce 2.04e-05 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 0.000179 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 0.00218 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place (MKL mxv time: 0.00180182) (cblas_saxpy) 0.00204 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 0.000141 sec ]
 [ GrB_apply (inplace-op) 0.000248 sec ]
 [ GrB_reduce 1.62e-05 sec ]
 [ GrB_eWiseMult (C dense) (A dense) (B dense) dense C=A+B 0.000199 sec ]
 [ GrB_assign (C dense) Method 21: (C dense) = scalar 0.00172 sec ]
 [ GrB_mxv C=A'*B, dot_product dense, C+=A'*B in place (MKL mxv time: 0.00462269) (cblas_saxpy) 0.00554 sec ]
 [ GrB_assign (C dense) Method 23: (C dense) += Z (Z dense) (cblas_saxpy) 0.000381 sec ]
 [ GrB_apply (inplace-op) 0.00187 sec ]
 [ GrB_reduce 2.11e-05 sec ]
 [ GxB_mxv_optimize_free info 0
iters 11
warmup (3f):      0.262 (threads: 8) MKL: 1

Method 3f: with MKL: 0

--------------------------- nthreads:  8
trial:  0 time:     0.0113 sec
trial:  1 time:     0.0193 sec
3f:  8: avg time:      0.015 (sec), rate:      0.211 iters: 11

--------------------------- nthreads:  4
trial:  0 time:     0.0059 sec
trial:  1 time:     0.0125 sec
3f:  4: avg time:      0.009 (sec), rate:      0.352 iters: 11

  67x1 GraphBLAS float vector, sparse by col:
  PR, 67 entries

    (0,0)    0.0233754
    (1,0)    0.0139228
    (2,0)    0.0123471
    (3,0)    0.0145696
    (4,0)    0.014201
    (5,0)    0.0100776
    (6,0)    0.0128739
    (7,0)    0.0143955
    (8,0)    0.0110162
    (9,0)    0.0110455
    (10,0)    0.0119336
    (11,0)    0.00723155
    (12,0)    0.0188687
    (13,0)    0.0141571
    (14,0)    0.0174838
    (15,0)    0.0170369
    (16,0)    0.0120391
    (17,0)    0.0219961
    (18,0)    0.0195227
    (19,0)    0.0394481
    (20,0)    0.0111962
    (21,0)    0.00901421
    (22,0)    0.0140042
    (23,0)    0.0122487
    (24,0)    0.0153409
    (25,0)    0.0135281
    (26,0)    0.0158792
    (27,0)    0.0149652
    (28,0)    0.0144109
    (29,0)    0.0137657
    ...

Method 3f: with MKL: 1

--------------------------- nthreads:  8
trial:  0 time:     0.0338 sec
trial:  1 time:     0.0189 sec
3f:  8: avg time:      0.026 (sec), rate:      0.123 iters: 11

--------------------------- nthreads:  4
trial:  0 time:     0.0120 sec
trial:  1 time:     0.0134 sec
3f:  4: avg time:      0.013 (sec), rate:      0.254 iters: 11

  67x1 GraphBLAS float vector, sparse by col:
  PR, 67 entries

    (0,0)    0.0233754
    (1,0)    0.0139228
    (2,0)    0.0123471
    (3,0)    0.0145696
    (4,0)    0.014201
    (5,0)    0.0100776
    (6,0)    0.0128739
    (7,0)    0.0143955
    (8,0)    0.0110162
    (9,0)    0.0110455
    (10,0)    0.0119336
    (11,0)    0.00723155
    (12,0)    0.0188687
    (13,0)    0.0141571
    (14,0)    0.0174838
    (15,0)    0.0170369
    (16,0)    0.0120391
    (17,0)    0.0219961
    (18,0)    0.0195227
    (19,0)    0.0394481
    (20,0)    0.0111962
    (21,0)    0.00901421
    (22,0)    0.0140042
    (23,0)    0.0122487
    (24,0)    0.0153409
    (25,0)    0.0135281
    (26,0)    0.0158792
    (27,0)    0.0149652
    (28,0)    0.0144109
    (29,0)    0.0137657
    ...
