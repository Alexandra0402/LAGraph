Script started on Wed 05 Feb 2020 09:11:23 AM CST
Intel Suite:
Copyright (C) 2009-2019 Intel Corporation. All rights reserved.
Intel(R) VTune(TM) Amplifier 2019 (build 591499)
[0;36mhypersparse $[0m 
[0;36mhypersparse $[0m date
Wed Feb  5 09:11:26 CST 2020
[0;36mhypersparse $[0m ./[K[Kcat[K[K[K
[0;36mhypersparse $[0m 
[0;36mhypersparse $[0m cat do_kron 
#!/bin/sh

./build/gap_tc_test ~/DIMACS10/kron_g500-logn16/kron_g500-logn16.mtx
./build/gap_tc_test ~/DIMACS10/kron_g500-logn17/kron_g500-logn17.mtx
./build/gap_tc_test ~/DIMACS10/kron_g500-logn18/kron_g500-logn18.mtx
./build/gap_tc_test ~/DIMACS10/kron_g500-logn19/kron_g500-logn19.mtx
./build/gap_tc_test ~/DIMACS10/kron_g500-logn20/kron_g500-logn20.mtx
./build/gap_tc_test ~/DIMACS10/kron_g500-logn21/kron_g500-logn21.mtx
./build/gap_tc_test ~/GAP/GAP-kron/GAP-kron.grb

[0;36mhypersparse $[0m ./dr[Ko_kron 
SuiteSparse:GraphBLAS Feb 3, 2020 (DRAFT26)
# of trials: 1
threads to test:  40
matrix: /home/faculty/davis/DIMACS10/kron_g500-logn16/kron_g500-logn16.mtx
[.mtx]
Reading Matrix Market file: /home/faculty/davis/DIMACS10/kron_g500-logn16/kron_g500-logn16.mtx

read A time:           1.405512 sec
process A time:        0.116004 sec
# of nodes: 65536   number of entries: 4912142
compute degree: 0.0121408 sec
# of triangles: 118811321
nthreads:  40 time:     0.288744 rate:  17.01 (SandiaDot, one trial)

Method: SandiaDot:  sum ((L*U') .* L)    sort: descending degree
nthreads:  40 time:     0.283009 rate:  17.36

Method: SandiaDot:  sum ((L*U') .* L)    sort: none
nthreads:  40 time:     0.266420 rate:  18.44

Method: SandiaDot:  sum ((L*U') .* L)    ascending degree
nthreads:  40 time:     0.277709 rate:  17.69

Method: SandiaDot2: sum ((U*L') .* U)    sort: descending degree
nthreads:  40 time:     0.294899 rate:  16.66

Method: SandiaDot2: sum ((U*L') .* U)    sort: none
nthreads:  40 time:     0.264467 rate:  18.57

Method: SandiaDot2: sum ((U*L') .* U)    ascending degree
nthreads:  40 time:     0.276805 rate:  17.75

Best method: SandiaDot2: sum ((U*L') .* U)    sort: none
nthreads:  40 time:     0.264467 rate:  18.57
SuiteSparse:GraphBLAS Feb 3, 2020 (DRAFT26)
# of trials: 1
threads to test:  40
matrix: /home/faculty/davis/DIMACS10/kron_g500-logn17/kron_g500-logn17.mtx
[.mtx]
Reading Matrix Market file: /home/faculty/davis/DIMACS10/kron_g500-logn17/kron_g500-logn17.mtx

read A time:           2.906727 sec
process A time:        0.236855 sec
# of nodes: 131072   number of entries: 10227970
compute degree: 0.0213238 sec
# of triangles: 287593439
nthreads:  40 time:     0.739008 rate:  13.84 (SandiaDot, one trial)

Method: SandiaDot:  sum ((L*U') .* L)    sort: descending degree
nthreads:  40 time:     0.700072 rate:  14.61

Method: SandiaDot:  sum ((L*U') .* L)    sort: none
nthreads:  40 time:     0.736173 rate:  13.89

Method: SandiaDot:  sum ((L*U') .* L)    ascending degree
nthreads:  40 time:     0.711333 rate:  14.38

Method: SandiaDot2: sum ((U*L') .* U)    sort: descending degree
nthreads:  40 time:     0.648663 rate:  15.77

Method: SandiaDot2: sum ((U*L') .* U)    sort: none
nthreads:  40 time:     0.703548 rate:  14.54

Method: SandiaDot2: sum ((U*L') .* U)    ascending degree
nthreads:  40 time:     0.697708 rate:  14.66

Best method: SandiaDot2: sum ((U*L') .* U)    sort: descending degree
nthreads:  40 time:     0.648663 rate:  15.77
SuiteSparse:GraphBLAS Feb 3, 2020 (DRAFT26)
# of trials: 1
threads to test:  40
matrix: /home/faculty/davis/DIMACS10/kron_g500-logn18/kron_g500-logn18.mtx
[.mtx]
Reading Matrix Market file: /home/faculty/davis/DIMACS10/kron_g500-logn18/kron_g500-logn18.mtx

read A time:           6.093211 sec
process A time:        0.506034 sec
# of nodes: 262144   number of entries: 21165372
compute degree: 0.0401283 sec
# of triangles: 687677667
nthreads:  40 time:     1.920010 rate:  11.02 (SandiaDot, one trial)

Method: SandiaDot:  sum ((L*U') .* L)    sort: descending degree
nthreads:  40 time:     1.871552 rate:  11.31

Method: SandiaDot:  sum ((L*U') .* L)    sort: none
