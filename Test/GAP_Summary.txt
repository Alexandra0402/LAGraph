--------------------------------------------------------------------------------
Feb 20. Results on plat8153, using gcc 7.4 with v3.2.0: SET 1
--------------------------------------------------------------------------------

max 32 threads, first set of results ('black box'): my1_*_plat scripts:

        #PBS -l nodes=1:ppn=2:plat8153
        #PBS -l walltime=24:00:00
        cd $PBS_O_WORKDIR
        export OMP_NUM_THREADS=32
        export KMP_AFFINITY="verbose,explicit,proclist=[0-31]"
        export GOMP_CPU_AFFINITY="0-31"
        numactl --interleave=all ./do_gap

default method for 32 threads

                kron        urand       twitter      web        road
                -----       -----       -------     ----        ----
BC GrB          37.09       48.33       15.78        8.19       62.28   
BFS GrB          3.125       2.183       1.157       1.072       7.557   
CC GrB           3.433       4.548       1.486       1.730       0.807
PR GrB          16.541      18.860      12.891       6.345       0.919
SSSP12c GrB     16.315      18.954       7.634      11.981      77.365
TC GrB         1205.67      49.83      308.54       47.80        0.321

PR: uses method 3f (pure GraphBLAS); note x4 is slightly faster but
    uses import/export (see SET2 below).
TC: uses the 'dot2' default method; note 'dot' is sometimes faster
    (see SET2 below).

--------------------------------------------------------------------------------
Feb 20. Results on plat8153, using gcc 7.4 with v3.2.0: SET 2
--------------------------------------------------------------------------------

max 64 threads, 2nd 'best effort' results, from my2_*_plat scripts.
with numactl --interleave=all, all other defaults (affinity, # threads):

        #PBS -l nodes=1:ppn=2:plat8153
        #PBS -l walltime=24:00:00
        cd $PBS_O_WORKDIR
        export OMP_NUM_THREADS=64
        numactl --interleave=all ./do_gap

                kron        urand       twitter      web        road
                -----       -----       -------     ----        ----
BC GrB          29.85       41.48       14.17       8.19       54.18  
BFS GrB          2.817       2.068       1.103      1.072       7.455  
CC GrB           3.002       3.931       1.335      1.718       0.716  
PR GrB          15.303      18.202      11.642      5.915       0.769  
SSSP12c         16.315      18.954       7.634     11.981      62.739  
TC GrB         829.292      30.222     212.248     36.653       0.345  


BC:  same as SET 1, but with 64 threads for kron, urand, web;
     32 threads for web, 16 threads for road.

BFS: same as SET 1, but with 64 threads for kron, urand, web;
     32 threads for web, 16 threads for road.

CC:  same as SET 1, but with 64 threads for all matrices

PR:  using method x4 (import/export) and 64 threads for all matrices
    (method 3f, pure GraphBLAS nearly as fast, however).  For comparison,
    all results with 64 threads:
                kron        urand       twitter      web        road
                -----       -----       -------     ----        ----
     3f,#64:    15.508      18.401      11.833      6.091       0.870
     x4,#64:    15.303      18.202      11.642      5.915       0.769  
     maybe just report 3f since it's pure GraphBLAS and only slightly
     slower?

SSSP12: same as SET1, except using 16 threads for road.

TC:  using 64 for all methods, and 'dot' method instead of the default
    'dot2' for urand, twitter, and web.  The primary difference is to
    use 64 threads, however:
                kron        urand       twitter      web        road
                -----       -----       -------     ----        ----
TC (dot) #64    837.070     30.222 *    212.248 *   36.653 *    0.355
TC (dot2)#64    829.292 *   31.356      219.430     38.040      0.345 *

