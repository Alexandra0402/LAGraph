Script started on 2020-01-08 21:38:14-0600
Copyright (C) 2009-2019 Intel Corporation. All rights reserved.
Intel(R) VTune(TM) Amplifier 2019 (build 602217)
[0;36mslash $[0m ./doi
matrix: /home/davis/indochina-2004.grb
[.grb]
Reading binary file: /home/davis/indochina-2004.grb
sources: /home/davis/indochina-sources.mtx
A is unsymmetric

========== input graph: nodes: 7414866 edges: 194109311
nthreads max 8

Trial 1 : sources: [ 6041066 6716324 941589 6772556 ]
---

Batch X3 time  1: 1:       3.4036 (sec), rate:     57.031
Batch X3 time  1: 2:       1.3934 (sec), rate:    139.302
Batch X3 time  1: 4:       0.9019 (sec), rate:    215.227
Batch X3 time  1: 8:       1.0659 (sec), rate:    182.105
---

Batch v4 time  1: 1:       4.5312 (sec), rate:     42.839
Batch v4 time  1: 2:       2.0229 (sec), rate:     95.956
Batch v4 time  1: 4:       1.2482 (sec), rate:    155.512
Batch v4 time  1: 8:       1.1945 (sec), rate:    162.504

Trial 2 : sources: [ 4688856 723248 2065025 4055049 ]
---

Batch X3 time  1: 1:       5.8850 (sec), rate:     32.984
Batch X3 time  1: 2:       3.8618 (sec), rate:     50.264
Batch X3 time  1: 4:       2.0445 (sec), rate:     94.941
Batch X3 time  1: 8:       1.8704 (sec), rate:    103.781
---

Batch v4 time  1: 1:       7.8189 (sec), rate:     24.826
Batch v4 time  1: 2:       4.7951 (sec), rate:     40.480
Batch v4 time  1: 4:       2.6251 (sec), rate:     73.944
Batch v4 time  1: 8:       2.1797 (sec), rate:     89.053

Trial 3 : sources: [ 7099777 7154510 1168678 7196804 ]
---

Batch X3 time  1: 1:      11.0709 (sec), rate:     17.533
Batch X3 time  1: 2:       8.2285 (sec), rate:     23.590
Batch X3 time  1: 4:       4.9119 (sec), rate:     39.518
Batch X3 time  1: 8:       3.8836 (sec), rate:     49.982
---

Batch v4 time  1: 1:      14.7598 (sec), rate:     13.151
Batch v4 time  1: 2:      10.0668 (sec), rate:     19.282
Batch v4 time  1: 4:       6.2828 (sec), rate:     30.895
Batch v4 time  1: 8:       4.7565 (sec), rate:     40.809

Trial 4 : sources: [ 7097253 3598989 5933961 1052066 ]
---

Batch X3 time  1: 1:       9.0047 (sec), rate:     21.556
Batch X3 time  1: 2:       6.1252 (sec), rate:     31.690
Batch X3 time  1: 4:       3.7674 (sec), rate:     51.523
Batch X3 time  1: 8:       3.2027 (sec), rate:     60.609
---

Batch v4 time  1: 1:      11.9002 (sec), rate:     16.311
Batch v4 time  1: 2:       7.5542 (sec), rate:     25.696
Batch v4 time  1: 4:       4.6167 (sec), rate:     42.045
Batch v4 time  1: 8:       3.8891 (sec), rate:     49.912

Trial 5 : sources: [ 3127296 6790040 5874096 7114489 ]
---

Batch X3 time  1: 1:       6.2120 (sec), rate:     31.247
Batch X3 time  1: 2:       4.0089 (sec), rate:     48.419
Batch X3 time  1: 4:       2.0242 (sec), rate:     95.895
Batch X3 time  1: 8:       2.0110 (sec), rate:     96.524
---

Batch v4 time  1: 1:       8.0703 (sec), rate:     24.052
Batch v4 time  1: 2:       5.0276 (sec), rate:     38.609
Batch v4 time  1: 4:       2.6644 (sec), rate:     72.852
Batch v4 time  1: 8:       2.5620 (sec), rate:     75.765

Trial 6 : sources: [ 4862216 264796 6296161 6925413 ]
---

Batch X3 time  1: 1:       6.2489 (sec), rate:     31.063
Batch X3 time  1: 2:       4.0781 (sec), rate:     47.598
Batch X3 time  1: 4:       2.0552 (sec), rate:     94.447
Batch X3 time  1: 8:       2.1062 (sec), rate:     92.161
---

Batch v4 time  1: 1:       8.1297 (sec), rate:     23.877
Batch v4 time  1: 2:       4.9502 (sec), rate:     39.212
Batch v4 time  1: 4:       2.7742 (sec), rate:     69.968
Batch v4 time  1: 8:       2.5833 (sec), rate:     75.141

Trial 7 : sources: [ 5032713 5618522 5510208 2908300 ]
---

Batch X3 time  1: 1:       6.2424 (sec), rate:     31.095
Batch X3 time  1: 2:       4.0576 (sec), rate:     47.839
Batch X3 time  1: 4:       2.0158 (sec), rate:     96.295
Batch X3 time  1: 8:       2.0305 (sec), rate:     95.598
---

Batch v4 time  1: 1:       8.1441 (sec), rate:     23.834
Batch v4 time  1: 2:       5.0537 (sec), rate:     38.409
Batch v4 time  1: 4:       2.6802 (sec), rate:     72.422
Batch v4 time  1: 8:       2.5804 (sec), rate:     75.224

Trial 8 : sources: [ 4860262 1269321 5235215 236035 ]
---

Batch X3 time  1: 1:       5.9287 (sec), rate:     32.741
Batch X3 time  1: 2:       3.9402 (sec), rate:     49.264
Batch X3 time  1: 4:       1.9939 (sec), rate:     97.352
Batch X3 time  1: 8:       1.9387 (sec), rate:    100.125
---

Batch v4 time  1: 1:       7.8903 (sec), rate:     24.601
Batch v4 time  1: 2:       4.7581 (sec), rate:     40.795
Batch v4 time  1: 4:       2.5978 (sec), rate:     74.720
Batch v4 time  1: 8:       2.4538 (sec), rate:     79.105

Trial 9 : sources: [ 2053337 342353 720215 6105800 ]
---

Batch X3 time  1: 1:       6.1034 (sec), rate:     31.803
Batch X3 time  1: 2:       3.8554 (sec), rate:     50.347
Batch X3 time  1: 4:       2.0457 (sec), rate:     94.888
Batch X3 time  1: 8:       2.1461 (sec), rate:     90.449
---

Batch v4 time  1: 1:       8.0040 (sec), rate:     24.251
Batch v4 time  1: 2:       4.8276 (sec), rate:     40.208
Batch v4 time  1: 4:       2.7089 (sec), rate:     71.656
Batch v4 time  1: 8:       2.9058 (sec), rate:     66.801

Trial 10 : sources: [ 5152036 2351238 7045733 255411 ]
---

Batch X3 time  1: 1:       6.1846 (sec), rate:     31.386
Batch X3 time  1: 2:       4.0153 (sec), rate:     48.343
Batch X3 time  1: 4:       1.9595 (sec), rate:     99.060
Batch X3 time  1: 8:       1.9803 (sec), rate:     98.020
---

Batch v4 time  1: 1:       8.0897 (sec), rate:     23.995
Batch v4 time  1: 2:       4.9864 (sec), rate:     38.928
Batch v4 time  1: 4:       2.6197 (sec), rate:     74.097
Batch v4 time  1: 8:       2.5516 (sec), rate:     76.074

Trial 11 : sources: [ 3253213 2829189 5676172 5896266 ]
---

Batch X3 time  1: 1:       5.9888 (sec), rate:     32.412
Batch X3 time  1: 2:       3.8098 (sec), rate:     50.950
Batch X3 time  1: 4:       1.7119 (sec), rate:    113.388
Batch X3 time  1: 8:       1.8821 (sec), rate:    103.134
---

Batch v4 time  1: 1:       7.9441 (sec), rate:     24.434
Batch v4 time  1: 2:       4.7781 (sec), rate:     40.624
Batch v4 time  1: 4:       2.3316 (sec), rate:     83.252
Batch v4 time  1: 8:       2.4266 (sec), rate:     79.991

Trial 12 : sources: [ 1385627 3631515 3303941 4792293 ]
---

Batch X3 time  1: 1:       3.4354 (sec), rate:     56.503
Batch X3 time  1: 2:       1.2857 (sec), rate:    150.981
Batch X3 time  1: 4:       0.8313 (sec), rate:    233.497
Batch X3 time  1: 8:       1.0829 (sec), rate:    179.255
---

Batch v4 time  1: 1:       4.5282 (sec), rate:     42.867
Batch v4 time  1: 2:       1.9208 (sec), rate:    101.057
Batch v4 time  1: 4:       1.2126 (sec), rate:    160.074
Batch v4 time  1: 8:       1.2883 (sec), rate:    150.666

Trial 13 : sources: [ 5259811 5595863 2046675 5039869 ]
---

Batch X3 time  1: 1:       6.8003 (sec), rate:     28.544
Batch X3 time  1: 2:       5.4202 (sec), rate:     35.812
Batch X3 time  1: 4:       2.1907 (sec), rate:     88.606
Batch X3 time  1: 8:       2.4293 (sec), rate:     79.904
---

Batch v4 time  1: 1:      10.0524 (sec), rate:     19.310
Batch v4 time  1: 2:       6.4560 (sec), rate:     30.067
Batch v4 time  1: 4:       4.0218 (sec), rate:     48.264
Batch v4 time  1: 8:       2.7875 (sec), rate:     69.637

Trial 14 : sources: [ 4857429 1205735 882345 3695275 ]
---

Batch X3 time  1: 1:       6.5268 (sec), rate:     29.741
Batch X3 time  1: 2:       4.3449 (sec), rate:     44.675
Batch X3 time  1: 4:       1.7942 (sec), rate:    108.186
Batch X3 time  1: 8:       2.7617 (sec), rate:     70.285
---

Batch v4 time  1: 1:       8.6298 (sec), rate:     22.493
Batch v4 time  1: 2:       5.1096 (sec), rate:     37.989
Batch v4 time  1: 4:       2.6833 (sec), rate:     72.340
Batch v4 time  1: 8:       4.5801 (sec), rate:     42.381

Trial 15 : sources: [ 7116319 2523895 4339648 1659522 ]
---

Batch X3 time  1: 1:      13.1963 (sec), rate:     14.709
Batch X3 time  1: 2:       8.7526 (sec), rate:     22.177
Batch X3 time  1: 4:       6.2248 (sec), rate:     31.183
Batch X3 time  1: 8:       6.7555 (sec), rate:     28.734
---

Batch v4 time  1: 1:      16.3526 (sec), rate:     11.870
Batch v4 time  1: 2:      10.2545 (sec), rate:     18.929
Batch v4 time  1: 4:       6.7389 (sec), rate:     28.804
Batch v4 time  1: 8:       5.1825 (sec), rate:     37.455

Trial 16 : sources: [ 5570499 1891480 3751572 5183516 ]
---

Batch X3 time  1: 1:       3.6178 (sec), rate:     53.654
Batch X3 time  1: 2:       1.3905 (sec), rate:    139.594
Batch X3 time  1: 4:       1.2183 (sec), rate:    159.323
Batch X3 time  1: 8:       1.3409 (sec), rate:    144.763
---

Batch v4 time  1: 1:       4.7941 (sec), rate:     40.490
Batch v4 time  1: 2:       2.0488 (sec), rate:     94.744
Batch v4 time  1: 4:       1.3336 (sec), rate:    145.548
Batch v4 time  1: 8:       2.5964 (sec), rate:     74.760

ntrials: 16

Ave (BatchX3)  1: 1:      6.616 sec, rate     29.341
Ave (BatchX3)  1: 2:      4.286 sec, rate     45.294
Ave (BatchX3)  1: 4:      2.356 sec, rate     82.400
Ave (BatchX3)  1: 8:      2.405 sec, rate     80.695


Ave (Batch4)   1: 1:      8.727 sec, rate     22.241
Ave (Batch4)   1: 2:      5.288 sec, rate     36.706
Ave (Batch4)   1: 4:      3.071 sec, rate     63.202
Ave (Batch4)   1: 8:      2.907 sec, rate     66.764
./build/bc_gap_test: all tests passed
[0;36mslash $[0m dir ~/
total 4805380
      4 [0m[01;32mAldenMath[0m/                            12 matlab_crash_dump.28076-1
      4 axb_max_times_fp32.c                  12 matlab_crash_dump.28921-1
      4 axb_plus_times_fp32.c                  4 [01;32mMusic[0m/
      4 [01;32mbackslash[0m/                            72 myhash2.c
      4 Backslash_user_mailing_list.csv        4 [01;32mNotesArtStudio[0m/
      4 [01;32mbin[0m/                                   4 [01;32mPictures[0m/
      4 [01;32mcodes[0m/                                 4 [01;32mPublic[0m/
      4 [01;32mDesktop[0m/                           40172 roadNet-CA.mtx
      4 [01;32mDocuments[0m/                             4 roadNet-CA_sources.mtx
      4 [01;32mDownloads[0m/                             4 [01;32msnap[0m/
      4 [01;32mDropbox[0m/                               4 [01;32msparse[0m/
      4 [01;32mGAP[0m/                                   4 [01;32mssget[0m/
      8 GB_splat.c                             4 [01;32msystem[0m/
      4 [01;32mGraphBLAS-3.1.2[0m/                       4 [01;32mTAMU[0m/
      4 [01;32mgunk[0m/                                  4 [01;32mtexmf[0m/
1763976 indochina-2004.grb                     0 [01;36mTODO.txt[0m@
3000856 indochina-2004.mtx                     4 [01;32mUhlmann[0m/
      4 indochina-sources.mtx                  4 u.mtx
      4 [01;32mintel[0m/                                 4 [01;32mVideos[0m/
      4 java.log.13307                       120 x.c
     12 matlab_crash_dump.21894-1              4 [01;32mzombie[0m/
     12 matlab_crash_dump.27523-1
[0;36mslash $[0m bu[K[K./build/bc_gap_test ~/roadNet-CA.mtx ~/roadNet-CA_sources.mtx 
matrix: /home/davis/roadNet-CA.mtx
[.mtx]
Reading Matrix Market file: /home/davis/roadNet-CA.mtx
sources: /home/davis/roadNet-CA_sources.mtx
A is symmetric

========== input graph: nodes: 1971281 edges: 5533214
nthreads max 8

Trial 1 : sources: [ 1606049 1785569 250326 1800517 ]
---

Batch X3 time  1: 1:       5.5666 (sec), rate:      0.994
Batch X3 time  1: 2:       3.7471 (sec), rate:      1.477
Batch X3 time  1: 4:       3.0087 (sec), rate:      1.839
Batch X3 time  1: 8:      10.4032 (sec), rate:      0.532
---

Batch v4 time  1: 1:       8.6109 (sec), rate:      0.643
Batch v4 time  1: 2:       5.5125 (sec), rate:      1.004
Batch v4 time  1: 4:       4.1937 (sec), rate:      1.319
Batch v4 time  1: 8:       9.0838 (sec), rate:      0.609

Trial 2 : sources: [ 1246555 192279 548996 1078053 ]
---

Batch X3 time  1: 1:       5.5047 (sec), rate:      1.005
Batch X3 time  1: 2:       3.7566 (sec), rate:      1.473
Batch X3 time  1: 4:       3.5093 (sec), rate:      1.577
Batch X3 time  1: 8:      12.4847 (sec), rate:      0.443
---

Batch v4 time  1: 1:      11.7914 (sec), rate:      0.469
Batch v4 time  1: 2:       6.1772 (sec), rate:      0.896
Batch v4 time  1: 4:       4.8571 (sec), rate:      1.139
Batch v4 time  1: 8:       9.9154 (sec), rate:      0.558

Trial 3 : sources: [ 1887507 1902057 310698 1913300 ]
---

Batch X3 time  1: 1:       5.8425 (sec), rate:      0.947
Batch X3 time  1: 2:       3.9270 (sec), rate:      1.409
Batch X3 time  1: 4:       3.5303 (sec), rate:      1.567
Batch X3 time  1: 8:      11.2174 (sec), rate:      0.493
---

Batch v4 time  1: 1:       8.8551 (sec), rate:      0.625
Batch v4 time  1: 2:       5.6265 (sec), rate:      0.983
Batch v4 time  1: 4:       4.7780 (sec), rate:      1.158
Batch v4 time  1: 8:       9.8672 (sec), rate:      0.561

Trial 4 : sources: [ 1886833 956805 1577566 279695 ]
---

^C
[0;36mslash $[0m vi *gap*c
[?1000h[?2004h[?1049h[22;0;0t[?1h=[?2004h[1;79r[?12h[?12l[27m[23m[29m[m[97m[40m[H[2J[?25l[79;1H"bc_gap_test.c" 566L, 18040C[2;1H▽[6n[2;1H  [1;1H[>c]10;?]11;?[1;1H[96m//------------------------------------------------------------------------------[2;1H// bc_gap_test: betweenness centrality for the GAP benchmark
//------------------------------------------------------------------------------[5;1H/*
    LAGraph:  graph algorithms based on GraphBLAS

    Copyright 2019 LAGraph Contributors.

    (see Contributors.txt for a full list of Contributors; see
    ContributionInstructions.txt for information on how you can Contribute to
    this project).

    All Rights Reserved.

    NO WARRANTY. THIS MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. THE LAGRAPH
    CONTRIBUTORS MAKE NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
    AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR
    PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF
    THE MATERIAL. THE CONTRIBUTORS DO NOT MAKE ANY WARRANTY OF ANY KIND WITH
    RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.

    Released under a BSD license, please see the LICENSE file distributed with
    this Software or contact permission@sei.cmu.edu for full terms.

    Created, in part, with funding and support from the United States
    Government.  (see Acknowledgments.txt file).

    This program includes and/or can make use of certain third party source
    code, object code, documentation and other files ("Third Party Software").
    See LICENSE file for more details.

*/

//------------------------------------------------------------------------------[37;1H// Contributed by Scott Kolodziej and Tim Davis, Texas A&M University

// usage:
// bc_gap_test matrixfile.mtx sourcenodes.mtx
// in is the Matrix Market file, out is the level set.[m[97m[40m

[95m#include [m[97m[40m[91m"bc_test.h"[m[97m[40m

[95m#define LAGRAPH_FREE_ALL            \
{                                   \
    GrB_free (&A);                  \
    GrB_free (&AT);                 \
    GrB_free (&Abool);              \
    GrB_free (&v);                  \
    GrB_free (&v_brandes);          \
    GrB_free (&v_batch);            \
    GrB_free (&v_batch4);           \
    GrB_free (&SourceNodes) ;       \
}[m[97m[40m

[92mint[m[97m[40m main ([92mint[m[97m[40m argc, [92mchar[m[97m[40m **argv)
{
    GrB_Info info;
    [92muint64_t[m[97m[40m seed = [92m1[m[97m[40m;[62;5HGrB_Matrix A = [92mNULL[m[97m[40m;
    GrB_Matrix AT = [92mNULL[m[97m[40m;
    GrB_Matrix Abool = [92mNULL[m[97m[40m;
    GrB_Vector v = [92mNULL[m[97m[40m;
    GrB_Vector v_brandes = [92mNULL[m[97m[40m;
    GrB_Vector v_batch = [92mNULL[m[97m[40m;
    GrB_Vector v_batch4 = [92mNULL[m[97m[40m;
    GrB_Matrix SourceNodes = [92mNULL[m[97m[40m ;[71;5H[92mbool[m[97m[40m tests_pass = [92mtrue[m[97m[40m;[73;5HLAGRAPH_OK (LAGraph_init ());
    [96m// GxB_set (GxB_NTHREADS, 1) ;
[m[97m[40m    [96m// GxB_set (GxB_CHUNK, 1) ;[77;5H// Start the timer[m[97m[40m
    [92mdouble[m[97m[40m tic [[92m2[m[97m[40m];[79;63H1,1[11CTop[1;1H[?25hP+q436f\P+q6b75\P+q6b64\P+q6b72\P+q6b6c\P+q2332\P+q2334\P+q2569\P+q2a37\P+q6b31\[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[?25l[79;1H[K[79;1H/[?2004h[?25hN[?25l[?25hc[?25l[?25hh[?25l[?25h[?25l[38;5;224msearch hit BOTTOM, continuing at TOP[m[97m[40m[97m[41mE486: Pattern not found: Nch[m[97m[40m[79;29H[K[79;63H1,1[11CTop[1;1H[?25h[?25l[79;1H[K[79;1H/[?2004h[?25h [?25l[61C1,1[11CTop[1;1H[?25h[?25l[79;63H[K[79;1H/[?2004h[?25hn[?25l[?25hc[?25l[?25hh[?25l[?25h[?25l[2;54H[4m[30m[103mnch[m[97m[40m[79;63H2,54[10CTop[2;54H[?25h[?25l[27m[23m[29m[m[97m[40m[H[2J[1;1H[96m            fclose (f) ;[m[97m[40m
[95m            #endif[m[97m[40m[3;9H}[5;9HGrB_free (&v_brandes) ;[6;9HGrB_free (&v_batch) ;[7;9HGrB_free (&v_batch4) ;[9;9H[96m// HACK: just do the first batch[10;9H// break ;[m[97m[40m
    }[13;5H[96m//--------------------------------------------------------------------------[14;5H// free all workspace and finish
[m[97m[40m    [96m//--------------------------------------------------------------------------[m[97m[40m[17;5Hprintf ([91m"[m[97m[40m[91m[40m\n[m[97m[40m[91mntrials: [m[97m[40m[91m[40m%d\n[m[97m[40m[91m"[m[97m[40m, ntrials) ;
    [92mif[m[97m[40m (total_time_1 > [92m0[m[97m[40m)
    {[20;9Hprintf ([91m"Average time per trial (Brandes): [m[97m[40m[91m[40m%g[m[97m[40m[91m sec[m[97m[40m[91m[40m\n[m[97m[40m[91m"[m[97m[40m,[21;13Htotal_time_1 / ntrials);
    }[24;5H[92mif[m[97m[40m (total_time_x3 [[92m1[m[97m[40m] > [92m0[m[97m[40m)
    {[26;9H[92mfor[m[97m[40m ([92mint[m[97m[40m c = [92m1[m[97m[40m ; c <= [4m[30m[103mnch[m[97m[40munks ; c++)[27;9H{[28;13Hprintf ([91m"[m[97m[40m[91m[40m\n[m[97m[40m[91m"[m[97m[40m) ;[29;13H[92mfor[m[97m[40m ([92mint[m[97m[40m t = [92m1[m[97m[40m ; t <= nt ; t++)[30;13H{[31;17H[92mif[m[97m[40m (Nthreads [t] > nthreads_max) [92mcontinue[m[97m[40m ;[32;17H[92mdouble[m[97m[40m t2 = total_time_x3 [c][t] / ntrials ;[33;17Hprintf ([91m"Ave (BatchX3) [m[97m[40m[91m[40m%2d[m[97m[40m[91m:[m[97m[40m[91m[40m%2d[m[97m[40m[91m: [m[97m[40m[91m[40m%10.3f[m[97m[40m[91m sec, rate [m[97m[40m[91m[40m%10.3f\n[m[97m[40m[91m"[m[97m[40m,[34;21Hc, Nthreads [t], t2, [92m1e-6[m[97m[40m*(([92mdouble[m[97m[40m) nvals) / t2) ;[35;13H}[36;9H}
    }[39;5Hprintf ([91m"[m[97m[40m[91m[40m\n[m[97m[40m[91m"[m[97m[40m) ;[41;5H[92mif[m[97m[40m (total_time_x3 [[92m1[m[97m[40m] > [92m0[m[97m[40m)
    {[43;9H[92mfor[m[97m[40m ([92mint[m[97m[40m c = [92m1[m[97m[40m ; c <= [4m[30m[103mnch[m[97m[40munks ; c++)[44;9H{[45;13Hprintf ([91m"[m[97m[40m[91m[40m\n[m[97m[40m[91m"[m[97m[40m) ;[46;13H[92mfor[m[97m[40m ([92mint[m[97m[40m t = [92m1[m[97m[40m ; t <= nt ; t++)[47;13H{[48;17H[92mif[m[97m[40m (Nthreads [t] > nthreads_max) [92mcontinue[m[97m[40m ;[49;17H[92mdouble[m[97m[40m t2 = total_time_4 [c][t] / ntrials ;[50;17Hprintf ([91m"Ave (Batch4)  [m[97m[40m[91m[40m%2d[m[97m[40m[91m:[m[97m[40m[91m[40m%2d[m[97m[40m[91m: [m[97m[40m[91m[40m%10.3f[m[97m[40m[91m sec, rate [m[97m[40m[91m[40m%10.3f\n[m[97m[40m[91m"[m[97m[40m,[51;21Hc, Nthreads [t], t2, [92m1e-6[m[97m[40m*(([92mdouble[m[97m[40m) nvals) / t2) ;[52;13H}[53;9H}
    }[56;5H[96m/*

    printf ("Average time per trial: batch, pushpull:   %g sec\n",
        total_timing [0] / ntrials);
    printf ("Average time per trial: batch, allpush :   %g sec\n",
        total_timing [1] / ntrials);
    printf ("Average time per trial: batch, allpull :   %g sec\n",
        total_timing [2] / ntrials);
    */[m[97m[40m[66;5HLAGRAPH_FREE_ALL;
    LAGRAPH_OK (LAGraph_finalize());
    [92mif[m[97m[40m (tests_pass)
    {[70;9Hprintf([91m"[m[97m[40m[91m[40m%s[m[97m[40m[91m: all tests passed[m[97m[40m[91m[40m\n[m[97m[40m[91m"[m[97m[40m, argv [[92m0[m[97m[40m]);
    }
    [92melse[m[97m[40m
    {[74;9Hprintf([91m"[m[97m[40m[91m[40m%s[m[97m[40m[91m: TEST FAILURE[m[97m[40m[91m[40m\n[m[97m[40m[91m"[m[97m[40m, argv [[92m0[m[97m[40m]);
    }
    [92mreturn[m[97m[40m (GrB_SUCCESS);
}[79;63H566,0-1[7CBot[78;1H[?25h[?25l[27m[23m[29m[m[97m[40m[H[2J[1;1H[96m                GrB_PLUS_FP64, v_brandes, v, GrB_NULL));
            GrB_free (&v) ;
        }

        // GxB_print (v_brandes, 2) ;

        // Stop the timer
        double t1 = LAGraph_toc (tic) ;
        printf ("Brandes  time: %12.4f (sec), rate: %g (1e6 edges/sec)\n",
            t1, 1e-6*((double) nvals) / t1) ;

        total_time_1 += t1 ;[m[97m[40m
[95m#endif[m[97m[40m[15;9H[96m//----------------------------------------------------------------------[16;9H// check result[17;9H//----------------------------------------------------------------------[m[97m[40m[19;9H[92mif[m[97m[40m (kstart == [92m0[m[97m[40m && v_brandes != [92mNULL[m[97m[40m)[20;9H{[21;13Hprintf ([91m"max relative error: "[m[97m[40m) ;[22;13Hfflush ([92mstdout[m[97m[40m) ;[23;13H[96m// printf ("checking result ... \n") ;[m[97m[40m[24;13H[92mdouble[m[97m[40m maxerr_x3 = [92m0[m[97m[40m ;[25;13H[92mdouble[m[97m[40m maxerr_4 = [92m0[m[97m[40m ;[26;13H[92mdouble[m[97m[40m xmax = [92m0[m[97m[40m ;[27;13H[92mfor[m[97m[40m ([92mint64_t[m[97m[40m i = [92m0[m[97m[40m; i < n; i++)[28;13H{[29;17H[96m// [m[97m[40m[30m[103mTODO[m[97m[40m[96m this test is slow.  Use GrB_eWiseAdd and GrB_reduce.[m[97m[40m[31;17H[92mdouble[m[97m[40m x1 = [92m0[m[97m[40m;[32;17HLAGRAPH_OK (GrB_Vector_extractElement (&x1, v_brandes, i));[33;17Hxmax = fmax (xmax, fabs (x1)) ;[35;17H[92mdouble[m[97m[40m x2 = [92m0[m[97m[40m;[36;17H[92mif[m[97m[40m (v_batch != [92mNULL[m[97m[40m)[37;17H{[38;21HLAGRAPH_OK (GrB_Vector_extractElement (&x2, v_batch, i));[39;17H}[40;17H[92mdouble[m[97m[40m err = fabs (x1 - x2) ;[41;17Hmaxerr_x3 = fmax (maxerr_x3, err) ;[43;17H[92mdouble[m[97m[40m x4 = [92m0[m[97m[40m;[44;17H[92mif[m[97m[40m (v_batch4 != [92mNULL[m[97m[40m)[45;17H{[46;21HLAGRAPH_OK (GrB_Vector_extractElement (&x4, v_batch4, i));[47;17H}[48;17Herr = fabs (x1 - x4) ;[49;17Hmaxerr_4 = fmax (maxerr_4, err) ;[51;17H[96m// Check that both methods give the same results[52;17H/*
                bool test_result = err < tol ;
                tests_pass &= test_result;
                if (!test_result)
                {
                    printf ("%"PRId64 " %g %g %g ", i, x1, x2, err) ;
                    printf ("FAIL") ;
                    printf ("   Failure at index %"PRId64"\n", i);
                    printf ("   x1 = %g\n", x1);
                    printf ("   x2 = %g\n", x2);
                    printf ("   Error = %f\n", err) ;
                    printf ("\n") ;
                    break ;
                }
                */[m[97m[40m[67;13H}[68;13Hprintf ([91m"[m[97m[40m[91m[40m%g[m[97m[40m[91m [m[97m[40m[91m[40m%g\n[m[97m[40m[91m"[m[97m[40m, maxerr_x3 / xmax, maxerr_4 / xmax) ;[70;13H[95m#if 0[m[97m[40m
[96m            printf ("writing results to mtx files:\n") ;
            FILE *f = fopen ("brandes_result.mtx", "w") ;
            LAGraph_mmwrite ((GrB_Matrix) v_brandes, f) ;
            fclose (f) ;
            f = fopen ("batch_result.mtx", "w") ;
            LAGraph_mmwrite ((GrB_Matrix) v_batch, f) ;
            fclose (f) ;[m[97m[40m
[95m            #endif[m[97m[40m[79;63H490,13[8C84%[78;13H[?25h[?25l[27m[23m[29m[m[97m[40m[H[2J[1;9H}[3;9H[96m// GxB_print (v_batch, 2) ;[m[97m[40m[4;9Hprintf ([91m"---[m[97m[40m[91m[40m\n[m[97m[40m[91m"[m[97m[40m) ;[6;9H[96m// version 4[m[97m[40m[7;9H[92mfor[m[97m[40m ([92mint[m[97m[40m c = [92m1[m[97m[40m ; c <= [4m[30m[103mnch[m[97m[40munks ; c++)[8;9H{[9;13Hprintf ([91m"[m[97m[40m[91m[40m\n[m[97m[40m[91m"[m[97m[40m) ;[10;13HGxB_set (GxB_CHUNK, Chunks [c]) ;[11;13H[92mfor[m[97m[40m ([92mint[m[97m[40m t = [92m1[m[97m[40m ; t <= nt ; t++)[12;13H{[13;17H[92mif[m[97m[40m (Nthreads [t] > nthreads_max) [92mcontinue[m[97m[40m ;[14;17HGxB_set (GxB_NTHREADS, Nthreads [t]) ;[15;17HGrB_free (&v_batch4) ;[16;17HLAGraph_tic (tic) ;[17;17HLAGRAPH_OK (LAGraph_bc_batch4 (&v_batch4, A, AT, vertex_list,[18;21Hbatch_size)) ;[19;17H[92mdouble[m[97m[40m t2 = LAGraph_toc (tic) ;[20;17Hprintf ([91m"Batch v4 time [m[97m[40m[91m[40m%2d[m[97m[40m[91m:[m[97m[40m[91m[40m%2d[m[97m[40m[91m: [m[97m[40m[91m[40m%12.4f[m[97m[40m[91m (sec), rate: [m[97m[40m[91m[40m%10.3f\n[m[97m[40m[91m"[m[97m[40m,[21;21Hc, Nthreads [t], t2, [92m1e-6[m[97m[40m*(([92mdouble[m[97m[40m) nvals) / t2) ;[22;17Htotal_time_4 [c][t] += t2 ;[23;13H}[24;9H}[26;9H[96m// back to default[m[97m[40m[27;9HGxB_set (GxB_CHUNK, [92m4096[m[97m[40m) ;[28;9HGxB_set (GxB_NTHREADS, nthreads_max) ;[30;9H[96m// GxB_print (v_batch4, 2) ;[m[97m[40m

[95m#if 0[m[97m[40m
[96m        LAGRAPH_OK (GrB_Vector_new(&v_batch, GrB_FP64, n));
        for (int64_t k = 0 ; k < 4 ; k++)
        {
            // get the kth source node
            GrB_Index source = vertex_list [k] ;
//          LAGRAPH_OK (LAGraph_bc (&v, A, source)) ;
            LAGRAPH_OK (LAGraph_bc2 (&v, A, source)) ;
            LAGRAPH_OK (GrB_eWiseAdd(v_batch, GrB_NULL, GrB_NULL, GrB_PLUS_FP64,,[41;1H v_batch, v, GrB_NULL));
            GrB_free (&v) ;
        }[m[97m[40m
[95m#endif[m[97m[40m[46;9HGrB_Type type ;[47;9HGxB_Vector_type (&type, v_batch) ;[48;9H[92mdouble[m[97m[40m tol ;[49;9H[92mif[m[97m[40m (type == GrB_FP32)[50;9H{[51;13H[96m// printf("LAGraph batch is FP32\n");[m[97m[40m[52;13Htol = [92m0.005[m[97m[40m ;[53;9H}[54;9H[92melse[m[97m[40m[55;9H{[56;13H[96m// printf("LAGraph batch is FP64\n");[m[97m[40m[57;13Htol = [92m1e-10[m[97m[40m ;[58;9H}[60;9H[96m//----------------------------------------------------------------------[61;9H// Compute betweenness centrality from four source nodes (Brandes)[62;9H//----------------------------------------------------------------------[64;1H// comment this out to skip the test of Brandes' method[m[97m[40m
[95m#if 0[m[97m[40m
[96m        // Start the timer
        LAGraph_tic (tic);

        LAGRAPH_OK (GrB_Vector_new(&v_brandes, GrB_FP64, n));
        for (int64_t k = 0 ; k < batch_size ; k++)
        {
            // get the kth source node
            GrB_Index source = vertex_list [k] ;
            LAGRAPH_OK (LAGraph_bc (&v, A, source)) ;
//          LAGRAPH_OK (LAGraph_bc2 (&v, A, source)) ;
            LAGRAPH_OK (GrB_eWiseAdd(v_brandes, GrB_NULL, GrB_NULL,
                GrB_PLUS_FP64, v_brandes, v, GrB_NULL));
            GrB_free (&v) ;[m[97m[40m[79;63H414,13[8C68%[78;13H[?25h[?25l[27m[23m[29m[m[97m[40m[H[2J[2;5H[92mint[m[97m[40m nthreads_max = LAGraph_get_nthreads();
    printf ([91m"nthreads max [m[97m[40m[91m[40m%d\n[m[97m[40m[91m"[m[97m[40m, nthreads_max) ;
[96m//  printf("TESTING LAGraphX_bc_batch3 (saxpy in both phases, nthreads %d\n",
//      nthreads) ;[m[97m[40m[7;5H[92mint[m[97m[40m ntrials = [92m0[m[97m[40m ;
    [92mdouble[m[97m[40m total_time_1 = [92m0[m[97m[40m ;
    [92mdouble[m[97m[40m total_time_x3 [[92m16[m[97m[40m+[92m1[m[97m[40m][[92m8[m[97m[40m+[92m1[m[97m[40m] ;
    [92mdouble[m[97m[40m total_time_4  [[92m16[m[97m[40m+[92m1[m[97m[40m][[92m8[m[97m[40m+[92m1[m[97m[40m] ;
    [92mdouble[m[97m[40m total_timing [[92m3[m[97m[40m] = { [92m0[m[97m[40m, [92m0[m[97m[40m, [92m0[m[97m[40m } ;[13;5H[92mfor[m[97m[40m ([92mint[m[97m[40m c = [92m0[m[97m[40m ; c < [92m17[m[97m[40m ; c++)
    {[15;9H[92mfor[m[97m[40m ([92mint[m[97m[40m t = [92m0[m[97m[40m ; t < [92m9[m[97m[40m ; t++)[16;9H{[17;13Htotal_time_x3 [c][t] = [92m0[m[97m[40m ;[18;13Htotal_time_4  [c][t] = [92m0[m[97m[40m ;[19;9H}
    }[22;5H[92mfor[m[97m[40m ([92mint64_t[m[97m[40m kstart = [92m0[m[97m[40m ; kstart < nsource ; kstart += batch_size)
    {[25;9H[96m//----------------------------------------------------------------------[26;9H// Create batch of vertices to use in traversal[27;9H//----------------------------------------------------------------------[m[97m[40m[29;9Hntrials++ ;[30;9Hprintf ([91m"[m[97m[40m[91m[40m\n[m[97m[40m[91mTrial [m[97m[40m[91m[40m%d[m[97m[40m[91m : sources: ["[m[97m[40m, ntrials) ;[31;9HGrB_Index vertex_list [batch_size] ;[32;9H[92mfor[m[97m[40m ([92mint64_t[m[97m[40m k = [92m0[m[97m[40m ; k < batch_size ; k++)[33;9H{[34;13H[96m// get the kth source node[m[97m[40m[35;13HGrB_Index source = -[92m1[m[97m[40m ;[36;13HLAGRAPH_OK (GrB_Matrix_extractElement (&source, SourceNodes,[37;17Hk + kstart, [92m0[m[97m[40m)) ;[38;13H[96m// subtract one to convert from 1-based to 0-based[m[97m[40m[39;13Hsource-- ;[40;13Hvertex_list [k] = source  ;[41;13Hprintf ([91m" %"[m[97m[40mPRIu64, source) ;[42;9H}[43;9Hprintf ([91m" ][m[97m[40m[91m[40m\n[m[97m[40m[91m"[m[97m[40m) ;[45;9H[96m//----------------------------------------------------------------------[46;9H// Compute betweenness centrality using batch algorithm[47;9H//----------------------------------------------------------------------[49;1H//      LAGRAPH_OK (LAGraph_bc_batch  (&v_batch, A, vertex_list, batch_size)) ;
//      LAGRAPH_OK (LAGraphX_bc_batch (&v_batch, A, vertex_list, batch_size)) ;
//      LAGRAPH_OK (LAGraphX_bc_batch2 (&v_batch, A, vertex_list, batch_size)) ;[m[97m[40m[53;9Hprintf ([91m"---[m[97m[40m[91m[40m\n[m[97m[40m[91m"[m[97m[40m) ;[55;9H[96m// version X3[m[97m[40m[56;9H[92mfor[m[97m[40m ([92mint[m[97m[40m c = [92m1[m[97m[40m ; c <= [4m[30m[103mnch[m[97m[40munks ; c++)[57;9H{[58;13Hprintf ([91m"[m[97m[40m[91m[40m\n[m[97m[40m[91m"[m[97m[40m) ;[59;13HGxB_set (GxB_CHUNK, Chunks [c]) ;[60;13H[92mfor[m[97m[40m ([92mint[m[97m[40m t = [92m1[m[97m[40m ; t <= nt ; t++)[61;13H{[62;17H[92mif[m[97m[40m (Nthreads [t] > nthreads_max) [92mcontinue[m[97m[40m ;[63;17HGxB_set (GxB_NTHREADS, Nthreads [t]) ;[64;17H[92mdouble[m[97m[40m timing [[92m3[m[97m[40m] = { [92m0[m[97m[40m, [92m0[m[97m[40m, [92m0[m[97m[40m } ;[65;17HGrB_free (&v_batch) ;[66;17HLAGraph_tic (tic) ;[67;17HLAGRAPH_OK (LAGraphX_bc_batch3 (&v_batch, A, AT, vertex_list,[68;21Hbatch_size, timing)) ;[69;17H[92mdouble[m[97m[40m t2 = LAGraph_toc (tic) ;[70;9H[96m//      total_timing [0] += timing [0] ;        // pushpull[71;9H//      total_timing [1] += timing [1] ;        // allpush[72;9H//      total_timing [2] += timing [2] ;        // allpull[m[97m[40m[73;17Htotal_time_x3 [c][t] += t2 ;[74;17Hprintf ([91m"Batch X3 time [m[97m[40m[91m[40m%2d[m[97m[40m[91m:[m[97m[40m[91m[40m%2d[m[97m[40m[91m: [m[97m[40m[91m[40m%12.4f[m[97m[40m[91m (sec), rate: [m[97m[40m[91m[40m%10.3f\n[m[97m[40m[91m"[m[97m[40m,[75;21Hc, Nthreads [t], t2, [92m1e-6[m[97m[40m*(([92mdouble[m[97m[40m) nvals) / t2) ;[76;13H}[77;9H}[79;63H339,0-1[7C53%[78;1H[?25h[?25l[79;65H8,1  [77;1H[?25h[?25l[79;65H7[76;1H[?25h[?25l[79;65H6[75;1H[?25h[?25l[79;65H5[74;1H[?25h[?25l[79;65H4[73;1H[?25h[?25l[79;65H3[72;1H[?25h[?25l[79;65H2[71;1H[?25h[?25l[79;65H1[70;1H[?25h[?25l[79;65H0[69;1H[?25h[?25l[79;64H29[68;1H[?25h[?25l[79;65H8[67;1H[?25h[?25l[79;65H7[66;1H[?25h[?25l[79;65H6[65;1H[?25h[?25l[79;65H5[64;1H[?25h[?25l[79;65H4[63;1H[?25h[?25l[79;65H3[62;1H[?25h[?25l[79;65H2[61;1H[?25h[?25l[79;65H1[60;1H[?25h[?25l[79;65H0[59;1H[?25h[?25l[79;64H19[58;1H[?25h[?25l[79;65H8[57;1H[?25h[?25l[79;65H7[56;1H[?25h[?25l[79;65H6[55;1H[?25h[?25l[79;65H5,0-1[54;1H[?25h[?25l[79;65H4,1  [53;1H[?25h[?25l[79;65H3,0-1[52;1H[?25h[?25l[79;65H2,1  [51;1H[?25h[?25l[79;65H1[50;1H[?25h[?25l[79;65H0[49;1H[?25h[?25l[79;64H09,0-1[48;1H[?25h[?25l[79;65H8,1  [47;1H[?25h[?25l[79;65H7[46;1H[?25h[?25l[79;65H6[45;1H[?25h[?25l[79;65H5,0-1[44;1H[?25h[?25l[79;65H4,1  [43;1H[?25h[?25l[79;65H3[42;1H[?25h[?25l[79;65H2[41;1H[?25h[?25l[79;65H1[40;1H[?25h[?25l[79;65H0[39;1H[?25h[?25l[79;63H299[38;1H[?25h[?25l[79;65H8[37;1H[?25h[?25l[79;65H7[36;1H[?25h[?25l[79;65H6[35;1H[?25h[?25l[79;65H5[34;1H[?25h[?25l[79;65H4[33;1H[?25h[?25l[79;65H3[32;1H[?25h[?25l[79;65H2[31;1H[?25h[?25l[79;65H1[30;1H[?25h[?25l[79;65H0[29;1H[?25h[?25l[79;64H89,0-1[28;1H[?25h[?25l[79;65H8,1  [27;1H[?25h[?25l[79;65H7[26;1H[?25h[?25l[79;65H6[25;1H[?25h[?25l[79;65H5,0-1[24;1H[?25h[?25l[79;65H4,1  [23;1H[?25h[?25l[79;65H3[22;1H[?25h[?25l[79;65H2,0-1[21;1H[?25h[?25l[79;65H1,1  [20;1H[?25h[?25l[79;65H0[19;1H[?25h[?25l[79;64H79[18;1H[?25h[?25l[79;65H8[17;1H[?25h[?25l[79;65H7[16;1H[?25h[?25l[79;65H6[15;1H[?25h[?25l[79;65H5[14;1H[?25h[?25l[79;65H4[13;1H[?25h[?25l[79;65H3,0-1[12;1H[?25h[?25l[79;65H2,1  [11;1H[?25h[?25l[79;65H1[10;1H[?25h[?25l[79;65H0[9;1H[?25h[?25l[79;64H69[8;1H[?25h[?25l[79;65H8[7;1H[?25h[?25l[79;65H7,0-1[6;1H[?25h[?25l[79;65H6,1  [5;1H[?25h[?25l[79;65H5[4;1H[?25h[?25l[79;65H4[3;1H[?25h[?25l[79;65H3[2;1H[?25h[?25l[79;65H2,0-1[1;1H[?25h[?25l[1;78r[1;1H[L[1;79r[1;9Hn, nvals) ;[79;63H[K[79;63H261,1[9C53%[1;1H[?25h[?25l[1;78r[1;1H[L[1;79r[1;5Hprintf ([91m"[m[97m[40m[91m[40m\n[m[97m[40m[91m========== input graph: nodes: %"[m[97m[40mPRIu64[91m" edges: %"[m[97m[40mPRIu64[91m"[m[97m[40m[91m[40m\n[m[97m[40m[91m"[m[97m[40m,[79;63H[K[79;63H260,1[9C53%[1;1H[?25h[?25l[1;78r[1;1H[L[1;79r[79;63H[K[79;63H259,0-1[7C52%[1;1H[?25h[?25l[1;78r[1;1H[L[1;79r[1;5H[96m//--------------------------------------------------------------------------[m[97m[40m[79;63H[K[79;63H258,1[9C52%[1;1H[?25h[?25l[1;78r[1;1H[L[1;79r[1;5H[96m// Begin tests[m[97m[40m[79;63H[K[79;63H257,1[9C52%[1;1H[?25h[?25l[1;78r[1;1H[L[1;79r[1;5H[96m//--------------------------------------------------------------------------[m[97m[40m[79;63H[K[79;63H256,1[9C52%[1;1H[?25h[?25l[1;78r[1;1H[L[1;79r[79;63H[K[79;63H255,0-1[7C52%[1;1H[?25h[?25l[1;78r[1;1H[L[1;79r[1;9H[92m1[m[97m[40m, [92m2[m[97m[40m, [92m4[m[97m[40m, [92m8[m[97m[40m } ;[14C[96m// slash[m[97m[40m[79;63H[K[79;63H254,1[9C51%[1;1H[?25h[?25l[1;78r[1;1H[L[1;79r[1;5H[92mint[m[97m[40m Nthreads [[92m6[m[97m[40m+[92m1[m[97m[40m] = { [92m0[m[97m[40m,[79;63H[K[79;63H253,1[9C51%[1;1H[?25h[?25l[1;78r[1;1H[L[1;79r[1;5H[92mint[m[97m[40m nt = [92m4[m[97m[40m ;[79;63H[K[79;63H252,1[9C51%[1;1H[?25h[?25l[1;78r[1;1H[L[1;79r[79;63H[K[79;63H251,0-1[7C51%[1;1H[?25h[?25l[1;78r[1;1H[L[1;79r[1;1H[96m    */[m[97m[40m[79;63H[K[79;63H250,1[9C51%[1;1H[?25h[?25l[1;78r[1;1H[L[1;79r[1;1H[96m        1, 5, 10, 20, 40 } ;        // hypersparse[m[97m[40m[79;63H[K[79;63H249,1[9C50%[1;1H[?25h[?25l[1;78r[1;1H[L[1;79r[1;1H[96m    int Nthreads [6+1] = { 0,[m[97m[40m[79;63H[K[79;63H248,1[9C50%[1;1H[?25h[?25l[1;78r[1;1H[L[1;79r[1;1H[96m    int nt = 5 ;[m[97m[40m[79;63H[K[79;63H247,1[9C50%[1;1H[?25h[?25l[1;78r[1;1H[L[1;79r[1;5H[96m/*[m[97m[40m[79;63H[K[79;63H246,1[9C50%[1;1H[?25h[?25l[1;78r[1;1H[L[1;79r[79;63H[K[79;63H245,0-1[7C50%[1;1H[?25h[?25l[1;78r[1;1H[L[1;79r[1;1H[96m    */[m[97m[40m[79;63H[K[79;63H244,1[9C49%[1;1H[?25h[?25l[1;78r[1;1H[L[1;79r[1;1H[96m        1, 2, 4, 8, 12, 20, 40 } ;[m[97m[40m[79;63H[K[79;63H243,1[9C49%[1;1H[?25h[?25l[1;78r[1;1H[L[1;79r[1;1H[96m    int Nthreads [7+1] = { 0,[m[97m[40m[79;63H[K[79;63H242,1[9C49%[1;1H[?25h[?25l[1;78r[1;1H[L[1;79r[1;1H[96m    int nt = 7 ;[m[97m[40m[79;63H[K[79;63H241,1[9C49%[1;1H[?25h[?25l[1;78r[1;1H[L[1;79r[1;5H[96m/*[m[97m[40m[79;63H[K[79;63H240,1[9C48%[1;1H[?25h[?25l[1;78r[1;1H[L[1;79r[79;63H[K[79;63H239,0-1[7C48%[1;1H[?25h[?25l[1;78r[1;1H[L[1;79r[1;5H[4m[30m[103mnch[m[97m[40munks = [92m1[m[97m[40m ;[79;63H[K[79;63H238,1[9C48%[1;1H[?25h[?25l[1;78r[1;1H[L[1;79r[1;11H[92m4[m[97m[40m*K   } ;[79;63H[K[79;63H237,1[9C48%[1;1H[?25h[?25l[1;78r[1;1H[L[1;79r[1;5H[92mdouble[m[97m[40m Chunks [[92m1[m[97m[40m+[92m1[m[97m[40m] = { [92m0[m[97m[40m,[79;63H[K[79;63H236,1[9C48%[1;1H[?25h[?25l[1;78r[1;1H[L[1;79r[79;63H[K[79;63H235,0-1[7C47%[1;1H[?25h[?25l[1;78r[1;1H[L[1;79r[1;1H[96m    */[m[97m[40m[79;63H[K[79;63H234,1[9C47%[1;1H[?25h[?25l[1;78r[1;1H[L[1;79r[1;1H[96m    [m[97m[40m[4m[30m[103mnch[m[97m[40m[96munks = 3 ;[m[97m[40m[79;63H[K[79;63H233,1[9C47%[1;1H[?25h[?25l[1;78r[1;1H[L[1;79r[1;1H[96m          2*K,  4*K,   16*K  } ;[m[97m[40m[79;63H[K[79;63H232,1[9C47%[1;1H[?25h[?25l[1;78r[1;1H[L[1;79r[1;1H[96m    double Chunks [3+1] = { 0,[m[97m[40m[79;63H[K[79;63H231,1[9C47%[1;1H[?25h[?25l[1;78r[1;1H[L[1;79r[1;5H[96m/*[m[97m[40m[79;63H[K[79;63H230,1[9C46%[1;1H[?25h[?25l[79;65H1[2;1H[?25h[?25l[79;65H2[3;1H[?25h[?25l[79;65H3[4;1H[?25h[?25l[79;65H4[5;1H[?25h[?25l[79;65H5,0-1[6;1H[?25h[?25l[79;65H6,1  [7;1H[?25h[?25l[79;65H7[8;1H[?25h[?25l[79;65H8[9;1H[?25h[?25l[79;65H9,0-1[10;1H[?25h[?25l[79;64H40,1  [11;1H[?25h[?25l[79;65H1[12;1H[?25h[?25l[79;65H2[13;1H[?25h[?25l[79;65H3[14;1H[?25h[?25l[79;65H4[15;1H[?25h[?25l[79;65H5,0-1[16;1H[?25h[?25l[79;65H6,1  [17;1H[?25h[?25l[79;65H7[18;1H[?25h[?25l[79;65H8[19;1H[?25h[?25l[79;65H9[20;1H[?25h[?25l[79;64H50[21;1H[?25h[?25l[79;65H1,0-1[22;1H[?25h[?25l[79;65H2,1  [23;1H[?25h[?25l[79;65H3[24;1H[?25h[?25l[79;65H4[25;1H[?25h[?25l[79;65H5,0-1[26;1H[?25h[?25l[79;65H6,1  [27;1H[?25h[?25l[79;65H7[28;1H[?25h[?25l[79;65H8[29;1H[?25h[?25l[79;65H9,0-1[30;1H[?25h[?25l[79;64H60,5  [31;5H[?25h[?25l[79;64H59,0-1[30;1H[?25h[?25l[79;65H8,5  [29;5H[?25h[?25l[79;65H7[28;5H[?25h[?25l[79;65H6[27;5H[?25h[?25l[79;65H5,0-1[26;1H[?25h[?25l[79;65H4,5  [25;5H[?25h[?25l[79;65H3[24;5H[?25h[?25l[79;65H2[23;5H[?25h[?25l[79;65H1,0-1[22;1H[?25h[?25l[79;65H0,5  [21;5H[?25h[?25l[79;64H49[20;5H[?25h[?25l[79;65H8[19;5H[?25h[?25l[79;65H7[18;5H[?25h[?25l[79;65H6[17;5H[?25h[?25l[79;65H5,0-1[16;1H[?25h[?25l[79;65H4,5  [15;5H[?25h[?25l[79;65H3[14;5H[?25h[?25l[79;65H2[13;5H[?25h[?25l[79;65H1[12;5H[?25h[?25l[79;65H0[11;5H[?25h[?25l[79;64H39,0-1[10;1H[?25h[?25l[79;65H8,5  [9;5H[?25h[?25l[79;65H7[8;5H[?25h[?25l[79;65H6[7;5H[?25h[?25l[79;65H5,0-1[6;1H[?25h[?25l[79;65H4,5  [5;5H[?25h[?25l[79;65H3[4;5H[?25h[?25l[79;65H2[3;5H[?25h[?25l[79;65H1[2;5H[?25h[?25l[79;65H0[1;5H[?25h[?25l[1;78r[1;1H[L[1;79r[79;63H[K[79;63H229,0-1[7C46%[1;1H[?25h[?25l[1;78r[1;1H[L[1;79r[1;1H[96m    */[m[97m[40m[79;63H[K[79;63H228,5[9C46%[1;5H[?25h[?25l[1;78r[1;1H[L[1;79r[1;1H[96m    [m[97m[40m[4m[30m[103mnch[m[97m[40m[96munks = 8 ;[m[97m[40m[79;63H[K[79;63H227,5[9C46%[1;5H[?25h[?25l[1;78r[1;1H[L[1;79r[1;1H[96m          4*M,   8*M, 16*M,  32*M } ;[m[97m[40m[79;63H[K[79;63H226,5[9C46%[1;5H[?25h[?25l[1;78r[1;1H[L[1;79r[1;1H[96m        256*K, 512*K,    M,   2*M,[m[97m[40m[79;63H[K[79;63H225,5[9C45%[1;5H[?25h[?25l[1;78r[1;1H[L[1;79r[1;1H[96m         16*K,  32*K, 64*K, 128*K,[m[97m[40m[79;63H[K[79;63H224,5[9C45%[1;5H[?25h[?25l[79;65H5[2;5H[?25h[?25l[79;65H6[3;5H[?25h[?25l[79;65H7[4;5H[?25h[?25l[79;65H8[5;5H[?25h[?25l[79;65H9,0-1[6;1H[?25h[?25l[79;64H30,5  [7;5H[?25h[?25l[79;65H1[8;5H[?25h[?25l[79;65H2[9;5H[?25h[?25l[79;65H3[10;5H[?25h[?25l[79;65H4[11;5H[?25h[?25l[79;65H5,0-1[12;1H[?25h[?25l[79;65H6,5  [13;5H[?25h[?25l[79;65H7[14;5H[?25h[?25l[79;65H8[15;5H[?25h[?25l[79;65H9,0-1[16;1H[?25h[?25l[79;64H40,5  [17;5H[?25h[?25l[79;65H1[18;5H[?25h[?25l[79;65H2[19;5H[?25h[?25l[79;65H3[20;5H[?25h[?25l[79;65H4[21;5H[?25h[?25l[79;65H5,0-1[22;1H[?25h[?25l[79;65H6,5  [23;5H[?25h[?25l[79;65H7[24;5H[?25h[?25l[79;65H8[25;5H[?25h[?25l[79;65H9[26;5H[?25h[?25l[79;64H50[27;5H[?25h[?25l[79;65H1,0-1[28;1H[?25h[?25l[79;65H2,5  [29;5H[?25h[?25l[79;65H3[30;5H[?25h[?25l[79;65H4[31;5H[?25h[?25l[79;65H5,0-1[32;1H[?25h[?25l[79;1H[1m-- INSERT --[m[97m[40m[79;63H[K[79;63H256,1[9C45%[33;78r[33;1H[L[1;79r[79;63H[K[79;63H256,1[9C45%[33;1H[?25h[?25l[79;67H5[33;5H[?25h[?25lf[79;67H6[33;6H[?25h[?25lo[79;67H7[33;7H[?25h[?25l[92mfor[m[97m[40m[79;67H8[33;8H[?25h[79;1H[K[33;7H[?25l[79;63H256,7[9C45%[33;7H[?25h[?25l[33;78r[78;1H
[1;79r[78;13Hvertex_list [k] = source  ;[79;63H[K[79;63H256,5[9C45%[33;5H[?25h[?25l[79;65H5,0-1[32;1H[?25h[?25l[79;65H1[28;1H[?25h[?25l[79;64H45[22;1H[?25h[?25l[79;64H39[16;1H[?25h[?25l[79;65H5[12;1H[?25h[?25l[79;65H6,1  [13;1H[?25h[?25l[79;65H7[14;1H[?25h[?25l[79;65H8[15;1H[?25h[?25l[79;67H5[15;5H[?25h[?25l[79;1H[1m-- INSERT --[m[97m[40m[79;63H[K[79;63H239,5[9C45%[16;78r[16;1H[L[1;79r[79;63H[K[79;63H239,5[9C45%[16;5H[?25h[?25l[17;78r[17;1H[L[1;79r[79;63H[K[79;63H240,5[9C45%[17;5H[?25h[?25lf[79;67H6[17;6H[?25h[?25lo[79;67H7[17;7H[?25h[?25l[92mfor[m[97m[40m[79;67H8[17;8H[?25h[?25l[79;67H9[17;9H[?25h[?25l([32;26H[97m[101m{[33;20H}[51;31H{[54;5H{[56;9H{[59;9H}[m[97m[40m[79;63H[K[79;63H240,10[8C45%[17;10H[?25h[?25lc[79;68H1[17;11H[?25h[?25l[17;10H[K[79;68H0[17;10H[?25h[?25li[79;68H1[17;11H[?25h[?25ln[79;68H2[17;12H[?25h[?25l[92mint[m[97m[40m[79;68H3[17;13H[?25h[?25l[79;68H4[17;14H[?25h[?25lc[79;68H5[17;15H[?25h[?25l[79;68H6[17;16H[?25h[?25l=[79;68H7[17;17H[?25h[?25l[79;68H8[17;18H[?25h[?25l[92m0[m[97m[40m[79;68H9[17;19H[?25h[?25l[79;67H20[17;20H[?25h[?25l;[79;68H1[17;21H[?25h[?25l[79;68H2[17;22H[?25h[?25lc[79;68H3[17;23H[?25h[?25l[79;68H4[17;24H[?25h[?25l<[79;68H5[17;25H[?25h[?25l[79;68H6[17;26H[?25h[?25ln[79;68H7[17;27H[?25h[?25lc[79;68H8[17;28H[?25h[?25l[4m[30m[103mnch[m[97m[40m[79;68H9[17;29H[?25h[?25lu[79;67H30[17;30H[?25h[?25ln[79;68H1[17;31H[?25h[?25lk[79;68H2[17;32H[?25h[?25ls[79;68H3[17;33H[?25h[?25l[79;68H4[17;34H[?25h[?25l;[79;68H5[17;35H[?25h[?25l[79;68H6[17;36H[?25h[?25lk[79;68H7[17;37H[?25h[?25l[17;36H[K[79;68H6[17;36H[?25h[?25lc[79;68H7[17;37H[?25h[?25l+[79;68H8[17;38H[?25h[?25l_[79;68H9[17;39H[?25h[?25l[17;38H[K[79;68H8[17;38H[?25h[?25l+[79;68H9[17;39H[?25h[?25l)[32;26H{[33;20H}[51;31H{[54;5H{[56;9H{[59;9H}[79;63H[K[79;63H240,40[8C45%[17;40H[?25h[?25l[18;78r[18;1H[L[1;79r[79;63H[K[79;63H241,5[9C45%[18;5H[?25h[?25l{[79;63H[K[79;63H241,6[9C45%[18;6H[?25h[?25l[20;5H[K[21;1H    [96m/*[m[97m[40m[21;7H[K[22;9H[96mnt = 7 ;[m[97m[40m[22;17H[K[23;5H[96mint Nthreads [7+1] = { 0,[m[97m[40m[23;30H[K[24;5H[96m    1, 2, 4, 8, 12, 20, 40 } ;
    */[m[97m[40m[26;5H[K[27;1H    [96m/*[m[97m[40m[27;7H[K[28;9H[96mnt = 5 ;[m[97m[40m[28;17H[K[29;5H[96mint Nthreads [6+1] = { 0,[m[97m[40m[29;30H[K[30;5H[96m    1, 5, 10, 20, 40 } ;        // hypersparse
    */[m[97m[40m[32;5H[K[33;9Hnt = [92m4[m[97m[40m ;[33;18H[K[34;5H[92mint[m[97m[40m Nthreads [[92m6[m[97m[40m+[92m1[m[97m[40m] = { [92m0[m[97m[40m,[34;37H[K[35;9H[92m1[m[97m[40m, [92m2[m[97m[40m, [92m4[m[97m[40m, [92m8[m[97m[40m } ;[14C[96m// slash[m[97m[40m[36;5H[K[37;7H[96m--------------------------------------------------------------------------[38;7H Begin tests[m[97m[40m[38;19H[K[39;5H[96m//--------------------------------------------------------------------------[m[97m[40m[40;5H[K[41;5Hprintf ([91m"[m[97m[40m[91m[40m\n[m[97m[40m[91m========== input graph: nodes: %"[m[97m[40mPRIu64[91m" edges: %"[m[97m[40mPRIu64[91m"[m[97m[40m[91m[40m\n[m[97m[40m[91m"[m[97m[40m,[42;9Hn, nvals) ;[43;5H[K[44;5H[92mint[m[97m[40m nthreads_max = LAGraph_get_nthreads();[44;48H[K[45;1H    printf ([91m"nthreads max [m[97m[40m[91m[40m%d\n[m[97m[40m[91m"[m[97m[40m, nthreads_max) ;[45;49H[K[46;5H[96mprintf("TESTING LAGraphX_bc_batch3 (saxpy in both phases, nthreads %d\n",
//      nthreads) ;[m[97m[40m[48;5H[K[49;5H[92mint[m[97m[40m ntrials = [92m0[m[97m[40m ;[49;22H[K[50;23H1 = [92m0[m[97m[40m ;[50;30H[K[51;23Hx3[52;21He_4  [[92m16[m[97m[40m+[92m1[m[97m[40m][[92m8[m[97m[40m+[92m1[m[97m[40m] ;[52;39H[K[53;5H[92mdouble[m[97m[40m total_timing [[92m3[m[97m[40m] = { [92m0[m[97m[40m, [92m0[m[97m[40m, [92m0[m[97m[40m } ;[54;5H[K[55;5H[92mfor[m[97m[40m ([92mint[m[97m[40m c = [92m0[m[97m[40m ; c < [92m17[m[97m[40m ; c++)
    {[56;9H[K[57;9H[92mfor[m[97m[40m ([92mint[m[97m[40m t = [92m0[m[97m[40m ; t < [92m9[m[97m[40m ; t++)[58;9H{[58;13H[K[59;24Hx3[60;9H    total_time_4  [c][t] = [92m0[m[97m[40m ;
        }
    }[63;5H[K[64;5H[92mfor[m[97m[40m ([92mint64_t[m[97m[40m kstart = [92m0[m[97m[40m ; kstart < nsource ; kstart += batch_size)
    {[66;9H[K[67;11H[96m----------------------------------------------------------------------[68;11H Create batch of vertices to use in traversal[m[97m[40m[68;56H[K[69;9H[96m//----------------------------------------------------------------------[m[97m[40m[70;9H[K[71;9Hntrials++ ;[71;20H[K[72;9Hprintf ([91m"[m[97m[40m[91m[40m\n[m[97m[40m[91mTrial [m[97m[40m[91m[40m%d[m[97m[40m[91m : sources: ["[m[97m[40m, ntrials) ;[73;9HGrB_Index vertex_list [batch_size] ;[73;45H[K[74;9H[92mfor[m[97m[40m ([92mint64_t[m[97m[40m k = [92m0[m[97m[40m ; k < batch_size ; k++)[75;9H{[75;13H[K[76;13H[96m// get the kth source node[m[97m[40m[77;13HGrB_Index source = -[92m1[m[97m[40m ;[77;36H[K[78;13HLAGRAPH_OK (GrB_Matrix_extractElement (&source, SourceNodes,[79;63H[K[79;63H242,5[9C45%[19;5H[?25h[?25l}[79;63H[K[79;63H242,6[9C45%[19;6H[?25h[79;1H[K[19;5H[?25l[79;63H242,5[9C45%[19;5H[?25h[?25l[79;65H1[18;5H[?25h[?25l[79;1H[1m-- INSERT --[m[97m[40m[79;63H[K[79;63H242,5[9C45%[19;78r[19;1H[L[1;79r[79;63H[K[79;63H242,5[9C45%[19;5H[?25h[?25l[79;67H9[19;9H[?25h[?25lp[79;67H10[19;10H[?25h[?25lr[79;68H1[19;11H[?25h[?25li[79;68H2[19;12H[?25h[?25ln[79;68H3[19;13H[?25h[?25lt[79;68H4[19;14H[?25h[?25lf[79;68H5[19;15H[?25h[?25l[79;68H6[19;16H[?25h[?25l([79;68H7[19;17H[?25h[?25l[91m"
    }

    /*
    int nt = 7 ;
    int Nthreads [7+1] = { 0,
        1, 2, 4, 8, 12, 20, 40 } ;
    */

    /*
    int nt = 5 ;
    int Nthreads [6+1] = { 0,
        1, 5, 10, 20, 40 } ;        // hypersparse
    */

    int nt = 4 ;
    int Nthreads [6+1] = { 0,
        1, 2, 4, 8 } ;              // slash

    //--------------------------------------------------------------------------[39;1H    // Begin tests
    //--------------------------------------------------------------------------[42;1H    printf ([m[97m[40m[1C\n========== input graph: nodes: %[1C[91mPRIu64[m[97m[40m[1C edges: %[1C[91mPRIu64[m[97m[40m[1C\n[1C[91m,
        n, nvals) ;

    int nthreads_max = LAGraph_get_nthreads();
    printf ([m[97m[40m[1Cnthreads max %d\n[1C[91m, nthreads_max) ;
//  printf("[m[97m[40mTESTING LAGraphX_bc_batch3 (saxpy in both phases, nthreads %d\n[91m",
//      nthreads) ;

    int ntrials = 0 ;
    double total_time_1 = 0 ;
    double total_time_x3 [16+1][8+1] ;
    double total_time_4  [16+1][8+1] ;
    double total_timing [3] = { 0, 0, 0 } ;

    for (int c = 0 ; c < 17 ; c++)
    {
        for (int t = 0 ; t < 9 ; t++)
        {
            total_time_x3 [c][t] = 0 ;
            total_time_4  [c][t] = 0 ;
        }
    }

    for (int64_t kstart = 0 ; kstart < nsource ; kstart += batch_size)
    {

        //----------------------------------------------------------------------[69;1H        // Create batch of vertices to use in traversal
        //----------------------------------------------------------------------[72;1H        ntrials++ ;
        printf ([m[97m[40m[1C\nTrial %d : sources: [[1C[91m, ntrials) ;
        GrB_Index vertex_list [batch_size] ;
        for (int64_t k = 0 ; k < batch_size ; k++)
        {
            // get the kth source node
            GrB_Index source = -1 ;[m[97m[40m[79;63H[K[79;63H242,18[8C45%[19;18H[?25h[?25l[91m [m[97m[40m[79;68H9[19;19H[?25h[?25l[91m%[m[97m[40m[79;67H20[19;20H[?25h[?25l[91m[40m%d[m[97m[40m[79;68H1[19;21H[?25h[?25l[91m [m[97m[40m[79;68H2[19;22H[?25h[?25l[91m:[m[97m[40m[79;68H3[19;23H[?25h[?25l[19;22H[K[79;68H2[19;22H[?25h[?25l[19;21H[K[79;68H1[19;21H[?25h[?25l[91m%[m[97m[40m[19;20H[K[79;68H0[19;20H[?25h[?25l[19;19H[K[79;67H19[19;19H[?25h[?25l[91mc[m[97m[40m[79;67H20[19;20H[?25h[?25l[91mu[m[97m[40m[79;68H1[19;21H[?25h[?25l[19;20H[K[79;68H0[19;20H[?25h[?25l[91mh[m[97m[40m[79;68H1[19;21H[?25h[?25l[91mu[m[97m[40m[79;68H2[19;22H[?25h[?25l[91mn[m[97m[40m[79;68H3[19;23H[?25h[?25l[91mk[m[97m[40m[79;68H4[19;24H[?25h[?25l[91m [m[97m[40m[79;68H5[19;25H[?25h[?25l[91mt[m[97m[40m[79;68H6[19;26H[?25h[?25l[91me[m[97m[40m[79;68H7[19;27H[?25h[?25l[19;26H[K[79;68H6[19;26H[?25h[?25l[19;25H[K[79;68H5[19;25H[?25h[?25l[91mt[m[97m[40m[79;68H6[19;26H[?25h[?25l[91me[m[97m[40m[79;68H7[19;27H[?25h[?25l[91ms[m[97m[40m[79;68H8[19;28H[?25h[?25l[91mt[m[97m[40m[79;68H9[19;29H[?25h[?25l[91m [m[97m[40m[79;67H30[19;30H[?25h[?25l[91m%[m[97m[40m[79;68H1[19;31H[?25h[?25l[91m[40m%d[m[97m[40m[79;68H2[19;32H[?25h[?25l[91m:[m[97m[40m[79;68H3[19;33H[?25h[?25l[91m [m[97m[40m[79;68H4[19;34H[?25h[79;1H[K[19;33H[?25l[79;63H242,33[8C45%[19;33H[?25h[?25l[79;68H2[19;32H[?25h[?25l[79;68H1[19;31H[?25h[?25l[79;1H[1m-- INSERT --[m[97m[40m[79;63H[K[79;63H242,34[8C45%[19;34H[?25h[?25l[91ms[m[97m[40m[79;68H5[19;35H[?25h[?25l[91mz[m[97m[40m[79;68H6[19;36H[?25h[?25l[19;35H[K[79;68H5[19;35H[?25h[?25l[91mi[m[97m[40m[79;68H6[19;36H[?25h[?25l[91mz[m[97m[40m[79;68H7[19;37H[?25h[?25l[91me[m[97m[40m[79;68H8[19;38H[?25h[?25l[91m [m[97m[40m[79;68H9[19;39H[?25h[?25l[91m%[m[97m[40m[79;67H40[19;40H[?25h[?25l[91m[40m%g[m[97m[40m[79;68H1[19;41H[?25h[?25l[91m[40m\[m[97m[40m[79;68H2[19;42H[?25h[?25l[91m[40mn[m[97m[40m[79;68H3[19;43H[?25h[?25l[91m"[m[97m[40m
    }

    [96m/*
    int nt = 7 ;
    int Nthreads [7+1] = { 0,
        1, 2, 4, 8, 12, 20, 40 } ;
    */[m[97m[40m

    [96m/*
    int nt = 5 ;
    int Nthreads [6+1] = { 0,
        1, 5, 10, 20, 40 } ;        // hypersparse
    */[m[97m[40m

    [92mint[m[97m[40m nt = [92m4[m[97m[40m ;
    [92mint[m[97m[40m Nthreads [[92m6[m[97m[40m+[92m1[m[97m[40m] = { [92m0[m[97m[40m,
        [92m1[m[97m[40m, [92m2[m[97m[40m, [92m4[m[97m[40m, [92m8[m[97m[40m } ;              [96m// slash[m[97m[40m

    [96m//--------------------------------------------------------------------------[m[97m[40m[39;1H    [96m// Begin tests[m[97m[40m
    [96m//--------------------------------------------------------------------------[m[97m[40m[42;1H    printf ([1C[91m[40m\n[m[97m[40m[91m========== input graph: nodes: %[m[97m[40m[1CPRIu64[1C[91m edges: %[m[97m[40m[1CPRIu64[1C[91m[40m\n[m[97m[40m[1C,
        n, nvals) ;

    [92mint[m[97m[40m nthreads_max = LAGraph_get_nthreads();
    printf ([1C[91mnthreads max [m[97m[40m[91m[40m%d\n[m[97m[40m[1C, nthreads_max) ;
[96m//  printf("TESTING LAGraphX_bc_batch3 (saxpy in both phases, nthreads %d\n",
//      nthreads) ;[m[97m[40m

    [92mint[m[97m[40m ntrials = [92m0[m[97m[40m ;
    [92mdouble[m[97m[40m total_time_1 = [92m0[m[97m[40m ;
    [92mdouble[m[97m[40m total_time_x3 [[92m16[m[97m[40m+[92m1[m[97m[40m][[92m8[m[97m[40m+[92m1[m[97m[40m] ;
    [92mdouble[m[97m[40m total_time_4  [[92m16[m[97m[40m+[92m1[m[97m[40m][[92m8[m[97m[40m+[92m1[m[97m[40m] ;
    [92mdouble[m[97m[40m total_timing [[92m3[m[97m[40m] = { [92m0[m[97m[40m, [92m0[m[97m[40m, [92m0[m[97m[40m } ;

    [92mfor[m[97m[40m ([92mint[m[97m[40m c = [92m0[m[97m[40m ; c < [92m17[m[97m[40m ; c++)
    {
        [92mfor[m[97m[40m ([92mint[m[97m[40m t = [92m0[m[97m[40m ; t < [92m9[m[97m[40m ; t++)
        {
            total_time_x3 [c][t] = [92m0[m[97m[40m ;
            total_time_4  [c][t] = [92m0[m[97m[40m ;
        }
    }

    [92mfor[m[97m[40m ([92mint64_t[m[97m[40m kstart = [92m0[m[97m[40m ; kstart < nsource ; kstart += batch_size)
    {

        [96m//----------------------------------------------------------------------[m[97m[40m[69;1H        [96m// Create batch of vertices to use in traversal[m[97m[40m
        [96m//----------------------------------------------------------------------[m[97m[40m[72;1H        ntrials++ ;
        printf ([1C[91m[40m\n[m[97m[40m[91mTrial [m[97m[40m[91m[40m%d[m[97m[40m[91m : sources: [[m[97m[40m[1C, ntrials) ;
        GrB_Index vertex_list [batch_size] ;
        [92mfor[m[97m[40m ([92mint64_t[m[97m[40m k = [92m0[m[97m[40m ; k < batch_size ; k++)
        {
            [96m// get the kth source node[m[97m[40m
            GrB_Index source = -[92m1[m[97m[40m ;[79;63H[K[79;63H242,44[8C45%[19;44H[?25h[?25l,[79;68H5[19;45H[?25h[?25l[79;68H6[19;46H[?25h[?25lc[79;68H7[19;47H[?25h[?25l,[79;68H8[19;48H[?25h[?25l[79;68H9[19;49H[?25h[?25ln[79;67H50[19;50H[?25h[?25l[19;49H[K[79;67H49[19;49H[?25h[?25lC[79;67H50[19;50H[?25h[?25lh[79;68H1[19;51H[?25h[?25lu[79;68H2[19;52H[?25h[?25ln[79;68H3[19;53H[?25h[?25lk[79;68H4[19;54H[?25h[?25ls[79;68H5[19;55H[?25h[?25l[79;68H6[19;56H[?25h[?25l[[79;68H7[19;57H[?25h[?25lc[79;68H8[19;58H[?25h[?25l][79;68H9[19;59H[?25h[79;1H[K[19;58H[?25l[79;63H242,58[8C45%[19;58H[?25h[?25l[79;67H1 [19;1H[?25h[?25l[79;65H1[18;1H[?25h[?25l[79;65H0[17;1H[?25h[?25l[79;67H5[17;5H[?25h[?25l[79;67H9[17;9H[?25h[?25l[79;67H10[17;10H[?25h[?25l[79;68H4[17;14H[?25h[?25l[79;68H6[17;16H[?25h[?25l[79;68H8[17;18H[?25h[?25l[92m1[?25h[?25l[m[97m[40m[79;67H20[17;20H[?25h[?25l[79;68H2[17;22H[?25h[?25l[79;68H4[17;24H[?25h[?25l[79;1H[1m-- INSERT --[m[97m[40m[79;63H[K[79;63H240,25[8C45%[17;25H[?25h[?25l= [4m[30m[103mnch[m[97m[40munks ; c++)[79;68H6[17;26H[?25h[79;1H[K[17;25H[?25l[79;63H240,25[8C45%[17;25H[?25h[?25l[79;65H1,5 [18;5H[?25h[?25l[79;65H2,25[19;25H[?25h[?25l[79;1H[1m-- INSERT --[m[97m[40m[79;63H[K[79;63H242,59[8C45%[19;59H[?25h[?25l)[79;67H60[19;60H[?25h[?25l[79;68H1[19;61H[?25h[?25l;[79;68H2[19;62H[?25h[79;1H[K[19;61H[?25l[79;63H242,61[8C45%[19;61H[?25h[?25l[79;64H39,0-1[16;1H[?25h[?25l[79;1H5 lines yanked[79;63H[K[79;63H239,0-1[7C45%[16;1H[?25h[?25l[79;64H44[21;1H[?25h[?25l[79;64H50[27;1H[?25h[?25l[79;65H6[33;1H[?25h[?25l[79;64H60[37;1H[?25h[?25l[79;3Hmore lines[79;13H[K[38;5H[92mfor[m[97m[40m ([92mint[m[97m[40m c = [92m1[m[97m[40m ; c <= [4m[30m[103mnch[m[97m[40munks ; c++)[38;41H[K[39;5H{[39;6H[K[40;5H    printf ([91m" chunk test [m[97m[40m[91m[40m%d[m[97m[40m[91m: size [m[97m[40m[91m[40m%g\n[m[97m[40m[91m"[m[97m[40m, c, Chunks [c]) ;[40;62H[K[41;5H}[42;5H[K[43;5H[96m//--------------------------------------------------------------------------[44;5H// Begin tests
[m[97m[40m    [96m//--------------------------------------------------------------------------[m[97m[40m[46;5H[K[47;1H    printf ([91m"[m[97m[40m[91m[40m\n[m[97m[40m[91m========== input graph: nodes: %"[m[97m[40mPRIu64[91m" edges: %"[m[97m[40mPRIu64[91m"[m[97m[40m[91m[40m\n[m[97m[40m[91m"[m[97m[40m,[47;77H[K[48;1H        n, nvals) ;[50;11Hhreads_max = LAGraph_get_nthreads();
    printf ([91m"nthreads max [m[97m[40m[91m[40m%d\n[m[97m[40m[91m"[m[97m[40m, nthreads_max) ;
[96m//  printf("TESTING LAGraphX_bc_batch3 (saxpy in both phases, nthreads %d\n",
//      nthreads) ;[m[97m[40m[53;20H[K[54;5H[K[55;5H[92mint[m[97m[40m ntrials = [92m0[m[97m[40m ;
    [92mdouble[m[97m[40m total_time_1 = [92m0[m[97m[40m[56;31H[K[57;5H[92mdouble[m[97m[40m total_time_x3 [[92m16[m[97m[40m+[92m1[m[97m[40m][[92m8[m[97m[40m+[92m1[m[97m[40m] ;
    [92mdouble[m[97m[40m total_time_4  [[92m16[m[97m[40m+[92m1[m[97m[40m][[92m8[m[97m[40m+[92m1[m[97m[40m] ;
    [92mdouble[m[97m[40m total_timing [[92m3[m[97m[40m] = { [92m0[m[97m[40m, [92m0[m[97m[40m, [92m0[m[97m[40m } ;[60;13H[K[61;5H[92mfor[m[97m[40m ([92mint[m[97m[40m c = [92m0[m[97m[40m ; c < [92m17[m[97m[40m ; c++)[61;36H[K[62;5H{[62;9H[K[63;5H    [92mfor[m[97m[40m ([92mint[m[97m[40m t = [92m0[m[97m[40m ; t < [92m9[m[97m[40m ; t++)[64;9H{
            total_time_x3 [c][t] = [92m0[m[97m[40m ;[65;40H[K[66;5H [7Ctotal_time_4  [c][t] = [92m0[m[97m[40m ;[67;9H}
    }[68;9H[K[69;9H[K[70;5H[92mfor[m[97m[40m ([92mint64_t[m[97m[40m kstart = [92m0[m[97m[40m ; kstart < nsource ; kstart += batch_size)[70;71H[K[71;5H{[72;9H[K[73;9H[96m//----------------------------------------------------------------------[74;9H// Create batch of vertices to use in traversal[75;9H//----------------------------------------------------------------------[m[97m[40m[76;9H[K[77;9Hntrials++ ;[77;20H[K[78;9Hprintf ([91m"[m[97m[40m[91m[40m\n[m[97m[40m[91mTrial [m[97m[40m[91m[40m%d[m[97m[40m[91m : sources: ["[m[97m[40m, ntrials) ;[79;63H260,0-1[7C44%[79;63H[K[79;63H260,0-1[7C44%[37;1H[?25h[?25l[79;65H1,1  [38;1H[?25h[?25l[79;65H2[39;1H[?25h[?25l[79;67H5[39;5H[?25h[?25l[79;65H1[38;5H[?25h[?25l[79;65H0,0-1[37;1H[?25h[?25l[79;65H1,5  [38;5H[?25h[?25l[79;65H2[39;5H[?25h[?25l[79;65H3,9[40;9H[?25h[?25l[79;65H2,5[39;5H[?25h[?25l[79;65H1,9[38;9H[?25h[?25l[79;67H10[38;10H[?25h[?25l[79;68H4[38;14H[?25h[?25l[79;68H6[38;16H[?25h[?25l[79;68H4[38;14H[?25h[?25lt[?25h[?25l[79;68H6[38;16H[?25h[?25l[79;68H8[38;18H[?25h[?25l[79;67H20[38;20H[?25h[?25l[79;68H2[38;22H[?25h[?25lt[?25h[?25l[79;68H4[38;24H[?25h[?25l[79;68H7[38;27H[?25h[?25l[79;67H35[38;35H[?25h[?25l[79;67H27[38;27H[?25h[?25l[79;1H[1m-- INSERT --[m[97m[40m[79;63H[K[79;63H261,27[8C44%[38;27H ; c++)[38;35H[K[38;27H[?25h[?25ln ; c++)[79;68H8[38;28H[?25h[79;1H[K[38;27H[?25l[79;63H261,27[8C44%[38;27H[?25h[?25l[79;68H9[38;29H[?25h[?25l[79;67H31[38;31H[?25h[?25lt[?25h[?25l[79;67H29[38;29H[?25h[?25l[79;68H8[38;28H[?25h[?25l[79;1H[1m-- INSERT --[m[97m[40m[79;63H[K[79;63H261,28[8C44%[38;28H[?25h[?25lt ; t++)[79;68H9[38;29H[?25h[79;1H[K[38;28H[?25l[79;63H261,28[8C44%[38;28H[?25h[?25l[79;65H2,5 [39;5H[?25h[?25l[79;65H3,28[40;28H[?25h[?25l[79;68H5[40;25H[?25h[?25l[79;67H19[40;19H[?25h[?25l[79;67H25[40;25H[?25h[?25l[79;67H49[40;49H[?25h[?25l[79;68H7[40;47H[?25h[?25l[79;68H6[40;46H[?25h[?25l[79;68H3[40;43H[?25h[?25l[79;68H2[40;42H[?25h[?25l[79;68H1[40;41H[?25h[?25l[79;68H0[40;40H[?25h[?25l[79;67H39[40;39H[?25h[?25l[79;68H4[40;34H[?25h[?25l[79;68H2[40;32H[?25h[?25l[79;68H1[40;31H[?25h[?25l[79;68H0[40;30H[?25h[?25l[79;67H25[40;25H[?25h[?25l[79;67H19[40;19H[?25h[?25l[79;68H6[40;16H[?25h[?25l[79;68H9[40;19H[?25h[?25l[79;1H[1m-- INSERT --[m[97m[40m[79;63H[K[79;63H263,19[8C44%[40;19H[91m test[m[97m[40m[1C[91m[40m%d[m[97m[40m[91m: size[m[97m[40m[1C[91m[40m%g\n[m[97m[40m[91m"[m[97m[40m, c, Chunks [c]) ;[40;57H[K[40;19H[?25h[?25l[91mt test [m[97m[40m[91m[40m%d[m[97m[40m[91m: size [m[97m[40m[91m[40m%g\n[m[97m[40m[91m"[m[97m[40m, c, Chunks [c]) ;[79;67H20[40;20H[?25h[?25l[91mr test [m[97m[40m[91m[40m%d[m[97m[40m[91m: size [m[97m[40m[91m[40m%g\n[m[97m[40m[91m"[m[97m[40m, c, Chunks [c]) ;[79;68H1[40;21H[?25h[?25l[91mh test [m[97m[40m[91m[40m%d[m[97m[40m[91m: size [m[97m[40m[91m[40m%g\n[m[97m[40m[91m"[m[97m[40m, c, Chunks [c]) ;[79;68H2[40;22H[?25h[?25l[91mr test [m[97m[40m[91m[40m%d[m[97m[40m[91m: size [m[97m[40m[91m[40m%g\n[m[97m[40m[91m"[m[97m[40m, c, Chunks [c]) ;[79;68H3[40;23H[?25h[?25l[91me test [m[97m[40m[91m[40m%d[m[97m[40m[91m: size [m[97m[40m[91m[40m%g\n[m[97m[40m[91m"[m[97m[40m, c, Chunks [c]) ;[79;68H4[40;24H[?25h[?25l[91ma test [m[97m[40m[91m[40m%d[m[97m[40m[91m: size [m[97m[40m[91m[40m%g\n[m[97m[40m[91m"[m[97m[40m, c, Chunks [c]) ;[79;68H5[40;25H[?25h[?25l[91md test [m[97m[40m[91m[40m%d[m[97m[40m[91m: size [m[97m[40m[91m[40m%g\n[m[97m[40m[91m"[m[97m[40m, c, Chunks [c]) ;[79;68H6[40;26H[?25h[79;1H[K[40;25H[?25l[79;63H263,25[8C44%[40;25H[?25h[?25l[79;67H19[40;19H[?25h[?25l[79;67H20[40;20H[?25h[?25l[91mhread test [m[97m[40m[91m[40m%d[m[97m[40m[91m: size [m[97m[40m[91m[40m%g\n[m[97m[40m[91m"[m[97m[40m, c, Chunks [c]) ;[40;63H[K[40;20H[?25h[?25l[79;68H6[40;26H[?25h[?25l[79;67H31[40;31H[?25h[?25l[79;68H2[40;32H[?25h[?25l[79;68H3[40;33H[?25h[?25l[79;68H5[40;35H[?25h[?25l[79;67H40[40;40H[?25h[?25l[79;68H1[40;41H[?25h[?25l[79;68H2[40;42H[?25h[?25l[79;68H3[40;43H[?25h[?25l[79;68H4[40;44H[?25h[?25l[79;68H3[40;43H[?25h[?25l[79;68H2[40;42H[?25h[?25l[79;68H1[40;41H[?25h[?25l[79;68H0[40;40H[?25h[?25l[79;67H35[40;35H[?25h[?25l[79;68H3[40;33H[?25h[?25l[79;68H5[40;35H[?25h[?25l[91m[40m%g\n[m[97m[40m[91m"[m[97m[40m, c, Chunks [c]) ;[40;58H[K[40;35H[?25h[?25l[79;68H6[40;36H[?25h[?25l[91m[40md[?25h[?25l[m[97m[40m[79;68H7[40;37H[?25h[?25l[79;68H8[40;38H[?25h[?25l[79;68H9[40;39H[?25h[?25l[79;67H42[40;42H[?25h[?25lt[?25h[?25l[79;68H3[40;43H[?25h[?25l[79;68H5[40;45H[?25h[?25l[79;1H[1m-- INSERT --[m[97m[40m[79;63H[K[79;63H263,45[8C44%[40;45H [c]) ;[40;52H[K[40;45H[?25h[?25lN [c]) ;[79;68H6[40;46H[?25h[?25lt [c]) ;[79;68H7[40;47H[?25h[?25lh [c]) ;[79;68H8[40;48H[?25h[?25lr [c]) ;[79;68H9[40;49H[?25h[?25le [c]) ;[79;67H50[40;50H[?25h[?25la [c]) ;[79;68H1[40;51H[?25h[?25ld [c]) ;[79;68H2[40;52H[?25h[?25ls [c]) ;[79;68H3[40;53H[?25h[79;1H[K[40;52H[?25l[79;63H263,52[8C44%[40;52H[?25h[?25l[79;68H3[40;53H[?25h[?25l[79;68H4[40;54H[?25h[?25l[79;68H5[40;55H[?25h[?25lt[?25h[?25l[79;67H1 [40;1H[?25h[?25l[79;65H2[39;1H[?25h[?25l[79;65H1[38;1H[?25h[?25l[79;65H0,0-1[37;1H[?25h[?25l[79;64H59,1  [36;1H[?25h[?25l[79;65H8[35;1H[?25h[?25l[79;65H7[34;1H[?25h[?25l[79;65H6,0-1[33;1H[?25h[?25l[79;65H5,1  [32;1H[?25h[?25l[79;65H4[31;1H[?25h[?25l[79;65H3[30;1H[?25h[?25l[79;65H2[29;1H[?25h[?25l[79;65H1[28;1H[?25h[?25l[79;65H0,0-1[27;1H[?25h[?25l[79;64H49,1  [26;1H[?25h[?25l[79;65H8[25;1H[?25h[?25l[79;65H7[24;1H[?25h[?25l[79;65H6[23;1H[?25h[?25l[79;65H5[22;1H[?25h[?25l[79;65H4,0-1[21;1H[?25h[?25l[79;65H3,1  [20;1H[?25h[?25l[79;65H2[19;1H[?25h[?25l[79;65H1[18;1H[?25h[?25l[79;65H0[17;1H[?25h[?25l[79;64H39,0-1[16;1H[?25h[?25l[79;65H8,1  [15;1H[?25h[?25l[79;65H7[14;1H[?25h[?25l[79;68H9[14;19H[?25h[?25l[79;68H8[14;18H[?25h[?25l[79;68H7[14;17H[?25h[?25l[79;68H6[14;16H[?25h[?25l[79;68H5[14;15H[?25h[?25l[79;68H4[14;14H[?25h[?25l[79;1H[1m-- INSERT --[m[97m[40m[79;63H[K[79;63H237,14[8C44%[14;14H[?25h[?25l,   } ;[79;68H5[14;15H[?25h[?25l    } ;[79;68H6[14;16H[?25h[?25l[92m1[m[97m[40m   } ;[79;68H7[14;17H[?25h[?25l[92m6[m[97m[40m   } ;[79;68H8[14;18H[?25h[?25l*   } ;[79;68H9[14;19H[?25h[?25lK   } ;[79;67H20[14;20H[?25h[?25l    } ;[79;68H1[14;21H[?25h[?25l[92m6[m[97m[40m   } ;[79;68H2[14;22H[?25h[?25l[92m4[m[97m[40m   } ;[79;68H3[14;23H[?25h[?25l*   } ;[79;68H4[14;24H[?25h[?25lK   } ;[79;68H5[14;25H[?25h[79;1H[K[14;24H[?25l[79;63H237,24[8C44%[14;24H[?25h[?25l[79;68H3[14;23H[?25h[?25l[79;68H2[14;22H[?25h[?25l[79;68H1[14;21H[?25h[?25l[79;68H0[14;20H[?25h[?25l[79;1H[1m-- INSERT --[m[97m[40m[79;63H[K[79;63H237,20[8C44%[14;20H[?25h[?25l, [92m64[m[97m[40m*K   } ;[79;68H1[14;21H[?25h[79;1H[K[14;20H[?25l[79;63H237,20[8C44%[14;20H[?25h[?1006l[?1002l[?2004l[?25l[79;1H"bc_gap_test.c"[79;63H[K[79;17H576L, 18277C written
[39;49m[?2004l[?1l>[?25h[?1049l[23;0;0t[0;36mslash $[0m gmake
( cd build ; cmake  .. ; make --jobs=8 )
-- CMAKE build type:          Release
-- CMAKE C Flags release:     -O3 -DNDEBUG
-- CMAKE compiler ID:         GNU
-- CMAKE thread library:      -lpthread
-- CMAKE have pthreads:       1
-- CMAKE have Win32 pthreads: 
-- CMAKE have OpenMP:         TRUE
-- Automatic selection of synchronization method
-- Using OpenMP to synchronize user threads
-- CMAKE C flags:  -std=c11 -O -lm -Wno-pragmas  -O3 -DNDEBUG -fopenmp -DUSER_OPENMP_THREADS  -DHAVE_PTHREADS 
-- Configuring done
-- Generating done
-- Build files have been written to: /home/davis/sparse/LAGraph/Test/BetweennessCentrality/build
make[1]: Entering directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[2]: Entering directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Entering directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Entering directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Entering directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Entering directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
[35m[1mScanning dependencies of target bc_gap_test[0m
make[3]: Leaving directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Leaving directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Entering directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Leaving directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Leaving directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
[ 37%] [32mBuilding C object CMakeFiles/bc_gap_test.dir/bc_gap_test.c.o[0m
[ 37%] Built target bc_exe
[ 62%] Built target bc_test
[ 87%] Built target bc_batch_exe
[01m[K/home/davis/sparse/LAGraph/Test/BetweennessCentrality/bc_gap_test.c:[m[K In function ‘[01m[Kmain[m[K’:
[01m[K/home/davis/sparse/LAGraph/Test/BetweennessCentrality/bc_gap_test.c:237:16:[m[K [01;35m[Kwarning: [m[Kexcess elements in array initializer
           4*K, [01;35m[K16[m[K*K, 64*K   } ;
                [01;35m[K^~[m[K
[01m[K/home/davis/sparse/LAGraph/Test/BetweennessCentrality/bc_gap_test.c:237:16:[m[K [01;36m[Knote: [m[K(near initialization for ‘[01m[KChunks[m[K’)
[01m[K/home/davis/sparse/LAGraph/Test/BetweennessCentrality/bc_gap_test.c:237:22:[m[K [01;35m[Kwarning: [m[Kexcess elements in array initializer
           4*K, 16*K, [01;35m[K64[m[K*K   } ;
                      [01;35m[K^~[m[K
[01m[K/home/davis/sparse/LAGraph/Test/BetweennessCentrality/bc_gap_test.c:237:22:[m[K [01;36m[Knote: [m[K(near initialization for ‘[01m[KChunks[m[K’)
[100%] [32m[1mLinking C executable bc_gap_test[0m
make[3]: Leaving directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
[100%] Built target bc_gap_test
make[2]: Leaving directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[1]: Leaving directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
./build/bc_test < sample.mtx 2>stderr.txt
A is unsymmetric
Starting Betweenness Centrality Tests
 - nthreads: 8
 - ntrials: 1
 - Start Test: Betweenness Centrality (Brandes Algorithm)
generic generic generic generic generic generic generic generic generic generic generic  - End Test: Betweenness Centrality (Brandes Algorithm)
 - Start Test: Betweenness Centrality (Batch Algorithm)
 - End Test: Betweenness Centrality (Batch Algorithm)
 - Betweenness Centrality Numerical Results

   +-------------------------+
   | v_i | Brandes |  Batch  |
   +-------------------------+
   |     | (FP32)  |  (FP32) |
   +-------------------------+
   |   0 |    0.00 |    0.00 |
   |   1 |    0.00 |    0.00 |
   |   2 |    0.00 |    0.00 |
   |   3 |    0.00 |    0.00 |
   |   4 |    6.00 |    6.00 |
   |   5 |    1.00 |    1.00 |
   |   6 |    1.00 |    1.00 |
   |   7 |    0.00 |    0.00 |
   +-------------------------+
all tests passed
./build/bc_test < sample2.mtx 2>>stderr.txt
A is symmetric
Starting Betweenness Centrality Tests
 - nthreads: 8
 - ntrials: 1
 - Start Test: Betweenness Centrality (Brandes Algorithm)
generic generic generic generic generic generic generic generic generic generic generic generic generic generic  - End Test: Betweenness Centrality (Brandes Algorithm)
 - Start Test: Betweenness Centrality (Batch Algorithm)
 - End Test: Betweenness Centrality (Batch Algorithm)
 - Betweenness Centrality Numerical Results

   +-------------------------+
   | v_i | Brandes |  Batch  |
   +-------------------------+
   |     | (FP32)  |  (FP32) |
   +-------------------------+
   |   0 |    0.00 |    0.00 |
   |   1 |    1.00 |    1.00 |
   |   2 |    3.50 |    3.50 |
   |   3 |    0.00 |    0.00 |
   |   4 |    5.00 |    5.00 |
   |   5 |    8.50 |    8.50 |
   |   6 |    0.00 |    0.00 |
   |   7 |    0.00 |    0.00 |
   +-------------------------+
all tests passed
./build/bc_test < west0067.mtx 2>>stderr.txt
A is unsymmetric
Starting Betweenness Centrality Tests
 - nthreads: 8
 - ntrials: 1
 - Start Test: Betweenness Centrality (Brandes Algorithm)
generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic  - End Test: Betweenness Centrality (Brandes Algorithm)
 - Start Test: Betweenness Centrality (Batch Algorithm)
 - End Test: Betweenness Centrality (Batch Algorithm)
 - Betweenness Centrality Numerical Results

   +-------------------------+
   | v_i | Brandes |  Batch  |
   +-------------------------+
   |     | (FP32)  |  (FP32) |
   +-------------------------+
   |   0 |    4.65 |    4.65 |
   |   1 |    5.54 |    5.54 |
   |   2 |    1.89 |    1.89 |
   |   3 |    0.98 |    0.98 |
   |   4 |    7.29 |    7.29 |
   |   5 |    0.53 |    0.53 |
   |   6 |    1.12 |    1.12 |
   |   7 |    3.53 |    3.53 |
   |   8 |    3.45 |    3.45 |
   |   9 |    4.67 |    4.67 |
   |  10 |    2.24 |    2.24 |
   |  11 |    2.27 |    2.27 |
   |  12 |    1.24 |    1.24 |
   |  13 |    0.39 |    0.39 |
   |  14 |    0.18 |    0.18 |
   |  15 |   18.08 |   18.08 |
   |  16 |    0.20 |    0.20 |
   |  17 |    0.80 |    0.80 |
   |  18 |    0.58 |    0.58 |
   |  19 |   17.60 |   17.60 |
   |  20 |    2.11 |    2.11 |
   |  21 |    0.74 |    0.74 |
   |  22 |    0.39 |    0.39 |
   |  23 |   28.04 |   28.04 |
   |  24 |   18.51 |   18.51 |
   |  25 |    7.96 |    7.96 |
   |  26 |    7.39 |    7.39 |
   |  27 |    1.44 |    1.44 |
   |  28 |    0.68 |    0.68 |
   |  29 |   23.43 |   23.43 |
   |  30 |   23.82 |   23.82 |
   |  31 |    5.38 |    5.38 |
   |  32 |    2.22 |    2.22 |
   |  33 |    0.22 |    0.22 |
   |  34 |    0.22 |    0.22 |
   |  35 |   15.38 |   15.38 |
   |  36 |   17.76 |   17.76 |
   |  37 |    5.80 |    5.80 |
   |  38 |    2.45 |    2.45 |
   |  39 |    0.96 |    0.96 |
   |  40 |   24.64 |   24.64 |
   |  41 |    4.37 |    4.37 |
   |  42 |   12.41 |   12.41 |
   |  43 |    6.56 |    6.56 |
   |  44 |   26.51 |   26.51 |
   |  45 |    0.00 |    0.00 |
   |  46 |   12.13 |   12.13 |
   |  47 |    0.00 |    0.00 |
   |  48 |   12.61 |   12.61 |
   |  49 |    2.77 |    2.77 |
   |  50 |    0.70 |    0.70 |
   |  51 |    1.33 |    1.32 |
   |  52 |   15.48 |   15.48 |
   |  53 |    2.33 |    2.32 |
   |  54 |   30.00 |   30.00 |
   |  55 |    4.58 |    4.58 |
   |  56 |   28.11 |   28.11 |
   |  57 |    6.18 |    6.18 |
   |  58 |   15.85 |   15.85 |
   |  59 |   10.27 |   10.27 |
   |  60 |   15.11 |   15.11 |
   |  61 |    7.63 |    7.63 |
   |  62 |    9.65 |    9.65 |
   |  63 |    9.52 |    9.52 |
   |  64 |    6.41 |    6.41 |
   |  65 |    4.78 |    4.78 |
   |  66 |    5.92 |    5.92 |
   +-------------------------+
all tests passed
./build/bc_gap_test < LFAT5.mtx
matrix: from stdin
A is symmetric
 chunk test 1: size 4096
 thread test 1: 1
 thread test 2: 2
 thread test 3: 4
 thread test 4: 8

========== input graph: nodes: 14 edges: 46
nthreads max 8

Trial 1 : sources: [ 0 1 2 3 ]
---

Batch X3 time  1: 1:       0.0001 (sec), rate:      0.419
Batch X3 time  1: 2:       0.0001 (sec), rate:      0.458
Batch X3 time  1: 4:       0.0001 (sec), rate:      0.401
Batch X3 time  1: 8:       0.0125 (sec), rate:      0.004
---

Batch v4 time  1: 1:       0.0002 (sec), rate:      0.269
Batch v4 time  1: 2:       0.0001 (sec), rate:      0.417
Batch v4 time  1: 4:       0.0001 (sec), rate:      0.419
Batch v4 time  1: 8:       0.0001 (sec), rate:      0.370

ntrials: 1

Ave (BatchX3)  1: 1:      0.000 sec, rate      0.419
Ave (BatchX3)  1: 2:      0.000 sec, rate      0.458
Ave (BatchX3)  1: 4:      0.000 sec, rate      0.401
Ave (BatchX3)  1: 8:      0.013 sec, rate      0.004


Ave (Batch4)   1: 1:      0.000 sec, rate      0.269
Ave (Batch4)   1: 2:      0.000 sec, rate      0.417
Ave (Batch4)   1: 4:      0.000 sec, rate      0.419
Ave (Batch4)   1: 8:      0.000 sec, rate      0.370
./build/bc_gap_test: all tests passed
./build/bc_gap_test < west0067.mtx
matrix: from stdin
A is unsymmetric
 chunk test 1: size 4096
 thread test 1: 1
 thread test 2: 2
 thread test 3: 4
 thread test 4: 8

========== input graph: nodes: 67 edges: 294
nthreads max 8

Trial 1 : sources: [ 0 1 2 3 ]
---

Batch X3 time  1: 1:       0.0002 (sec), rate:      1.703
Batch X3 time  1: 2:       0.0001 (sec), rate:      2.038
Batch X3 time  1: 4:       0.0002 (sec), rate:      1.706
Batch X3 time  1: 8:       0.0107 (sec), rate:      0.027
---

Batch v4 time  1: 1:       0.0002 (sec), rate:      1.353
Batch v4 time  1: 2:       0.0002 (sec), rate:      1.801
Batch v4 time  1: 4:       0.0002 (sec), rate:      1.696
Batch v4 time  1: 8:       0.0002 (sec), rate:      1.479

ntrials: 1

Ave (BatchX3)  1: 1:      0.000 sec, rate      1.703
Ave (BatchX3)  1: 2:      0.000 sec, rate      2.038
Ave (BatchX3)  1: 4:      0.000 sec, rate      1.706
Ave (BatchX3)  1: 8:      0.011 sec, rate      0.027


Ave (Batch4)   1: 1:      0.000 sec, rate      1.353
Ave (Batch4)   1: 2:      0.000 sec, rate      1.801
Ave (Batch4)   1: 4:      0.000 sec, rate      1.696
Ave (Batch4)   1: 8:      0.000 sec, rate      1.479
./build/bc_gap_test: all tests passed
[0;36mslash $[0m gmake
( cd build ; cmake  .. ; make --jobs=8 )
-- CMAKE build type:          Release
-- CMAKE C Flags release:     -O3 -DNDEBUG
-- CMAKE compiler ID:         GNU
-- CMAKE thread library:      -lpthread
-- CMAKE have pthreads:       1
-- CMAKE have Win32 pthreads: 
-- CMAKE have OpenMP:         TRUE
-- Automatic selection of synchronization method
-- Using OpenMP to synchronize user threads
-- CMAKE C flags:  -std=c11 -O -lm -Wno-pragmas  -O3 -DNDEBUG -fopenmp -DUSER_OPENMP_THREADS  -DHAVE_PTHREADS 
-- Configuring done
-- Generating done
-- Build files have been written to: /home/davis/sparse/LAGraph/Test/BetweennessCentrality/build
make[1]: Entering directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[2]: Entering directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Entering directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Entering directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Entering directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Entering directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Leaving directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Leaving directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Leaving directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Leaving directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
[ 25%] Built target bc_gap_test
[ 50%] Built target bc_test
[100%] Built target bc_exe
[100%] Built target bc_batch_exe
make[2]: Leaving directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[1]: Leaving directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
./build/bc_test < sample.mtx 2>stderr.txt
A is unsymmetric
Starting Betweenness Centrality Tests
 - nthreads: 8
 - ntrials: 1
 - Start Test: Betweenness Centrality (Brandes Algorithm)
generic generic generic generic generic generic generic generic generic generic generic  - End Test: Betweenness Centrality (Brandes Algorithm)
 - Start Test: Betweenness Centrality (Batch Algorithm)
 - End Test: Betweenness Centrality (Batch Algorithm)
 - Betweenness Centrality Numerical Results

   +-------------------------+
   | v_i | Brandes |  Batch  |
   +-------------------------+
   |     | (FP32)  |  (FP32) |
   +-------------------------+
   |   0 |    0.00 |    0.00 |
   |   1 |    0.00 |    0.00 |
   |   2 |    0.00 |    0.00 |
   |   3 |    0.00 |    0.00 |
   |   4 |    6.00 |    6.00 |
   |   5 |    1.00 |    1.00 |
   |   6 |    1.00 |    1.00 |
   |   7 |    0.00 |    0.00 |
   +-------------------------+
all tests passed
./build/bc_test < sample2.mtx 2>>stderr.txt
A is symmetric
Starting Betweenness Centrality Tests
 - nthreads: 8
 - ntrials: 1
 - Start Test: Betweenness Centrality (Brandes Algorithm)
generic generic generic generic generic generic generic generic generic generic generic generic generic generic  - End Test: Betweenness Centrality (Brandes Algorithm)
 - Start Test: Betweenness Centrality (Batch Algorithm)
 - End Test: Betweenness Centrality (Batch Algorithm)
 - Betweenness Centrality Numerical Results

   +-------------------------+
   | v_i | Brandes |  Batch  |
   +-------------------------+
   |     | (FP32)  |  (FP32) |
   +-------------------------+
   |   0 |    0.00 |    0.00 |
   |   1 |    1.00 |    1.00 |
   |   2 |    3.50 |    3.50 |
   |   3 |    0.00 |    0.00 |
   |   4 |    5.00 |    5.00 |
   |   5 |    8.50 |    8.50 |
   |   6 |    0.00 |    0.00 |
   |   7 |    0.00 |    0.00 |
   +-------------------------+
all tests passed
./build/bc_test < west0067.mtx 2>>stderr.txt
A is unsymmetric
Starting Betweenness Centrality Tests
 - nthreads: 8
 - ntrials: 1
 - Start Test: Betweenness Centrality (Brandes Algorithm)
generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic  - End Test: Betweenness Centrality (Brandes Algorithm)
 - Start Test: Betweenness Centrality (Batch Algorithm)
 - End Test: Betweenness Centrality (Batch Algorithm)
 - Betweenness Centrality Numerical Results

   +-------------------------+
   | v_i | Brandes |  Batch  |
   +-------------------------+
   |     | (FP32)  |  (FP32) |
   +-------------------------+
   |   0 |    4.65 |    4.65 |
   |   1 |    5.54 |    5.54 |
   |   2 |    1.89 |    1.89 |
   |   3 |    0.98 |    0.98 |
   |   4 |    7.29 |    7.29 |
   |   5 |    0.53 |    0.53 |
   |   6 |    1.12 |    1.12 |
   |   7 |    3.53 |    3.53 |
   |   8 |    3.45 |    3.45 |
   |   9 |    4.67 |    4.67 |
   |  10 |    2.24 |    2.24 |
   |  11 |    2.27 |    2.27 |
   |  12 |    1.24 |    1.24 |
   |  13 |    0.39 |    0.39 |
   |  14 |    0.18 |    0.18 |
   |  15 |   18.08 |   18.08 |
   |  16 |    0.20 |    0.20 |
   |  17 |    0.80 |    0.80 |
   |  18 |    0.58 |    0.58 |
   |  19 |   17.60 |   17.60 |
   |  20 |    2.11 |    2.11 |
   |  21 |    0.74 |    0.74 |
   |  22 |    0.39 |    0.39 |
   |  23 |   28.04 |   28.04 |
   |  24 |   18.51 |   18.51 |
   |  25 |    7.96 |    7.96 |
   |  26 |    7.39 |    7.39 |
   |  27 |    1.44 |    1.44 |
   |  28 |    0.68 |    0.68 |
   |  29 |   23.43 |   23.43 |
   |  30 |   23.82 |   23.82 |
   |  31 |    5.38 |    5.38 |
   |  32 |    2.22 |    2.22 |
   |  33 |    0.22 |    0.22 |
   |  34 |    0.22 |    0.22 |
   |  35 |   15.38 |   15.38 |
   |  36 |   17.76 |   17.76 |
   |  37 |    5.80 |    5.80 |
   |  38 |    2.45 |    2.45 |
   |  39 |    0.96 |    0.96 |
   |  40 |   24.64 |   24.64 |
   |  41 |    4.37 |    4.37 |
   |  42 |   12.41 |   12.41 |
   |  43 |    6.56 |    6.56 |
   |  44 |   26.51 |   26.51 |
   |  45 |    0.00 |    0.00 |
   |  46 |   12.13 |   12.13 |
   |  47 |    0.00 |    0.00 |
   |  48 |   12.61 |   12.61 |
   |  49 |    2.77 |    2.77 |
   |  50 |    0.70 |    0.70 |
   |  51 |    1.33 |    1.32 |
   |  52 |   15.48 |   15.48 |
   |  53 |    2.33 |    2.32 |
   |  54 |   30.00 |   30.00 |
   |  55 |    4.58 |    4.58 |
   |  56 |   28.11 |   28.11 |
   |  57 |    6.18 |    6.18 |
   |  58 |   15.85 |   15.85 |
   |  59 |   10.27 |   10.27 |
   |  60 |   15.11 |   15.11 |
   |  61 |    7.63 |    7.63 |
   |  62 |    9.65 |    9.65 |
   |  63 |    9.52 |    9.52 |
   |  64 |    6.41 |    6.41 |
   |  65 |    4.78 |    4.78 |
   |  66 |    5.92 |    5.92 |
   +-------------------------+
all tests passed
./build/bc_gap_test < LFAT5.mtx
matrix: from stdin
A is symmetric
 chunk test 1: size 4096
 thread test 1: 1
 thread test 2: 2
 thread test 3: 4
 thread test 4: 8

========== input graph: nodes: 14 edges: 46
nthreads max 8

Trial 1 : sources: [ 0 1 2 3 ]
---

Batch X3 time  1: 1:       0.0001 (sec), rate:      0.309
Batch X3 time  1: 2:       0.0002 (sec), rate:      0.273
Batch X3 time  1: 4:       0.0001 (sec), rate:      0.338
Batch X3 time  1: 8:       0.0193 (sec), rate:      0.002
---

Batch v4 time  1: 1:       0.0005 (sec), rate:      0.085
Batch v4 time  1: 2:       0.0001 (sec), rate:      0.509
Batch v4 time  1: 4:       0.0001 (sec), rate:      0.507
Batch v4 time  1: 8:       0.0001 (sec), rate:      0.446

ntrials: 1

Ave (BatchX3)  1: 1:      0.000 sec, rate      0.309
Ave (BatchX3)  1: 2:      0.000 sec, rate      0.273
Ave (BatchX3)  1: 4:      0.000 sec, rate      0.338
Ave (BatchX3)  1: 8:      0.019 sec, rate      0.002


Ave (Batch4)   1: 1:      0.001 sec, rate      0.085
Ave (Batch4)   1: 2:      0.000 sec, rate      0.509
Ave (Batch4)   1: 4:      0.000 sec, rate      0.507
Ave (Batch4)   1: 8:      0.000 sec, rate      0.446
./build/bc_gap_test: all tests passed
./build/bc_gap_test < west0067.mtx
matrix: from stdin
A is unsymmetric
 chunk test 1: size 4096
 thread test 1: 1
 thread test 2: 2
 thread test 3: 4
 thread test 4: 8

========== input graph: nodes: 67 edges: 294
nthreads max 8

Trial 1 : sources: [ 0 1 2 3 ]
---

Batch X3 time  1: 1:       0.0001 (sec), rate:      2.120
Batch X3 time  1: 2:       0.0002 (sec), rate:      1.832
Batch X3 time  1: 4:       0.0001 (sec), rate:      2.041
Batch X3 time  1: 8:       0.0184 (sec), rate:      0.016
---

Batch v4 time  1: 1:       0.0002 (sec), rate:      1.319
Batch v4 time  1: 2:       0.0002 (sec), rate:      1.792
Batch v4 time  1: 4:       0.0002 (sec), rate:      1.710
Batch v4 time  1: 8:       0.0002 (sec), rate:      1.455

ntrials: 1

Ave (BatchX3)  1: 1:      0.000 sec, rate      2.120
Ave (BatchX3)  1: 2:      0.000 sec, rate      1.832
Ave (BatchX3)  1: 4:      0.000 sec, rate      2.041
Ave (BatchX3)  1: 8:      0.018 sec, rate      0.016


Ave (Batch4)   1: 1:      0.000 sec, rate      1.319
Ave (Batch4)   1: 2:      0.000 sec, rate      1.792
Ave (Batch4)   1: 4:      0.000 sec, rate      1.710
Ave (Batch4)   1: 8:      0.000 sec, rate      1.455
./build/bc_gap_test: all tests passed
[0;36mslash $[0m gmake
( cd build ; cmake  .. ; make --jobs=8 )
-- CMAKE build type:          Release
-- CMAKE C Flags release:     -O3 -DNDEBUG
-- CMAKE compiler ID:         GNU
-- CMAKE thread library:      -lpthread
-- CMAKE have pthreads:       1
-- CMAKE have Win32 pthreads: 
-- CMAKE have OpenMP:         TRUE
-- Automatic selection of synchronization method
-- Using OpenMP to synchronize user threads
-- CMAKE C flags:  -std=c11 -O -lm -Wno-pragmas  -O3 -DNDEBUG -fopenmp -DUSER_OPENMP_THREADS  -DHAVE_PTHREADS 
-- Configuring done
-- Generating done
-- Build files have been written to: /home/davis/sparse/LAGraph/Test/BetweennessCentrality/build
make[1]: Entering directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[2]: Entering directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Entering directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Entering directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Entering directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Entering directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Leaving directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Leaving directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Leaving directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Leaving directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
[ 50%] Built target bc_batch_exe
[ 50%] Built target bc_test
[100%] Built target bc_exe
[100%] Built target bc_gap_test
make[2]: Leaving directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[1]: Leaving directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
./build/bc_test < sample.mtx 2>stderr.txt
A is unsymmetric
Starting Betweenness Centrality Tests
 - nthreads: 8
 - ntrials: 1
 - Start Test: Betweenness Centrality (Brandes Algorithm)
generic generic generic generic generic generic generic generic generic generic generic  - End Test: Betweenness Centrality (Brandes Algorithm)
 - Start Test: Betweenness Centrality (Batch Algorithm)
 - End Test: Betweenness Centrality (Batch Algorithm)
 - Betweenness Centrality Numerical Results

   +-------------------------+
   | v_i | Brandes |  Batch  |
   +-------------------------+
   |     | (FP32)  |  (FP32) |
   +-------------------------+
   |   0 |    0.00 |    0.00 |
   |   1 |    0.00 |    0.00 |
   |   2 |    0.00 |    0.00 |
   |   3 |    0.00 |    0.00 |
   |   4 |    6.00 |    6.00 |
   |   5 |    1.00 |    1.00 |
   |   6 |    1.00 |    1.00 |
   |   7 |    0.00 |    0.00 |
   +-------------------------+
all tests passed
./build/bc_test < sample2.mtx 2>>stderr.txt
A is symmetric
Starting Betweenness Centrality Tests
 - nthreads: 8
 - ntrials: 1
 - Start Test: Betweenness Centrality (Brandes Algorithm)
generic generic generic generic generic generic generic generic generic generic generic generic generic generic  - End Test: Betweenness Centrality (Brandes Algorithm)
 - Start Test: Betweenness Centrality (Batch Algorithm)
 - End Test: Betweenness Centrality (Batch Algorithm)
 - Betweenness Centrality Numerical Results

   +-------------------------+
   | v_i | Brandes |  Batch  |
   +-------------------------+
   |     | (FP32)  |  (FP32) |
   +-------------------------+
   |   0 |    0.00 |    0.00 |
   |   1 |    1.00 |    1.00 |
   |   2 |    3.50 |    3.50 |
   |   3 |    0.00 |    0.00 |
   |   4 |    5.00 |    5.00 |
   |   5 |    8.50 |    8.50 |
   |   6 |    0.00 |    0.00 |
   |   7 |    0.00 |    0.00 |
   +-------------------------+
all tests passed
./build/bc_test < west0067.mtx 2>>stderr.txt
A is unsymmetric
Starting Betweenness Centrality Tests
 - nthreads: 8
 - ntrials: 1
 - Start Test: Betweenness Centrality (Brandes Algorithm)
generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic  - End Test: Betweenness Centrality (Brandes Algorithm)
 - Start Test: Betweenness Centrality (Batch Algorithm)
 - End Test: Betweenness Centrality (Batch Algorithm)
 - Betweenness Centrality Numerical Results

   +-------------------------+
   | v_i | Brandes |  Batch  |
   +-------------------------+
   |     | (FP32)  |  (FP32) |
   +-------------------------+
   |   0 |    4.65 |    4.65 |
   |   1 |    5.54 |    5.54 |
   |   2 |    1.89 |    1.89 |
   |   3 |    0.98 |    0.98 |
   |   4 |    7.29 |    7.29 |
   |   5 |    0.53 |    0.53 |
   |   6 |    1.12 |    1.12 |
   |   7 |    3.53 |    3.53 |
   |   8 |    3.45 |    3.45 |
   |   9 |    4.67 |    4.67 |
   |  10 |    2.24 |    2.24 |
   |  11 |    2.27 |    2.27 |
   |  12 |    1.24 |    1.24 |
   |  13 |    0.39 |    0.39 |
   |  14 |    0.18 |    0.18 |
   |  15 |   18.08 |   18.08 |
   |  16 |    0.20 |    0.20 |
   |  17 |    0.80 |    0.80 |
   |  18 |    0.58 |    0.58 |
   |  19 |   17.60 |   17.60 |
   |  20 |    2.11 |    2.11 |
   |  21 |    0.74 |    0.74 |
   |  22 |    0.39 |    0.39 |
   |  23 |   28.04 |   28.04 |
   |  24 |   18.51 |   18.51 |
   |  25 |    7.96 |    7.96 |
   |  26 |    7.39 |    7.39 |
   |  27 |    1.44 |    1.44 |
   |  28 |    0.68 |    0.68 |
   |  29 |   23.43 |   23.43 |
   |  30 |   23.82 |   23.82 |
   |  31 |    5.38 |    5.38 |
   |  32 |    2.22 |    2.22 |
   |  33 |    0.22 |    0.22 |
   |  34 |    0.22 |    0.22 |
   |  35 |   15.38 |   15.38 |
   |  36 |   17.76 |   17.76 |
   |  37 |    5.80 |    5.80 |
   |  38 |    2.45 |    2.45 |
   |  39 |    0.96 |    0.96 |
   |  40 |   24.64 |   24.64 |
   |  41 |    4.37 |    4.37 |
   |  42 |   12.41 |   12.41 |
   |  43 |    6.56 |    6.56 |
   |  44 |   26.51 |   26.51 |
   |  45 |    0.00 |    0.00 |
   |  46 |   12.13 |   12.13 |
   |  47 |    0.00 |    0.00 |
   |  48 |   12.61 |   12.61 |
   |  49 |    2.77 |    2.77 |
   |  50 |    0.70 |    0.70 |
   |  51 |    1.33 |    1.32 |
   |  52 |   15.48 |   15.48 |
   |  53 |    2.33 |    2.32 |
   |  54 |   30.00 |   30.00 |
   |  55 |    4.58 |    4.58 |
   |  56 |   28.11 |   28.11 |
   |  57 |    6.18 |    6.18 |
   |  58 |   15.85 |   15.85 |
   |  59 |   10.27 |   10.27 |
   |  60 |   15.11 |   15.11 |
   |  61 |    7.63 |    7.63 |
   |  62 |    9.65 |    9.65 |
   |  63 |    9.52 |    9.52 |
   |  64 |    6.41 |    6.41 |
   |  65 |    4.78 |    4.78 |
   |  66 |    5.92 |    5.92 |
   +-------------------------+
all tests passed
./build/bc_gap_test < LFAT5.mtx
matrix: from stdin
A is symmetric
 chunk test 1: size 4096
 thread test 1: 1
 thread test 2: 2
 thread test 3: 4
 thread test 4: 8

========== input graph: nodes: 14 edges: 46
nthreads max 8

Trial 1 : sources: [ 0 1 2 3 ]
---

Batch X3 time  1: 1:       0.0001 (sec), rate:      0.535
Batch X3 time  1: 2:       0.0001 (sec), rate:      0.475
Batch X3 time  1: 4:       0.0001 (sec), rate:      0.534
Batch X3 time  1: 8:       0.0122 (sec), rate:      0.004
---

Batch v4 time  1: 1:       0.0002 (sec), rate:      0.253
Batch v4 time  1: 2:       0.0001 (sec), rate:      0.414
Batch v4 time  1: 4:       0.0001 (sec), rate:      0.458
Batch v4 time  1: 8:       0.0001 (sec), rate:      0.407

ntrials: 1

Ave (BatchX3)  1: 1:      0.000 sec, rate      0.535
Ave (BatchX3)  1: 2:      0.000 sec, rate      0.475
Ave (BatchX3)  1: 4:      0.000 sec, rate      0.534
Ave (BatchX3)  1: 8:      0.012 sec, rate      0.004


Ave (Batch4)   1: 1:      0.000 sec, rate      0.253
Ave (Batch4)   1: 2:      0.000 sec, rate      0.414
Ave (Batch4)   1: 4:      0.000 sec, rate      0.458
Ave (Batch4)   1: 8:      0.000 sec, rate      0.407
./build/bc_gap_test: all tests passed
./build/bc_gap_test < west0067.mtx
matrix: from stdin
A is unsymmetric
 chunk test 1: size 4096
 thread test 1: 1
 thread test 2: 2
 thread test 3: 4
 thread test 4: 8

========== input graph: nodes: 67 edges: 294
nthreads max 8

Trial 1 : sources: [ 0 1 2 3 ]
---

Batch X3 time  1: 1:       0.0002 (sec), rate:      1.922
Batch X3 time  1: 2:       0.0001 (sec), rate:      2.201
Batch X3 time  1: 4:       0.0001 (sec), rate:      2.117
Batch X3 time  1: 8:       0.0223 (sec), rate:      0.013
---

Batch v4 time  1: 1:       0.0002 (sec), rate:      1.466
Batch v4 time  1: 2:       0.0002 (sec), rate:      1.823
Batch v4 time  1: 4:       0.0002 (sec), rate:      1.712
Batch v4 time  1: 8:       0.0002 (sec), rate:      1.485

ntrials: 1

Ave (BatchX3)  1: 1:      0.000 sec, rate      1.922
Ave (BatchX3)  1: 2:      0.000 sec, rate      2.201
Ave (BatchX3)  1: 4:      0.000 sec, rate      2.117
Ave (BatchX3)  1: 8:      0.022 sec, rate      0.013


Ave (Batch4)   1: 1:      0.000 sec, rate      1.466
Ave (Batch4)   1: 2:      0.000 sec, rate      1.823
Ave (Batch4)   1: 4:      0.000 sec, rate      1.712
Ave (Batch4)   1: 8:      0.000 sec, rate      1.485
./build/bc_gap_test: all tests passed
[0;36mslash $[0m !vi 
vi *gap*c 
[?1000h[?2004h[?1049h[22;0;0t[?1h=[?2004h[1;79r[?12h[?12l[27m[23m[29m[m[97m[40m[H[2J[?25l[79;1H"bc_gap_test.c" 576L, 18277C[2;1H▽[6n[2;1H  [1;1H[>c]10;?]11;?[1;1H[96m//------------------------------------------------------------------------------[2;1H// bc_gap_test: betweenness centrality for the GAP benchmark
//------------------------------------------------------------------------------[5;1H/*
    LAGraph:  graph algorithms based on GraphBLAS

    Copyright 2019 LAGraph Contributors.

    (see Contributors.txt for a full list of Contributors; see
    ContributionInstructions.txt for information on how you can Contribute to
    this project).

    All Rights Reserved.

    NO WARRANTY. THIS MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. THE LAGRAPH
    CONTRIBUTORS MAKE NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
    AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR
    PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF
    THE MATERIAL. THE CONTRIBUTORS DO NOT MAKE ANY WARRANTY OF ANY KIND WITH
    RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.

    Released under a BSD license, please see the LICENSE file distributed with
    this Software or contact permission@sei.cmu.edu for full terms.

    Created, in part, with funding and support from the United States
    Government.  (see Acknowledgments.txt file).

    This program includes and/or can make use of certain third party source
    code, object code, documentation and other files ("Third Party Software").
    See LICENSE file for more details.

*/

//------------------------------------------------------------------------------[37;1H// Contributed by Scott Kolodziej and Tim Davis, Texas A&M University

// usage:
// bc_gap_test matrixfile.mtx sourcenodes.mtx
// in is the Matrix Market file, out is the level set.[m[97m[40m

[95m#include [m[97m[40m[91m"bc_test.h"[m[97m[40m

[95m#define LAGRAPH_FREE_ALL            \
{                                   \
    GrB_free (&A);                  \
    GrB_free (&AT);                 \
    GrB_free (&Abool);              \
    GrB_free (&v);                  \
    GrB_free (&v_brandes);          \
    GrB_free (&v_batch);            \
    GrB_free (&v_batch4);           \
    GrB_free (&SourceNodes) ;       \
}[m[97m[40m

[92mint[m[97m[40m main ([92mint[m[97m[40m argc, [92mchar[m[97m[40m **argv)
{
    GrB_Info info;
    [92muint64_t[m[97m[40m seed = [92m1[m[97m[40m;[62;5HGrB_Matrix A = [92mNULL[m[97m[40m;
    GrB_Matrix AT = [92mNULL[m[97m[40m;
    GrB_Matrix Abool = [92mNULL[m[97m[40m;
    GrB_Vector v = [92mNULL[m[97m[40m;
    GrB_Vector v_brandes = [92mNULL[m[97m[40m;
    GrB_Vector v_batch = [92mNULL[m[97m[40m;
    GrB_Vector v_batch4 = [92mNULL[m[97m[40m;
    GrB_Matrix SourceNodes = [92mNULL[m[97m[40m ;[71;5H[92mbool[m[97m[40m tests_pass = [92mtrue[m[97m[40m;[73;5HLAGRAPH_OK (LAGraph_init ());
    [96m// GxB_set (GxB_NTHREADS, 1) ;
[m[97m[40m    [96m// GxB_set (GxB_CHUNK, 1) ;[77;5H// Start the timer[m[97m[40m
    [92mdouble[m[97m[40m tic [[92m2[m[97m[40m];[79;63H1,1[11CTop[1;1H[?25hP+q436f\P+q6b75\P+q6b64\P+q6b72\P+q6b6c\P+q2332\P+q2334\P+q2569\P+q2a37\P+q6b31\[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[?25l[79;1H[K[79;1H/[?2004h[?25hn[?25l[?25h[?25l[79;2H[K[79;2H[?25hN[?25l[?25hc[?25l[?25hh[?25l[?25h[?25l[38;5;224msearch hit BOTTOM, continuing at TOP[m[97m[40m[97m[41mE486: Pattern not found: Nch[m[97m[40m[79;29H[K[79;63H1,1[11CTop[1;1H[?25h[?25l[27m[23m[29m[m[97m[40m[H[2J[1;5H[96m// Start the timer[m[97m[40m
    [92mdouble[m[97m[40m tic [[92m2[m[97m[40m];
    LAGraph_tic (tic);[5;5H[96m//--------------------------------------------------------------------------[6;5H// read in a matrix from a file and convert to boolean
[m[97m[40m    [96m//--------------------------------------------------------------------------[m[97m[40m[9;5H[92mint[m[97m[40m batch_size = [92m4[m[97m[40m ;[11;5H[92mif[m[97m[40m (argc > [92m1[m[97m[40m)
    {[13;9H[96m// Usage:[14;9H//      ./bc_gap_test matrixfile.mtx sourcenodes.mtx[15;9H//      ./bc_gap_test matrixfile.grb sourcenodes.mtx[17;9H// read in the file in Matrix Market format from the input file[m[97m[40m[18;9H[92mchar[m[97m[40m *filename = argv [[92m1[m[97m[40m] ;[19;9Hprintf ([91m"matrix: [m[97m[40m[91m[40m%s\n[m[97m[40m[91m"[m[97m[40m, filename) ;[21;9H[96m// find the filename extension[m[97m[40m[22;9H[92msize_t[m[97m[40m len = strlen (filename) ;[23;9H[92mchar[m[97m[40m *ext = [92mNULL[m[97m[40m ;[24;9H[92mfor[m[97m[40m ([92mint[m[97m[40m k = len-[92m1[m[97m[40m ; k >= [92m0[m[97m[40m ; k--)[25;9H{[26;13H[92mif[m[97m[40m (filename [k] == [92m'.'[m[97m[40m)[27;13H{[28;17Hext = filename + k ;[29;17Hprintf ([91m"[[m[97m[40m[91m[40m%s[m[97m[40m[91m][m[97m[40m[91m[40m\n[m[97m[40m[91m"[m[97m[40m, ext) ;[30;17H[92mbreak[m[97m[40m ;[31;13H}[32;9H}[33;9H[92mbool[m[97m[40m is_binary = (ext != [92mNULL[m[97m[40m && strncmp (ext, [91m".grb"[m[97m[40m, [92m4[m[97m[40m) == [92m0[m[97m[40m) ;[35;9H[92mif[m[97m[40m (is_binary)[36;9H{[37;13Hprintf ([91m"Reading binary file: [m[97m[40m[91m[40m%s\n[m[97m[40m[91m"[m[97m[40m, filename) ;[38;13HLAGRAPH_OK (LAGraph_binread (&A, filename)) ;[39;9H}[40;9H[92melse[m[97m[40m[41;9H{[42;13Hprintf ([91m"Reading Matrix Market file: [m[97m[40m[91m[40m%s\n[m[97m[40m[91m"[m[97m[40m, filename) ;[43;13H[92mFILE[m[97m[40m *f = fopen (filename, [91m"r"[m[97m[40m) ;[44;13H[92mif[m[97m[40m (f == [92mNULL[m[97m[40m)[45;13H{[46;17Hprintf ([91m"Matrix file not found: [[m[97m[40m[91m[40m%s[m[97m[40m[91m][m[97m[40m[91m[40m\n[m[97m[40m[91m"[m[97m[40m, filename) ;[47;17Hexit ([92m1[m[97m[40m) ;[48;13H}[49;13HLAGRAPH_OK (LAGraph_mmread(&A, f));[50;13Hfclose (f) ;[51;9H}[53;9H[96m// read in source nodes in Matrix Market format from the input file[m[97m[40m[54;9Hfilename = argv [[92m2[m[97m[40m] ;[55;9Hprintf ([91m"sources: [m[97m[40m[91m[40m%s\n[m[97m[40m[91m"[m[97m[40m, filename) ;[56;9H[92mFILE[m[97m[40m *f = fopen (filename, [91m"r"[m[97m[40m) ;[57;9H[92mif[m[97m[40m (f == [92mNULL[m[97m[40m)[58;9H{[59;13Hprintf ([91m"Source node file not found: [[m[97m[40m[91m[40m%s[m[97m[40m[91m][m[97m[40m[91m[40m\n[m[97m[40m[91m"[m[97m[40m, filename) ;[60;13Hexit ([92m1[m[97m[40m) ;[61;9H}[62;9HLAGRAPH_OK (LAGraph_mmread (&SourceNodes, f)) ;[63;9Hfclose (f) ;[65;5H}
    [92melse[m[97m[40m
    {[69;9H[96m// Usage:  ./bc_gap_test < matrixfile.mtx[m[97m[40m[70;9Hprintf ([91m"matrix: from stdin[m[97m[40m[91m[40m\n[m[97m[40m[91m"[m[97m[40m) ;[72;9H[96m// read in the file in Matrix Market format from stdin[m[97m[40m[73;9HLAGRAPH_OK (LAGraph_mmread(&A, [92mstdin[m[97m[40m));[75;9H[96m// use nodes [1 2 3 4...] as the source nodes (in 1-based notation)[m[97m[40m[76;9HLAGRAPH_OK (GrB_Matrix_new (&SourceNodes, GrB_INT64, batch_size, [92m1[m[97m[40m)) ;[77;9H[92mfor[m[97m[40m ([92mint64_t[m[97m[40m i = [92m0[m[97m[40m ; i < batch_size ; i++)[78;9H{[79;63H77,5[10C15%[1;5H[?25h[?25l[79;63H[K[79;1H/[?2004h[?25hn[?25l[?25hc[?25l[?25hh[?25l[?25h[?25l[27m[23m[29m[m[97m[40m[H[2J[1;5HLAGRAPH_OK (GrB_Matrix_nrows(&nrows, A));
    LAGRAPH_OK (GrB_Matrix_ncols(&ncols, A));
    GrB_Index n = nrows;[5;5HGrB_Index nsource ;
    LAGRAPH_OK (GrB_Matrix_nrows(&nsource, SourceNodes));
    [92mif[m[97m[40m (nsource % batch_size != [92m0[m[97m[40m)
    {[9;9Hprintf ([91m"SourceNode size must be multiple of batch_size ([m[97m[40m[91m[40m%d[m[97m[40m[91m)[m[97m[40m[91m[40m\n[m[97m[40m[91m"[m[97m[40m,[10;13Hbatch_size) ;[11;9Hexit ([92m1[m[97m[40m) ;
    }[14;5H[92mdouble[m[97m[40m t_setup = LAGraph_toc (tic) ;
    [96m// printf ("setup time: %g sec\n", t_setup) ;[17;5H// AT = A'[m[97m[40m
    LAGraph_tic (tic);
    [92mbool[m[97m[40m A_is_symmetric ;
    LAGRAPH_OK (GrB_Matrix_new (&AT, GrB_BOOL, n, n)) ;
    LAGRAPH_OK (GrB_transpose (AT, [92mNULL[m[97m[40m, [92mNULL[m[97m[40m, A, [92mNULL[m[97m[40m)) ;
    LAGRAPH_OK (LAGraph_isequal (&A_is_symmetric, A, AT, [92mNULL[m[97m[40m)) ;
    [92mif[m[97m[40m (A_is_symmetric)
    {[25;9Hprintf ([91m"A is symmetric[m[97m[40m[91m[40m\n[m[97m[40m[91m"[m[97m[40m) ;[26;9HGrB_free (&AT) ;[27;9HAT = A ;
    }
    [92melse[m[97m[40m
    {[31;9Hprintf ([91m"A is unsymmetric[m[97m[40m[91m[40m\n[m[97m[40m[91m"[m[97m[40m) ;
    }
    [92mdouble[m[97m[40m t_transpose = LAGraph_toc (tic) ;
    [96m// printf ("transpose time: %g\n", t_transpose) ;[m[97m[40m[36;5H[95m#define K [m[97m[40m[92m1024[m[97m[40m
    [95m#define M (K*K)[m[97m[40m[39;5H[92mint[m[97m[40m [4m[30m[103mnch[m[97m[40munks ;[41;5H[96m/*
    double Chunks [16+1] = { 0,
          1*K,   2*K,  4*K,   8*K,
         16*K,  32*K, 64*K, 128*K,
        256*K, 512*K,    M,   2*M,
          4*M,   8*M, 16*M,  32*M } ;
    [m[97m[40m[4m[30m[103mnch[m[97m[40m[96munks = 8 ;
    */[50;5H/*
    double Chunks [3+1] = { 0,
          2*K,  4*K,   16*K  } ;
    [m[97m[40m[4m[30m[103mnch[m[97m[40m[96munks = 3 ;
    */[m[97m[40m[56;5H[92mdouble[m[97m[40m Chunks [[92m1[m[97m[40m+[92m1[m[97m[40m] = { [92m0[m[97m[40m,[57;11H[92m4[m[97m[40m*K, [92m16[m[97m[40m*K, [92m64[m[97m[40m*K   } ;
    [4m[30m[103mnch[m[97m[40munks = [92m1[m[97m[40m ;[60;5H[92mfor[m[97m[40m ([92mint[m[97m[40m c = [92m1[m[97m[40m ; c <= [4m[30m[103mnch[m[97m[40munks ; c++)
    {[62;9Hprintf ([91m" chunk test [m[97m[40m[91m[40m%d[m[97m[40m[91m: size [m[97m[40m[91m[40m%g\n[m[97m[40m[91m"[m[97m[40m, c, Chunks [c]) ;
    }[65;5H[96m/*
    int nt = 7 ;
    int Nthreads [7+1] = { 0,
        1, 2, 4, 8, 12, 20, 40 } ;
    */[71;5H/*
    int nt = 5 ;
    int Nthreads [6+1] = { 0,
        1, 5, 10, 20, 40 } ;        // hypersparse
    */[m[97m[40m[77;5H[92mint[m[97m[40m nt = [92m4[m[97m[40m ;
    [92mint[m[97m[40m Nthreads [[92m6[m[97m[40m+[92m1[m[97m[40m] = { [92m0[m[97m[40m,[79;63H219,9[9C36%[39;9H[?25h[?25l[79;64H20,0-1[40;1H[?25h[?25l[79;65H1,6  [41;6H[?25h[?25l[79;65H2,9[42;9H[?25h[?25l[79;65H3[43;9H[?25h[?25l[79;65H4[44;9H[?25h[?25l[79;65H5[45;9H[?25h[?25l[79;65H6[46;9H[?25h[?25l[79;65H7[47;9H[?25h[?25l[79;65H8,6[48;6H[?25h[?25l[79;65H9,0-1[49;1H[?25h[?25l[79;64H30,6  [50;6H[?25h[?25l[79;65H1,9[51;9H[?25h[?25l[79;65H2[52;9H[?25h[?25l[79;65H3[53;9H[?25h[?25l[79;65H4,6[54;6H[?25h[?25l[79;65H5,0-1[55;1H[?25h[?25l[79;65H6,9  [56;9H[?25h[?25l[79;65H7[57;9H[?25h[?25l[79;65H8[58;9H[?25h[?25l[79;67H13[58;13H[?25h[?25l[79;68H5[58;15H[?25h[?25l[92m3[?25h[?1006l[?1002l[?2004l[?25l[m[97m[40m[79;1H"bc_gap_test.c"[79;63H[K[79;17H576L, 18277C written
[39;49m[?2004l[?1l>[?25h[?1049l[23;0;0t[0;36mslash $[0m gmake
( cd build ; cmake  .. ; make --jobs=8 )
-- CMAKE build type:          Release
-- CMAKE C Flags release:     -O3 -DNDEBUG
-- CMAKE compiler ID:         GNU
-- CMAKE thread library:      -lpthread
-- CMAKE have pthreads:       1
-- CMAKE have Win32 pthreads: 
-- CMAKE have OpenMP:         TRUE
-- Automatic selection of synchronization method
-- Using OpenMP to synchronize user threads
-- CMAKE C flags:  -std=c11 -O -lm -Wno-pragmas  -O3 -DNDEBUG -fopenmp -DUSER_OPENMP_THREADS  -DHAVE_PTHREADS 
-- Configuring done
-- Generating done
-- Build files have been written to: /home/davis/sparse/LAGraph/Test/BetweennessCentrality/build
make[1]: Entering directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[2]: Entering directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Entering directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Entering directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Entering directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Entering directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
[35m[1mScanning dependencies of target bc_gap_test[0m
make[3]: Leaving directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Leaving directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Leaving directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Leaving directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Entering directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
[ 75%] Built target bc_batch_exe
[ 75%] Built target bc_exe
[ 75%] Built target bc_test
[ 87%] [32mBuilding C object CMakeFiles/bc_gap_test.dir/bc_gap_test.c.o[0m
[01m[K/home/davis/sparse/LAGraph/Test/BetweennessCentrality/bc_gap_test.c:[m[K In function ‘[01m[Kmain[m[K’:
[01m[K/home/davis/sparse/LAGraph/Test/BetweennessCentrality/bc_gap_test.c:237:16:[m[K [01;35m[Kwarning: [m[Kexcess elements in array initializer
           4*K, [01;35m[K16[m[K*K, 64*K   } ;
                [01;35m[K^~[m[K
[01m[K/home/davis/sparse/LAGraph/Test/BetweennessCentrality/bc_gap_test.c:237:16:[m[K [01;36m[Knote: [m[K(near initialization for ‘[01m[KChunks[m[K’)
[01m[K/home/davis/sparse/LAGraph/Test/BetweennessCentrality/bc_gap_test.c:237:22:[m[K [01;35m[Kwarning: [m[Kexcess elements in array initializer
           4*K, 16*K, [01;35m[K64[m[K*K   } ;
                      [01;35m[K^~[m[K
[01m[K/home/davis/sparse/LAGraph/Test/BetweennessCentrality/bc_gap_test.c:237:22:[m[K [01;36m[Knote: [m[K(near initialization for ‘[01m[KChunks[m[K’)
[01m[K/home/davis/sparse/LAGraph/Test/BetweennessCentrality/bc_gap_test.c:242:9:[m[K [01;35m[Kwarning: [m[Kiteration 1 invokes undefined behavior [[01;35m[K-Waggressive-loop-optimizations[m[K]
         [01;35m[Kprintf (" chunk test %d: size %g\n", c, Chunks [c])[m[K ;
         [01;35m[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[01m[K/home/davis/sparse/LAGraph/Test/BetweennessCentrality/bc_gap_test.c:240:5:[m[K [01;36m[Knote: [m[Kwithin this loop
     [01;36m[Kfor[m[K (int c = 1 ; c <= nchunks ; c++)
     [01;36m[K^~~[m[K
[100%] [32m[1mLinking C executable bc_gap_test[0m
make[3]: Leaving directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
[100%] Built target bc_gap_test
make[2]: Leaving directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[1]: Leaving directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
./build/bc_test < sample.mtx 2>stderr.txt
A is unsymmetric
Starting Betweenness Centrality Tests
 - nthreads: 8
 - ntrials: 1
 - Start Test: Betweenness Centrality (Brandes Algorithm)
generic generic generic generic generic generic generic generic generic generic generic  - End Test: Betweenness Centrality (Brandes Algorithm)
 - Start Test: Betweenness Centrality (Batch Algorithm)
 - End Test: Betweenness Centrality (Batch Algorithm)
 - Betweenness Centrality Numerical Results

   +-------------------------+
   | v_i | Brandes |  Batch  |
   +-------------------------+
   |     | (FP32)  |  (FP32) |
   +-------------------------+
   |   0 |    0.00 |    0.00 |
   |   1 |    0.00 |    0.00 |
   |   2 |    0.00 |    0.00 |
   |   3 |    0.00 |    0.00 |
   |   4 |    6.00 |    6.00 |
   |   5 |    1.00 |    1.00 |
   |   6 |    1.00 |    1.00 |
   |   7 |    0.00 |    0.00 |
   +-------------------------+
all tests passed
./build/bc_test < sample2.mtx 2>>stderr.txt
A is symmetric
Starting Betweenness Centrality Tests
 - nthreads: 8
 - ntrials: 1
 - Start Test: Betweenness Centrality (Brandes Algorithm)
generic generic generic generic generic generic generic generic generic generic generic generic generic generic  - End Test: Betweenness Centrality (Brandes Algorithm)
 - Start Test: Betweenness Centrality (Batch Algorithm)
 - End Test: Betweenness Centrality (Batch Algorithm)
 - Betweenness Centrality Numerical Results

   +-------------------------+
   | v_i | Brandes |  Batch  |
   +-------------------------+
   |     | (FP32)  |  (FP32) |
   +-------------------------+
   |   0 |    0.00 |    0.00 |
   |   1 |    1.00 |    1.00 |
   |   2 |    3.50 |    3.50 |
   |   3 |    0.00 |    0.00 |
   |   4 |    5.00 |    5.00 |
   |   5 |    8.50 |    8.50 |
   |   6 |    0.00 |    0.00 |
   |   7 |    0.00 |    0.00 |
   +-------------------------+
all tests passed
./build/bc_test < west0067.mtx 2>>stderr.txt
A is unsymmetric
Starting Betweenness Centrality Tests
 - nthreads: 8
 - ntrials: 1
 - Start Test: Betweenness Centrality (Brandes Algorithm)
generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic  - End Test: Betweenness Centrality (Brandes Algorithm)
 - Start Test: Betweenness Centrality (Batch Algorithm)
 - End Test: Betweenness Centrality (Batch Algorithm)
 - Betweenness Centrality Numerical Results

   +-------------------------+
   | v_i | Brandes |  Batch  |
   +-------------------------+
   |     | (FP32)  |  (FP32) |
   +-------------------------+
   |   0 |    4.65 |    4.65 |
   |   1 |    5.54 |    5.54 |
   |   2 |    1.89 |    1.89 |
   |   3 |    0.98 |    0.98 |
   |   4 |    7.29 |    7.29 |
   |   5 |    0.53 |    0.53 |
   |   6 |    1.12 |    1.12 |
   |   7 |    3.53 |    3.53 |
   |   8 |    3.45 |    3.45 |
   |   9 |    4.67 |    4.67 |
   |  10 |    2.24 |    2.24 |
   |  11 |    2.27 |    2.27 |
   |  12 |    1.24 |    1.24 |
   |  13 |    0.39 |    0.39 |
   |  14 |    0.18 |    0.18 |
   |  15 |   18.08 |   18.08 |
   |  16 |    0.20 |    0.20 |
   |  17 |    0.80 |    0.80 |
   |  18 |    0.58 |    0.58 |
   |  19 |   17.60 |   17.60 |
   |  20 |    2.11 |    2.11 |
   |  21 |    0.74 |    0.74 |
   |  22 |    0.39 |    0.39 |
   |  23 |   28.04 |   28.04 |
   |  24 |   18.51 |   18.51 |
   |  25 |    7.96 |    7.96 |
   |  26 |    7.39 |    7.39 |
   |  27 |    1.44 |    1.44 |
   |  28 |    0.68 |    0.68 |
   |  29 |   23.43 |   23.43 |
   |  30 |   23.82 |   23.82 |
   |  31 |    5.38 |    5.38 |
   |  32 |    2.22 |    2.22 |
   |  33 |    0.22 |    0.22 |
   |  34 |    0.22 |    0.22 |
   |  35 |   15.38 |   15.38 |
   |  36 |   17.76 |   17.76 |
   |  37 |    5.80 |    5.80 |
   |  38 |    2.45 |    2.45 |
   |  39 |    0.96 |    0.96 |
   |  40 |   24.64 |   24.64 |
   |  41 |    4.37 |    4.37 |
   |  42 |   12.41 |   12.41 |
   |  43 |    6.56 |    6.56 |
   |  44 |   26.51 |   26.51 |
   |  45 |    0.00 |    0.00 |
   |  46 |   12.13 |   12.13 |
   |  47 |    0.00 |    0.00 |
   |  48 |   12.61 |   12.61 |
   |  49 |    2.77 |    2.77 |
   |  50 |    0.70 |    0.70 |
   |  51 |    1.33 |    1.32 |
   |  52 |   15.48 |   15.48 |
   |  53 |    2.33 |    2.32 |
   |  54 |   30.00 |   30.00 |
   |  55 |    4.58 |    4.58 |
   |  56 |   28.11 |   28.11 |
   |  57 |    6.18 |    6.18 |
   |  58 |   15.85 |   15.85 |
   |  59 |   10.27 |   10.27 |
   |  60 |   15.11 |   15.11 |
   |  61 |    7.63 |    7.63 |
   |  62 |    9.65 |    9.65 |
   |  63 |    9.52 |    9.52 |
   |  64 |    6.41 |    6.41 |
   |  65 |    4.78 |    4.78 |
   |  66 |    5.92 |    5.92 |
   +-------------------------+
all tests passed
./build/bc_gap_test < LFAT5.mtx
matrix: from stdin
A is symmetric
 chunk test 1: size 4096
 chunk test 2: size 1.2732e-313
 chunk test 3: size 5.74697e-320
 thread test 1: 1
 thread test 2: 2
 thread test 3: 4
 thread test 4: 8

========== input graph: nodes: 14 edges: 46
nthreads max 8

Trial 1 : sources: [ 0 1 2 3 ]
---

Batch X3 time  1: 1:       0.0001 (sec), rate:      0.418
Batch X3 time  1: 2:       0.0001 (sec), rate:      0.492
Batch X3 time  1: 4:       0.0001 (sec), rate:      0.467
Batch X3 time  1: 8:       0.0122 (sec), rate:      0.004

Batch X3 time  2: 1:       0.0001 (sec), rate:      0.591
Batch X3 time  2: 2:       0.0001 (sec), rate:      0.393
Batch X3 time  2: 4:       0.0008 (sec), rate:      0.058
Batch X3 time  2: 8:       0.0606 (sec), rate:      0.001

Batch X3 time  3: 1:       0.0001 (sec), rate:      0.334
Batch X3 time  3: 2:       0.0001 (sec), rate:      0.398
Batch X3 time  3: 4:       0.0003 (sec), rate:      0.180
Batch X3 time  3: 8:       0.0532 (sec), rate:      0.001

Batch X3 time  4: 1:       0.0001 (sec), rate:      0.485
Batch X3 time  4: 2:       0.0001 (sec), rate:      0.615
Batch X3 time  4: 4:       0.0001 (sec), rate:      0.557
Batch X3 time  4: 8:       0.0117 (sec), rate:      0.004

Batch X3 time  5: 1:       0.0001 (sec), rate:      0.382
Batch X3 time  5: 2:       0.0001 (sec), rate:      0.379
Batch X3 time  5: 4:       0.0038 (sec), rate:      0.012
Batch X3 time  5: 8:       0.0700 (sec), rate:      0.001

Batch X3 time  6: 1:       0.0001 (sec), rate:      0.365
Batch X3 time  6: 2:       0.0001 (sec), rate:      0.427
Batch X3 time  6: 4:       0.0016 (sec), rate:      0.029
Batch X3 time  6: 8:       0.0679 (sec), rate:      0.001

Batch X3 time  7: 1:       0.0001 (sec), rate:      0.495
Batch X3 time  7: 2:       0.0001 (sec), rate:      0.395
Batch X3 time  7: 4:       0.0038 (sec), rate:      0.012
Batch X3 time  7: 8:       0.0719 (sec), rate:      0.001

Batch X3 time  8: 1:       0.0001 (sec), rate:      0.478
Batch X3 time  8: 2:       0.0001 (sec), rate:      0.426
Batch X3 time  8: 4:       0.0038 (sec), rate:      0.012
Batch X3 time  8: 8:       0.0439 (sec), rate:      0.001

Batch X3 time  9: 1:       0.0001 (sec), rate:      0.466
Batch X3 time  9: 2:       0.0001 (sec), rate:      0.428
Batch X3 time  9: 4:       0.0077 (sec), rate:      0.006
Batch X3 time  9: 8:       0.0480 (sec), rate:      0.001

Batch X3 time 10: 1:       0.0001 (sec), rate:      0.499
Batch X3 time 10: 2:       0.0001 (sec), rate:      0.591
Batch X3 time 10: 4:       0.0001 (sec), rate:      0.406
Batch X3 time 10: 8:       0.0136 (sec), rate:      0.003

Batch X3 time 11: 1:       0.0001 (sec), rate:      0.637
Batch X3 time 11: 2:       0.0001 (sec), rate:      0.621
Batch X3 time 11: 4:       0.0001 (sec), rate:      0.494
Batch X3 time 11: 8:       0.0137 (sec), rate:      0.003

Batch X3 time 12: 1:       0.0001 (sec), rate:      0.469
Batch X3 time 12: 2:       0.0001 (sec), rate:      0.587
Batch X3 time 12: 4:       0.0001 (sec), rate:      0.608
Batch X3 time 12: 8:       0.0161 (sec), rate:      0.003

Batch X3 time 13: 1:       0.0001 (sec), rate:      0.503
Batch X3 time 13: 2:       0.0001 (sec), rate:      0.565
Batch X3 time 13: 4:       0.0001 (sec), rate:      0.467
Batch X3 time 13: 8:       0.0204 (sec), rate:      0.002

Batch X3 time 14: 1:       0.0001 (sec), rate:      0.399
Batch X3 time 14: 2:       0.0001 (sec), rate:      0.476
Batch X3 time 14: 4:       0.0001 (sec), rate:      0.379
Batch X3 time 14: 8:       0.0143 (sec), rate:      0.003

Batch X3 time 15: 1:       0.0001 (sec), rate:      0.560
Batch X3 time 15: 2:       0.0001 (sec), rate:      0.635
Batch X3 time 15: 4:       0.0001 (sec), rate:      0.422
Batch X3 time 15: 8:       0.0197 (sec), rate:      0.002

Batch X3 time 16: 1:       0.0001 (sec), rate:      0.450
Batch X3 time 16: 2:       0.0001 (sec), rate:      0.570
Batch X3 time 16: 4:       0.0001 (sec), rate:      0.450
Batch X3 time 16: 8:       0.0101 (sec), rate:      0.005

Batch X3 time 17: 1:       0.0001 (sec), rate:      0.610
Batch X3 time 17: 2:       0.0001 (sec), rate:      0.624
Batch X3 time 17: 4:       0.0002 (sec), rate:      0.306
Batch X3 time 17: 8:       0.0203 (sec), rate:      0.002

Batch X3 time 18: 1:       0.0001 (sec), rate:      0.385
Batch X3 time 18: 2:       0.0001 (sec), rate:      0.582
Batch X3 time 18: 4:       0.0001 (sec), rate:      0.416
Batch X3 time 18: 8:       0.0123 (sec), rate:      0.004

Batch X3 time 19: 1:       0.0001 (sec), rate:      0.515
Batch X3 time 19: 2:       0.0001 (sec), rate:      0.606
Batch X3 time 19: 4:       0.0001 (sec), rate:      0.371
Batch X3 time 19: 8:       0.0239 (sec), rate:      0.002

Batch X3 time 20: 1:       0.0001 (sec), rate:      0.462
Batch X3 time 20: 2:       0.0001 (sec), rate:      0.628
Batch X3 time 20: 4:       0.0001 (sec), rate:      0.364
Batch X3 time 20: 8:       0.0115 (sec), rate:      0.004

Batch X3 time 21: 1:       0.0001 (sec), rate:      0.675
Batch X3 time 21: 2:       0.0001 (sec), rate:      0.595
Batch X3 time 21: 4:       0.0001 (sec), rate:      0.653
Batch X3 time 21: 8:       0.0158 (sec), rate:      0.003

Batch X3 time 22: 1:       0.0001 (sec), rate:      0.322
Batch X3 time 22: 2:       0.0001 (sec), rate:      0.605
Batch X3 time 22: 4:       0.0001 (sec), rate:      0.589
Batch X3 time 22: 8:       0.0196 (sec), rate:      0.002

Batch X3 time 23: 1:       0.0001 (sec), rate:      0.399
Batch X3 time 23: 2:       0.0001 (sec), rate:      0.524
Batch X3 time 23: 4:       0.0001 (sec), rate:      0.403
Batch X3 time 23: 8:       0.0115 (sec), rate:      0.004

Batch X3 time 24: 1:       0.0001 (sec), rate:      0.530
Batch X3 time 24: 2:       0.0001 (sec), rate:      0.570
Batch X3 time 24: 4:       0.0001 (sec), rate:      0.488
Batch X3 time 24: 8:       0.0150 (sec), rate:      0.003

Batch X3 time 25: 1:       0.0001 (sec), rate:      0.676
Batch X3 time 25: 2:       0.0001 (sec), rate:      0.604
Batch X3 time 25: 4:       0.0001 (sec), rate:      0.554
Batch X3 time 25: 8:       0.0164 (sec), rate:      0.003

Batch X3 time 26: 1:       0.0001 (sec), rate:      0.519
Batch X3 time 26: 2:       0.0001 (sec), rate:      0.654
Batch X3 time 26: 4:       0.0001 (sec), rate:      0.473
Batch X3 time 26: 8:       0.0127 (sec), rate:      0.004

Batch X3 time 27: 1:       0.0001 (sec), rate:      0.675
Batch X3 time 27: 2:       0.0001 (sec), rate:      0.602
Batch X3 time 27: 4:       0.0001 (sec), rate:      0.458
Batch X3 time 27: 8:       0.0107 (sec), rate:      0.004

Batch X3 time 28: 1:       0.0001 (sec), rate:      0.447
Batch X3 time 28: 2:       0.0001 (sec), rate:      0.635
Batch X3 time 28: 4:       0.0001 (sec), rate:      0.425
Batch X3 time 28: 8:       0.0156 (sec), rate:      0.003

Batch X3 time 29: 1:       0.0001 (sec), rate:      0.658
Batch X3 time 29: 2:       0.0001 (sec), rate:      0.594
Batch X3 time 29: 4:       0.0001 (sec), rate:      0.468
Batch X3 time 29: 8:       0.0142 (sec), rate:      0.003

Batch X3 time 30: 1:       0.0002 (sec), rate:      0.213
Batch X3 time 30: 2:       0.0001 (sec), rate:      0.313
Batch X3 time 30: 4:       0.0001 (sec), rate:      0.416
Batch X3 time 30: 8:       0.0119 (sec), rate:      0.004

Batch X3 time 31: 1:       0.0001 (sec), rate:      0.579
Batch X3 time 31: 2:       0.0001 (sec), rate:      0.635
Batch X3 time 31: 4:       0.0001 (sec), rate:      0.462
Batch X3 time 31: 8:       0.0165 (sec), rate:      0.003

Batch X3 time 32: 1:       0.0001 (sec), rate:      0.331
Batch X3 time 32: 2:       0.0001 (sec), rate:      0.487
Batch X3 time 32: 4:       0.0001 (sec), rate:      0.433
Batch X3 time 32: 8:       0.0075 (sec), rate:      0.006

Batch X3 time 33: 1:       0.0001 (sec), rate:      0.524
Batch X3 time 33: 2:       0.0001 (sec), rate:      0.567
Batch X3 time 33: 4:       0.0001 (sec), rate:      0.610
Batch X3 time 33: 8:       0.0117 (sec), rate:      0.004

Batch X3 time 34: 1:       0.0001 (sec), rate:      0.607
Batch X3 time 34: 2:       0.0001 (sec), rate:      0.621
Batch X3 time 34: 4:       0.0001 (sec), rate:      0.448
Batch X3 time 34: 8:       0.0271 (sec), rate:      0.002

Batch X3 time 35: 1:       0.0001 (sec), rate:      0.451
Batch X3 time 35: 2:       0.0001 (sec), rate:      0.601
Batch X3 time 35: 4:       0.0001 (sec), rate:      0.581
Batch X3 time 35: 8:       0.0125 (sec), rate:      0.004

Batch X3 time 36: 1:       0.0001 (sec), rate:      0.312
Batch X3 time 36: 2:       0.0001 (sec), rate:      0.519
Batch X3 time 36: 4:       0.0002 (sec), rate:      0.233
Batch X3 time 36: 8:       0.0113 (sec), rate:      0.004

Batch X3 time 37: 1:       0.0001 (sec), rate:      0.519
Batch X3 time 37: 2:       0.0001 (sec), rate:      0.629
Batch X3 time 37: 4:       0.0001 (sec), rate:      0.609
Batch X3 time 37: 8:       0.0156 (sec), rate:      0.003

Batch X3 time 38: 1:       0.0001 (sec), rate:      0.458
Batch X3 time 38: 2:       0.0001 (sec), rate:      0.541
Batch X3 time 38: 4:       0.0001 (sec), rate:      0.457
Batch X3 time 38: 8:       0.0165 (sec), rate:      0.003

Batch X3 time 39: 1:       0.0001 (sec), rate:      0.404
Batch X3 time 39: 2:       0.0001 (sec), rate:      0.568
Batch X3 time 39: 4:       0.0001 (sec), rate:      0.520
Batch X3 time 39: 8:       0.0106 (sec), rate:      0.004

Batch X3 time 40: 1:       0.0001 (sec), rate:      0.662
Batch X3 time 40: 2:       0.0001 (sec), rate:      0.632
Batch X3 time 40: 4:       0.0001 (sec), rate:      0.652
Batch X3 time 40: 8:       0.0119 (sec), rate:      0.004

Batch X3 time 41: 1:       0.0001 (sec), rate:      0.495
Batch X3 time 41: 2:       0.0001 (sec), rate:      0.640
Batch X3 time 41: 4:       0.0001 (sec), rate:      0.503
Batch X3 time 41: 8:       0.0156 (sec), rate:      0.003

Batch X3 time 42: 1:       0.0001 (sec), rate:      0.635
Batch X3 time 42: 2:       0.0001 (sec), rate:      0.670
Batch X3 time 42: 4:       0.0001 (sec), rate:      0.471
Batch X3 time 42: 8:       0.0098 (sec), rate:      0.005

Batch X3 time 43: 1:       0.0001 (sec), rate:      0.462
Batch X3 time 43: 2:       0.0001 (sec), rate:      0.565
Batch X3 time 43: 4:       0.0001 (sec), rate:      0.489
Batch X3 time 43: 8:       0.0136 (sec), rate:      0.003

Batch X3 time 44: 1:       0.0001 (sec), rate:      0.524
Batch X3 time 44: 2:       0.0001 (sec), rate:      0.559
Batch X3 time 44: 4:       0.0001 (sec), rate:      0.621
Batch X3 time 44: 8:       0.0159 (sec), rate:      0.003

Batch X3 time 45: 1:       0.0003 (sec), rate:      0.177
Batch X3 time 45: 2:       0.0001 (sec), rate:      0.393
Batch X3 time 45: 4:       0.0002 (sec), rate:      0.219
Batch X3 time 45: 8:       0.0109 (sec), rate:      0.004

Batch X3 time 46: 1:       0.0001 (sec), rate:      0.522
Batch X3 time 46: 2:       0.0001 (sec), rate:      0.579
Batch X3 time 46: 4:       0.0001 (sec), rate:      0.503
Batch X3 time 46: 8:       0.0077 (sec), rate:      0.006

Batch X3 time 47: 1:       0.0001 (sec), rate:      0.694
Batch X3 time 47: 2:       0.0001 (sec), rate:      0.578
Batch X3 time 47: 4:       0.0001 (sec), rate:      0.559
Batch X3 time 47: 8:       0.0159 (sec), rate:      0.003

Batch X3 time 48: 1:       0.0001 (sec), rate:      0.463
Batch X3 time 48: 2:       0.0001 (sec), rate:      0.618
Batch X3 time 48: 4:       0.0001 (sec), rate:      0.451
Batch X3 time 48: 8:       0.0205 (sec), rate:      0.002

Batch X3 time 49: 1:       0.0001 (sec), rate:      0.484
Batch X3 time 49: 2:       0.0001 (sec), rate:      0.661
Batch X3 time 49: 4:       0.0001 (sec), rate:      0.348
Batch X3 time 49: 8:       0.0139 (sec), rate:      0.003

Batch X3 time 50: 1:       0.0001 (sec), rate:      0.450
Batch X3 time 50: 2:       0.0001 (sec), rate:      0.562
Batch X3 time 50: 4:       0.0001 (sec), rate:      0.583
Batch X3 time 50: 8:       0.0122 (sec), rate:      0.004

Batch X3 time 51: 1:       0.0001 (sec), rate:      0.674
Batch X3 time 51: 2:       0.0001 (sec), rate:      0.589
Batch X3 time 51: 4:       0.0001 (sec), rate:      0.641
Batch X3 time 51: 8:       0.0132 (sec), rate:      0.003

Batch X3 time 52: 1:       0.0001 (sec), rate:      0.493
Batch X3 time 52: 2:       0.0001 (sec), rate:      0.550
Batch X3 time 52: 4:       0.0001 (sec), rate:      0.494
Batch X3 time 52: 8:       0.0141 (sec), rate:      0.003

Batch X3 time 53: 1:       0.0001 (sec), rate:      0.532
Batch X3 time 53: 2:       0.0001 (sec), rate:      0.583
Batch X3 time 53: 4:       0.0001 (sec), rate:      0.530
Batch X3 time 53: 8:       0.0157 (sec), rate:      0.003

Batch X3 time 54: 1:       0.0001 (sec), rate:      0.500
Batch X3 time 54: 2:       0.0001 (sec), rate:      0.619
Batch X3 time 54: 4:       0.0001 (sec), rate:      0.511
Batch X3 time 54: 8:       0.0196 (sec), rate:      0.002

Batch X3 time 55: 1:       0.0001 (sec), rate:      0.472
Batch X3 time 55: 2:       0.0001 (sec), rate:      0.567
Batch X3 time 55: 4:       0.0001 (sec), rate:      0.500
Batch X3 time 55: 8:       0.0117 (sec), rate:      0.004

Batch X3 time 56: 1:       0.0001 (sec), rate:      0.535
Batch X3 time 56: 2:       0.0001 (sec), rate:      0.641
Batch X3 time 56: 4:       0.0001 (sec), rate:      0.497
Batch X3 time 56: 8:       0.0156 (sec), rate:      0.003

Batch X3 time 57: 1:       0.0001 (sec), rate:      0.672
Batch X3 time 57: 2:       0.0001 (sec), rate:      0.597
Batch X3 time 57: 4:       0.0001 (sec), rate:      0.469
Batch X3 time 57: 8:       0.0108 (sec), rate:      0.004

Batch X3 time 58: 1:       0.0001 (sec), rate:      0.469
Batch X3 time 58: 2:       0.0001 (sec), rate:      0.574
Batch X3 time 58: 4:       0.0001 (sec), rate:      0.486
Batch X3 time 58: 8:       0.0126 (sec), rate:      0.004

Batch X3 time 59: 1:       0.0001 (sec), rate:      0.490
Batch X3 time 59: 2:       0.0001 (sec), rate:      0.578
Batch X3 time 59: 4:       0.0001 (sec), rate:      0.513
Batch X3 time 59: 8:       0.0157 (sec), rate:      0.003

Batch X3 time 60: 1:       0.0001 (sec), rate:      0.473
Batch X3 time 60: 2:       0.0001 (sec), rate:      0.527
Batch X3 time 60: 4:       0.0001 (sec), rate:      0.437
Batch X3 time 60: 8:       0.0116 (sec), rate:      0.004

Batch X3 time 61: 1:       0.0001 (sec), rate:      0.343
Batch X3 time 61: 2:       0.0001 (sec), rate:      0.550
Batch X3 time 61: 4:       0.0001 (sec), rate:      0.471
Batch X3 time 61: 8:       0.0102 (sec), rate:      0.005

Batch X3 time 62: 1:       0.0001 (sec), rate:      0.665
Batch X3 time 62: 2:       0.0001 (sec), rate:      0.608
Batch X3 time 62: 4:       0.0012 (sec), rate:      0.038
Batch X3 time 62: 8:       0.0120 (sec), rate:      0.004

Batch X3 time 63: 1:       0.0001 (sec), rate:      0.485
Batch X3 time 63: 2:       0.0001 (sec), rate:      0.550
Batch X3 time 63: 4:       0.0001 (sec), rate:      0.465
Batch X3 time 63: 8:       0.0076 (sec), rate:      0.006

Batch X3 time 64: 1:       0.0001 (sec), rate:      0.541
Batch X3 time 64: 2:       0.0001 (sec), rate:      0.589
Batch X3 time 64: 4:       0.0001 (sec), rate:      0.632
Batch X3 time 64: 8:       0.0133 (sec), rate:      0.003

Batch X3 time 65: 1:       0.0001 (sec), rate:      0.622
Batch X3 time 65: 2:       0.0001 (sec), rate:      0.603
Batch X3 time 65: 4:       0.0001 (sec), rate:      0.483
Batch X3 time 65: 8:       0.0085 (sec), rate:      0.005

Batch X3 time 66: 1:       0.0001 (sec), rate:      0.477
Batch X3 time 66: 2:       0.0001 (sec), rate:      0.581
Batch X3 time 66: 4:       0.0001 (sec), rate:      0.495
Batch X3 time 66: 8:       0.0132 (sec), rate:      0.003

Batch X3 time 67: 1:       0.0001 (sec), rate:      0.536
Batch X3 time 67: 2:       0.0001 (sec), rate:      0.593
Batch X3 time 67: 4:       0.0001 (sec), rate:      0.639
Batch X3 time 67: 8:       0.0117 (sec), rate:      0.004

Batch X3 time 68: 1:       0.0001 (sec), rate:      0.455
Batch X3 time 68: 2:       0.0001 (sec), rate:      0.546
Batch X3 time 68: 4:       0.0001 (sec), rate:      0.565
Batch X3 time 68: 8:       0.0156 (sec), rate:      0.003

Batch X3 time 69: 1:       0.0001 (sec), rate:      0.470
Batch X3 time 69: 2:       0.0001 (sec), rate:      0.558
Batch X3 time 69: 4:       0.0001 (sec), rate:      0.460
Batch X3 time 69: 8:       0.0197 (sec), rate:      0.002

Batch X3 time 70: 1:       0.0001 (sec), rate:      0.377
Batch X3 time 70: 2:       0.0001 (sec), rate:      0.521
Batch X3 time 70: 4:       0.0001 (sec), rate:      0.364
Batch X3 time 70: 8:       0.0150 (sec), rate:      0.003

Batch X3 time 71: 1:       0.0001 (sec), rate:      0.471
Batch X3 time 71: 2:       0.0001 (sec), rate:      0.576
Batch X3 time 71: 4:       0.0001 (sec), rate:      0.596
Batch X3 time 71: 8:       0.0161 (sec), rate:      0.003

Batch X3 time 72: 1:       0.0001 (sec), rate:      0.426
Batch X3 time 72: 2:       0.0001 (sec), rate:      0.547
Batch X3 time 72: 4:       0.0001 (sec), rate:      0.442
Batch X3 time 72: 8:       0.0116 (sec), rate:      0.004

Batch X3 time 73: 1:       0.0001 (sec), rate:      0.674
Batch X3 time 73: 2:       0.0001 (sec), rate:      0.575
Batch X3 time 73: 4:       0.0001 (sec), rate:      0.636
Batch X3 time 73: 8:       0.0130 (sec), rate:      0.004

Batch X3 time 74: 1:       0.0001 (sec), rate:      0.476
Batch X3 time 74: 2:       0.0001 (sec), rate:      0.542
Batch X3 time 74: 4:       0.0001 (sec), rate:      0.450
Batch X3 time 74: 8:       0.0141 (sec), rate:      0.003

Batch X3 time 75: 1:       0.0001 (sec), rate:      0.503
Batch X3 time 75: 2:       0.0001 (sec), rate:      0.595
Batch X3 time 75: 4:       0.0001 (sec), rate:      0.539
Batch X3 time 75: 8:       0.0203 (sec), rate:      0.002

Batch X3 time 76: 1:       0.0001 (sec), rate:      0.396
Batch X3 time 76: 2:       0.0002 (sec), rate:      0.285
Batch X3 time 76: 4:       0.0001 (sec), rate:      0.335
Batch X3 time 76: 8:       0.0149 (sec), rate:      0.003

Batch X3 time 77: 1:       0.0001 (sec), rate:      0.539
Batch X3 time 77: 2:       0.0001 (sec), rate:      0.575
Batch X3 time 77: 4:       0.0001 (sec), rate:      0.537
Batch X3 time 77: 8:       0.0118 (sec), rate:      0.004

Batch X3 time 78: 1:       0.0001 (sec), rate:      0.513
Batch X3 time 78: 2:       0.0001 (sec), rate:      0.572
Batch X3 time 78: 4:       0.0001 (sec), rate:      0.529
Batch X3 time 78: 8:       0.0116 (sec), rate:      0.004

Batch X3 time 79: 1:       0.0001 (sec), rate:      0.528
Batch X3 time 79: 2:       0.0001 (sec), rate:      0.633
Batch X3 time 79: 4:       0.0001 (sec), rate:      0.638
Batch X3 time 79: 8:       0.0077 (sec), rate:      0.006

Batch X3 time 80: 1:       0.0001 (sec), rate:      0.678
Batch X3 time 80: 2:       0.0001 (sec), rate:      0.603
Batch X3 time 80: 4:       0.0001 (sec), rate:      0.642
Batch X3 time 80: 8:       0.0213 (sec), rate:      0.002

Batch X3 time 81: 1:       0.0001 (sec), rate:      0.453
Batch X3 time 81: 2:       0.0001 (sec), rate:      0.593
Batch X3 time 81: 4:       0.0001 (sec), rate:      0.575
Batch X3 time 81: 8:       0.0101 (sec), rate:      0.005

Batch X3 time 82: 1:       0.0001 (sec), rate:      0.465
Batch X3 time 82: 2:       0.0001 (sec), rate:      0.555
Batch X3 time 82: 4:       0.0001 (sec), rate:      0.623
Batch X3 time 82: 8:       0.0118 (sec), rate:      0.004

Batch X3 time 83: 1:       0.0003 (sec), rate:      0.156
Batch X3 time 83: 2:       0.0001 (sec), rate:      0.356
Batch X3 time 83: 4:       0.0033 (sec), rate:      0.014
Batch X3 time 83: 8:       0.0044 (sec), rate:      0.011

Batch X3 time 84: 1:       0.0001 (sec), rate:      0.470
Batch X3 time 84: 2:       0.0001 (sec), rate:      0.404
Batch X3 time 84: 4:       0.0001 (sec), rate:      0.369
Batch X3 time 84: 8:       0.0111 (sec), rate:      0.004

Batch X3 time 85: 1:       0.0001 (sec), rate:      0.586
Batch X3 time 85: 2:       0.0001 (sec), rate:      0.578
Batch X3 time 85: 4:       0.0001 (sec), rate:      0.649
Batch X3 time 85: 8:       0.0157 (sec), rate:      0.003

Batch X3 time 86: 1:       0.0001 (sec), rate:      0.468
Batch X3 time 86: 2:       0.0001 (sec), rate:      0.568
Batch X3 time 86: 4:       0.0001 (sec), rate:      0.619
Batch X3 time 86: 8:       0.0183 (sec), rate:      0.003

Batch X3 time 87: 1:       0.0001 (sec), rate:      0.500
Batch X3 time 87: 2:       0.0001 (sec), rate:      0.593
Batch X3 time 87: 4:       0.0001 (sec), rate:      0.505
Batch X3 time 87: 8:       0.0092 (sec), rate:      0.005

Batch X3 time 88: 1:       0.0001 (sec), rate:      0.346
Batch X3 time 88: 2:       0.0001 (sec), rate:      0.562
Batch X3 time 88: 4:       0.0001 (sec), rate:      0.509
Batch X3 time 88: 8:       0.0155 (sec), rate:      0.003

Batch X3 time 89: 1:       0.0001 (sec), rate:      0.681
Batch X3 time 89: 2:       0.0001 (sec), rate:      0.615
Batch X3 time 89: 4:       0.0001 (sec), rate:      0.641
Batch X3 time 89: 8:       0.0144 (sec), rate:      0.003

Batch X3 time 90: 1:       0.0001 (sec), rate:      0.445
Batch X3 time 90: 2:       0.0001 (sec), rate:      0.601
Batch X3 time 90: 4:       0.0001 (sec), rate:      0.541
Batch X3 time 90: 8:       0.0173 (sec), rate:      0.003

Batch X3 time 91: 1:       0.0001 (sec), rate:      0.662
Batch X3 time 91: 2:       0.0001 (sec), rate:      0.588
Batch X3 time 91: 4:       0.0001 (sec), rate:      0.540
Batch X3 time 91: 8:       0.0155 (sec), rate:      0.003

Batch X3 time 92: 1:       0.0001 (sec), rate:      0.449
Batch X3 time 92: 2:       0.0001 (sec), rate:      0.575
Batch X3 time 92: 4:       0.0001 (sec), rate:      0.525
Batch X3 time 92: 8:       0.0156 (sec), rate:      0.003

Batch X3 time 93: 1:       0.0001 (sec), rate:      0.678
Batch X3 time 93: 2:       0.0001 (sec), rate:      0.578
Batch X3 time 93: 4:       0.0001 (sec), rate:      0.490
Batch X3 time 93: 8:       0.0138 (sec), rate:      0.003

Batch X3 time 94: 1:       0.0001 (sec), rate:      0.393
Batch X3 time 94: 2:       0.0001 (sec), rate:      0.527
Batch X3 time 94: 4:       0.0001 (sec), rate:      0.350
Batch X3 time 94: 8:       0.0135 (sec), rate:      0.003

Batch X3 time 95: 1:       0.0001 (sec), rate:      0.516
Batch X3 time 95: 2:       0.0001 (sec), rate:      0.587
Batch X3 time 95: 4:       0.0001 (sec), rate:      0.514
Batch X3 time 95: 8:       0.0157 (sec), rate:      0.003

Batch X3 time 96: 1:       0.0001 (sec), rate:      0.431
Batch X3 time 96: 2:       0.0001 (sec), rate:      0.585
Batch X3 time 96: 4:       0.0001 (sec), rate:      0.496
Batch X3 time 96: 8:       0.0156 (sec), rate:      0.003

Batch X3 time 97: 1:       0.0001 (sec), rate:      0.493
Batch X3 time 97: 2:       0.0001 (sec), rate:      0.616
Batch X3 time 97: 4:       0.0001 (sec), rate:      0.463
Batch X3 time 97: 8:       0.0077 (sec), rate:      0.006

Batch X3 time 98: 1:       0.0001 (sec), rate:      0.569
Batch X3 time 98: 2:       0.0001 (sec), rate:      0.568
Batch X3 time 98: 4:       0.0001 (sec), rate:      0.488
Batch X3 time 98: 8:       0.0157 (sec), rate:      0.003

Batch X3 time 99: 1:       0.0001 (sec), rate:      0.433
Batch X3 time 99: 2:       0.0001 (sec), rate:      0.553
Batch X3 time 99: 4:       0.0001 (sec), rate:      0.474
Batch X3 time 99: 8:       0.0116 (sec), rate:      0.004

Batch X3 time 100: 1:       0.0001 (sec), rate:      0.671
Batch X3 time 100: 2:       0.0001 (sec), rate:      0.581
Batch X3 time 100: 4:       0.0001 (sec), rate:      0.505
Batch X3 time 100: 8:       0.0157 (sec), rate:      0.003

Batch X3 time 101: 1:       0.0001 (sec), rate:      0.505
Batch X3 time 101: 2:       0.0001 (sec), rate:      0.624
Batch X3 time 101: 4:       0.0001 (sec), rate:      0.448
Batch X3 time 101: 8:       0.0197 (sec), rate:      0.002

Batch X3 time 102: 1:       0.0001 (sec), rate:      0.458
Batch X3 time 102: 2:       0.0001 (sec), rate:      0.587
Batch X3 time 102: 4:       0.0001 (sec), rate:      0.393
Batch X3 time 102: 8:       0.0115 (sec), rate:      0.004

Batch X3 time 103: 1:       0.0001 (sec), rate:      0.540
Batch X3 time 103: 2:       0.0001 (sec), rate:      0.637
Batch X3 time 103: 4:       0.0001 (sec), rate:      0.491
Batch X3 time 103: 8:       0.0237 (sec), rate:      0.002

Batch X3 time 104: 1:       0.0002 (sec), rate:      0.288
Batch X3 time 104: 2:       0.0001 (sec), rate:      0.542
Batch X3 time 104: 4:       0.0001 (sec), rate:      0.545
^CMakefile:21: recipe for target 'default' failed
make: *** [default] Interrupt

[0;36mslash $[0m !vi 
vi *gap*c  
[?1000h[?2004h[?1049h[22;0;0t[?1h=[?2004h[1;79r[?12h[?12l[27m[23m[29m[m[97m[40m[H[2J[?25l[79;1H"bc_gap_test.c" 576L, 18277C[2;1H▽[6n[2;1H  [1;1H[>c]10;?]11;?[1;1H[96m//------------------------------------------------------------------------------[2;1H// bc_gap_test: betweenness centrality for the GAP benchmark
//------------------------------------------------------------------------------[5;1H/*
    LAGraph:  graph algorithms based on GraphBLAS

    Copyright 2019 LAGraph Contributors.

    (see Contributors.txt for a full list of Contributors; see
    ContributionInstructions.txt for information on how you can Contribute to
    this project).

    All Rights Reserved.

    NO WARRANTY. THIS MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. THE LAGRAPH
    CONTRIBUTORS MAKE NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
    AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR
    PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF
    THE MATERIAL. THE CONTRIBUTORS DO NOT MAKE ANY WARRANTY OF ANY KIND WITH
    RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.

    Released under a BSD license, please see the LICENSE file distributed with
    this Software or contact permission@sei.cmu.edu for full terms.

    Created, in part, with funding and support from the United States
    Government.  (see Acknowledgments.txt file).

    This program includes and/or can make use of certain third party source
    code, object code, documentation and other files ("Third Party Software").
    See LICENSE file for more details.

*/

//------------------------------------------------------------------------------[37;1H// Contributed by Scott Kolodziej and Tim Davis, Texas A&M University

// usage:
// bc_gap_test matrixfile.mtx sourcenodes.mtx
// in is the Matrix Market file, out is the level set.[m[97m[40m

[95m#include [m[97m[40m[91m"bc_test.h"[m[97m[40m

[95m#define LAGRAPH_FREE_ALL            \
{                                   \
    GrB_free (&A);                  \
    GrB_free (&AT);                 \
    GrB_free (&Abool);              \
    GrB_free (&v);                  \
    GrB_free (&v_brandes);          \
    GrB_free (&v_batch);            \
    GrB_free (&v_batch4);           \
    GrB_free (&SourceNodes) ;       \
}[m[97m[40m

[92mint[m[97m[40m main ([92mint[m[97m[40m argc, [92mchar[m[97m[40m **argv)
{
    GrB_Info info;
    [92muint64_t[m[97m[40m seed = [92m1[m[97m[40m;[62;5HGrB_Matrix A = [92mNULL[m[97m[40m;
    GrB_Matrix AT = [92mNULL[m[97m[40m;
    GrB_Matrix Abool = [92mNULL[m[97m[40m;
    GrB_Vector v = [92mNULL[m[97m[40m;
    GrB_Vector v_brandes = [92mNULL[m[97m[40m;
    GrB_Vector v_batch = [92mNULL[m[97m[40m;
    GrB_Vector v_batch4 = [92mNULL[m[97m[40m;
    GrB_Matrix SourceNodes = [92mNULL[m[97m[40m ;[71;5H[92mbool[m[97m[40m tests_pass = [92mtrue[m[97m[40m;[73;5HLAGRAPH_OK (LAGraph_init ());
    [96m// GxB_set (GxB_NTHREADS, 1) ;
[m[97m[40m    [96m// GxB_set (GxB_CHUNK, 1) ;[77;5H// Start the timer[m[97m[40m
    [92mdouble[m[97m[40m tic [[92m2[m[97m[40m];[79;63H1,1[11CTop[1;1H[?25hP+q436f\P+q6b75\P+q6b64\P+q6b72\P+q6b6c\P+q2332\P+q2334\P+q2569\P+q2a37\P+q6b31\[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[?25l[79;1H[K[79;1H/[?2004h[?25hn[?25l[?25hc[?25l[?25hh[?25l[?25h[?25l[2;54H[4m[30m[103mnch[m[97m[40m[79;63H2,54[10CTop[2;54H[?25h[?25l[27m[23m[29m[m[97m[40m[H[2J[1;5H[96m// Start the timer[m[97m[40m
    [92mdouble[m[97m[40m tic [[92m2[m[97m[40m];
    LAGraph_tic (tic);[5;5H[96m//--------------------------------------------------------------------------[6;5H// read in a matrix from a file and convert to boolean
[m[97m[40m    [96m//--------------------------------------------------------------------------[m[97m[40m[9;5H[92mint[m[97m[40m batch_size = [92m4[m[97m[40m ;[11;5H[92mif[m[97m[40m (argc > [92m1[m[97m[40m)
    {[13;9H[96m// Usage:[14;9H//      ./bc_gap_test matrixfile.mtx sourcenodes.mtx[15;9H//      ./bc_gap_test matrixfile.grb sourcenodes.mtx[17;9H// read in the file in Matrix Market format from the input file[m[97m[40m[18;9H[92mchar[m[97m[40m *filename = argv [[92m1[m[97m[40m] ;[19;9Hprintf ([91m"matrix: [m[97m[40m[91m[40m%s\n[m[97m[40m[91m"[m[97m[40m, filename) ;[21;9H[96m// find the filename extension[m[97m[40m[22;9H[92msize_t[m[97m[40m len = strlen (filename) ;[23;9H[92mchar[m[97m[40m *ext = [92mNULL[m[97m[40m ;[24;9H[92mfor[m[97m[40m ([92mint[m[97m[40m k = len-[92m1[m[97m[40m ; k >= [92m0[m[97m[40m ; k--)[25;9H{[26;13H[92mif[m[97m[40m (filename [k] == [92m'.'[m[97m[40m)[27;13H{[28;17Hext = filename + k ;[29;17Hprintf ([91m"[[m[97m[40m[91m[40m%s[m[97m[40m[91m][m[97m[40m[91m[40m\n[m[97m[40m[91m"[m[97m[40m, ext) ;[30;17H[92mbreak[m[97m[40m ;[31;13H}[32;9H}[33;9H[92mbool[m[97m[40m is_binary = (ext != [92mNULL[m[97m[40m && strncmp (ext, [91m".grb"[m[97m[40m, [92m4[m[97m[40m) == [92m0[m[97m[40m) ;[35;9H[92mif[m[97m[40m (is_binary)[36;9H{[37;13Hprintf ([91m"Reading binary file: [m[97m[40m[91m[40m%s\n[m[97m[40m[91m"[m[97m[40m, filename) ;[38;13HLAGRAPH_OK (LAGraph_binread (&A, filename)) ;[39;9H}[40;9H[92melse[m[97m[40m[41;9H{[42;13Hprintf ([91m"Reading Matrix Market file: [m[97m[40m[91m[40m%s\n[m[97m[40m[91m"[m[97m[40m, filename) ;[43;13H[92mFILE[m[97m[40m *f = fopen (filename, [91m"r"[m[97m[40m) ;[44;13H[92mif[m[97m[40m (f == [92mNULL[m[97m[40m)[45;13H{[46;17Hprintf ([91m"Matrix file not found: [[m[97m[40m[91m[40m%s[m[97m[40m[91m][m[97m[40m[91m[40m\n[m[97m[40m[91m"[m[97m[40m, filename) ;[47;17Hexit ([92m1[m[97m[40m) ;[48;13H}[49;13HLAGRAPH_OK (LAGraph_mmread(&A, f));[50;13Hfclose (f) ;[51;9H}[53;9H[96m// read in source nodes in Matrix Market format from the input file[m[97m[40m[54;9Hfilename = argv [[92m2[m[97m[40m] ;[55;9Hprintf ([91m"sources: [m[97m[40m[91m[40m%s\n[m[97m[40m[91m"[m[97m[40m, filename) ;[56;9H[92mFILE[m[97m[40m *f = fopen (filename, [91m"r"[m[97m[40m) ;[57;9H[92mif[m[97m[40m (f == [92mNULL[m[97m[40m)[58;9H{[59;13Hprintf ([91m"Source node file not found: [[m[97m[40m[91m[40m%s[m[97m[40m[91m][m[97m[40m[91m[40m\n[m[97m[40m[91m"[m[97m[40m, filename) ;[60;13Hexit ([92m1[m[97m[40m) ;[61;9H}[62;9HLAGRAPH_OK (LAGraph_mmread (&SourceNodes, f)) ;[63;9Hfclose (f) ;[65;5H}
    [92melse[m[97m[40m
    {[69;9H[96m// Usage:  ./bc_gap_test < matrixfile.mtx[m[97m[40m[70;9Hprintf ([91m"matrix: from stdin[m[97m[40m[91m[40m\n[m[97m[40m[91m"[m[97m[40m) ;[72;9H[96m// read in the file in Matrix Market format from stdin[m[97m[40m[73;9HLAGRAPH_OK (LAGraph_mmread(&A, [92mstdin[m[97m[40m));[75;9H[96m// use nodes [1 2 3 4...] as the source nodes (in 1-based notation)[m[97m[40m[76;9HLAGRAPH_OK (GrB_Matrix_new (&SourceNodes, GrB_INT64, batch_size, [92m1[m[97m[40m)) ;[77;9H[92mfor[m[97m[40m ([92mint64_t[m[97m[40m i = [92m0[m[97m[40m ; i < batch_size ; i++)[78;9H{[79;63H77,5[10C15%[1;5H[?25h[?25l[27m[23m[29m[m[97m[40m[H[2J[1;9H[92mfor[m[97m[40m ([92mint64_t[m[97m[40m i = [92m0[m[97m[40m ; i < batch_size ; i++)[2;9H{[3;13HLAGRAPH_OK (GrB_Matrix_setElement (SourceNodes, i+[92m1[m[97m[40m, i, [92m0[m[97m[40m)) ;[4;9H}
    }[7;5H[92mdouble[m[97m[40m t_read = LAGraph_toc (tic) ;
    [96m// printf ("read time: %g sec\n", t_read) ;[m[97m[40m[10;5HLAGraph_tic (tic);[12;5H[96m// convert to pattern-only[m[97m[40m
    LAGRAPH_OK (LAGraph_pattern(&Abool, A, GrB_BOOL));[15;5HGrB_free (&A);
    A = Abool;
    Abool = [92mNULL[m[97m[40m ;[19;5H[96m// finish any pending computations[m[97m[40m
    GrB_Index nvals;
    GrB_Matrix_nvals (&nvals, SourceNodes);
    GrB_Matrix_nvals (&nvals, A);[24;5H[96m//--------------------------------------------------------------------------[25;5H// get the size of the problem.
[m[97m[40m    [96m//--------------------------------------------------------------------------[m[97m[40m[28;5HGrB_Index nrows, ncols;
    LAGRAPH_OK (GrB_Matrix_nrows(&nrows, A));
    LAGRAPH_OK (GrB_Matrix_ncols(&ncols, A));
    GrB_Index n = nrows;[33;5HGrB_Index nsource ;
    LAGRAPH_OK (GrB_Matrix_nrows(&nsource, SourceNodes));
    [92mif[m[97m[40m (nsource % batch_size != [92m0[m[97m[40m)
    {[37;9Hprintf ([91m"SourceNode size must be multiple of batch_size ([m[97m[40m[91m[40m%d[m[97m[40m[91m)[m[97m[40m[91m[40m\n[m[97m[40m[91m"[m[97m[40m,[38;13Hbatch_size) ;[39;9Hexit ([92m1[m[97m[40m) ;
    }[42;5H[92mdouble[m[97m[40m t_setup = LAGraph_toc (tic) ;
    [96m// printf ("setup time: %g sec\n", t_setup) ;[45;5H// AT = A'[m[97m[40m
    LAGraph_tic (tic);
    [92mbool[m[97m[40m A_is_symmetric ;
    LAGRAPH_OK (GrB_Matrix_new (&AT, GrB_BOOL, n, n)) ;
    LAGRAPH_OK (GrB_transpose (AT, [92mNULL[m[97m[40m, [92mNULL[m[97m[40m, A, [92mNULL[m[97m[40m)) ;
    LAGRAPH_OK (LAGraph_isequal (&A_is_symmetric, A, AT, [92mNULL[m[97m[40m)) ;
    [92mif[m[97m[40m (A_is_symmetric)
    {[53;9Hprintf ([91m"A is symmetric[m[97m[40m[91m[40m\n[m[97m[40m[91m"[m[97m[40m) ;[54;9HGrB_free (&AT) ;[55;9HAT = A ;
    }
    [92melse[m[97m[40m
    {[59;9Hprintf ([91m"A is unsymmetric[m[97m[40m[91m[40m\n[m[97m[40m[91m"[m[97m[40m) ;
    }
    [92mdouble[m[97m[40m t_transpose = LAGraph_toc (tic) ;
    [96m// printf ("transpose time: %g\n", t_transpose) ;[m[97m[40m[64;5H[95m#define K [m[97m[40m[92m1024[m[97m[40m
    [95m#define M (K*K)[m[97m[40m[67;5H[92mint[m[97m[40m [4m[30m[103mnch[m[97m[40munks ;[69;5H[96m/*
    double Chunks [16+1] = { 0,
          1*K,   2*K,  4*K,   8*K,
         16*K,  32*K, 64*K, 128*K,
        256*K, 512*K,    M,   2*M,
          4*M,   8*M, 16*M,  32*M } ;
    [m[97m[40m[4m[30m[103mnch[m[97m[40m[96munks = 8 ;
    */[78;5H/*[m[97m[40m[79;63H153,9[9C30%[1;9H[?25h[?25l[27m[23m[29m[m[97m[40m[H[2J[1;5H[96m// Start the timer[m[97m[40m
    [92mdouble[m[97m[40m tic [[92m2[m[97m[40m];
    LAGraph_tic (tic);[5;5H[96m//--------------------------------------------------------------------------[6;5H// read in a matrix from a file and convert to boolean
[m[97m[40m    [96m//--------------------------------------------------------------------------[m[97m[40m[9;5H[92mint[m[97m[40m batch_size = [92m4[m[97m[40m ;[11;5H[92mif[m[97m[40m (argc > [92m1[m[97m[40m)
    {[13;9H[96m// Usage:[14;9H//      ./bc_gap_test matrixfile.mtx sourcenodes.mtx[15;9H//      ./bc_gap_test matrixfile.grb sourcenodes.mtx[17;9H// read in the file in Matrix Market format from the input file[m[97m[40m[18;9H[92mchar[m[97m[40m *filename = argv [[92m1[m[97m[40m] ;[19;9Hprintf ([91m"matrix: [m[97m[40m[91m[40m%s\n[m[97m[40m[91m"[m[97m[40m, filename) ;[21;9H[96m// find the filename extension[m[97m[40m[22;9H[92msize_t[m[97m[40m len = strlen (filename) ;[23;9H[92mchar[m[97m[40m *ext = [92mNULL[m[97m[40m ;[24;9H[92mfor[m[97m[40m ([92mint[m[97m[40m k = len-[92m1[m[97m[40m ; k >= [92m0[m[97m[40m ; k--)[25;9H{[26;13H[92mif[m[97m[40m (filename [k] == [92m'.'[m[97m[40m)[27;13H{[28;17Hext = filename + k ;[29;17Hprintf ([91m"[[m[97m[40m[91m[40m%s[m[97m[40m[91m][m[97m[40m[91m[40m\n[m[97m[40m[91m"[m[97m[40m, ext) ;[30;17H[92mbreak[m[97m[40m ;[31;13H}[32;9H}[33;9H[92mbool[m[97m[40m is_binary = (ext != [92mNULL[m[97m[40m && strncmp (ext, [91m".grb"[m[97m[40m, [92m4[m[97m[40m) == [92m0[m[97m[40m) ;[35;9H[92mif[m[97m[40m (is_binary)[36;9H{[37;13Hprintf ([91m"Reading binary file: [m[97m[40m[91m[40m%s\n[m[97m[40m[91m"[m[97m[40m, filename) ;[38;13HLAGRAPH_OK (LAGraph_binread (&A, filename)) ;[39;9H}[40;9H[92melse[m[97m[40m[41;9H{[42;13Hprintf ([91m"Reading Matrix Market file: [m[97m[40m[91m[40m%s\n[m[97m[40m[91m"[m[97m[40m, filename) ;[43;13H[92mFILE[m[97m[40m *f = fopen (filename, [91m"r"[m[97m[40m) ;[44;13H[92mif[m[97m[40m (f == [92mNULL[m[97m[40m)[45;13H{[46;17Hprintf ([91m"Matrix file not found: [[m[97m[40m[91m[40m%s[m[97m[40m[91m][m[97m[40m[91m[40m\n[m[97m[40m[91m"[m[97m[40m, filename) ;[47;17Hexit ([92m1[m[97m[40m) ;[48;13H}[49;13HLAGRAPH_OK (LAGraph_mmread(&A, f));[50;13Hfclose (f) ;[51;9H}[53;9H[96m// read in source nodes in Matrix Market format from the input file[m[97m[40m[54;9Hfilename = argv [[92m2[m[97m[40m] ;[55;9Hprintf ([91m"sources: [m[97m[40m[91m[40m%s\n[m[97m[40m[91m"[m[97m[40m, filename) ;[56;9H[92mFILE[m[97m[40m *f = fopen (filename, [91m"r"[m[97m[40m) ;[57;9H[92mif[m[97m[40m (f == [92mNULL[m[97m[40m)[58;9H{[59;13Hprintf ([91m"Source node file not found: [[m[97m[40m[91m[40m%s[m[97m[40m[91m][m[97m[40m[91m[40m\n[m[97m[40m[91m"[m[97m[40m, filename) ;[60;13Hexit ([92m1[m[97m[40m) ;[61;9H}[62;9HLAGRAPH_OK (LAGraph_mmread (&SourceNodes, f)) ;[63;9Hfclose (f) ;[65;5H}
    [92melse[m[97m[40m
    {[69;9H[96m// Usage:  ./bc_gap_test < matrixfile.mtx[m[97m[40m[70;9Hprintf ([91m"matrix: from stdin[m[97m[40m[91m[40m\n[m[97m[40m[91m"[m[97m[40m) ;[72;9H[96m// read in the file in Matrix Market format from stdin[m[97m[40m[73;9HLAGRAPH_OK (LAGraph_mmread(&A, [92mstdin[m[97m[40m));[75;9H[96m// use nodes [1 2 3 4...] as the source nodes (in 1-based notation)[m[97m[40m[76;9HLAGRAPH_OK (GrB_Matrix_new (&SourceNodes, GrB_INT64, batch_size, [92m1[m[97m[40m)) ;[77;9H[92mfor[m[97m[40m ([92mint64_t[m[97m[40m i = [92m0[m[97m[40m ; i < batch_size ; i++)[78;9H{[79;63H154,9[9C15%[78;9H[?25h[?25l[27m[23m[29m[m[97m[40m[H[2J[1;1H[96m//------------------------------------------------------------------------------[2;1H// bc_gap_test: betweenness centrality for the GAP be[m[97m[40m[4m[30m[103mnch[m[97m[40m[96mmark
//------------------------------------------------------------------------------[5;1H/*
    LAGraph:  graph algorithms based on GraphBLAS

    Copyright 2019 LAGraph Contributors.

    (see Contributors.txt for a full list of Contributors; see
    ContributionInstructions.txt for information on how you can Contribute to
    this project).

    All Rights Reserved.

    NO WARRANTY. THIS MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. THE LAGRAPH
    CONTRIBUTORS MAKE NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
    AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR
    PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF
    THE MATERIAL. THE CONTRIBUTORS DO NOT MAKE ANY WARRANTY OF ANY KIND WITH
    RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.

    Released under a BSD license, please see the LICENSE file distributed with
    this Software or contact permission@sei.cmu.edu for full terms.

    Created, in part, with funding and support from the United States
    Government.  (see Acknowledgments.txt file).

    This program includes and/or can make use of certain third party source
    code, object code, documentation and other files ("Third Party Software").
    See LICENSE file for more details.

*/

//------------------------------------------------------------------------------[37;1H// Contributed by Scott Kolodziej and Tim Davis, Texas A&M University

// usage:
// bc_gap_test matrixfile.mtx sourcenodes.mtx
// in is the Matrix Market file, out is the level set.[m[97m[40m

[95m#include [m[97m[40m[91m"bc_test.h"[m[97m[40m

[95m#define LAGRAPH_FREE_ALL            \
{                                   \
    GrB_free (&A);                  \
    GrB_free (&AT);                 \
    GrB_free (&Abool);              \
    GrB_free (&v);                  \
    GrB_free (&v_brandes);          \
    GrB_free (&v_batch);            \
    GrB_free (&v_batch4);           \
    GrB_free (&SourceNodes) ;       \
}[m[97m[40m

[92mint[m[97m[40m main ([92mint[m[97m[40m argc, [92mchar[m[97m[40m **argv)
{
    GrB_Info info;
    [92muint64_t[m[97m[40m seed = [92m1[m[97m[40m;[62;5HGrB_Matrix A = [92mNULL[m[97m[40m;
    GrB_Matrix AT = [92mNULL[m[97m[40m;
    GrB_Matrix Abool = [92mNULL[m[97m[40m;
    GrB_Vector v = [92mNULL[m[97m[40m;
    GrB_Vector v_brandes = [92mNULL[m[97m[40m;
    GrB_Vector v_batch = [92mNULL[m[97m[40m;
    GrB_Vector v_batch4 = [92mNULL[m[97m[40m;
    GrB_Matrix SourceNodes = [92mNULL[m[97m[40m ;[71;5H[92mbool[m[97m[40m tests_pass = [92mtrue[m[97m[40m;[73;5HLAGRAPH_OK (LAGraph_init ());
    [96m// GxB_set (GxB_NTHREADS, 1) ;
[m[97m[40m    [96m// GxB_set (GxB_CHUNK, 1) ;[77;5H// Start the timer[m[97m[40m
    [92mdouble[m[97m[40m tic [[92m2[m[97m[40m];[79;63H78,5[10CTop[78;5H[?25h[?25l[27m[23m[29m[m[97m[40m[H[2J[1;5H[96m// Start the timer[m[97m[40m
    [92mdouble[m[97m[40m tic [[92m2[m[97m[40m];
    LAGraph_tic (tic);[5;5H[96m//--------------------------------------------------------------------------[6;5H// read in a matrix from a file and convert to boolean
[m[97m[40m    [96m//--------------------------------------------------------------------------[m[97m[40m[9;5H[92mint[m[97m[40m batch_size = [92m4[m[97m[40m ;[11;5H[92mif[m[97m[40m (argc > [92m1[m[97m[40m)
    {[13;9H[96m// Usage:[14;9H//      ./bc_gap_test matrixfile.mtx sourcenodes.mtx[15;9H//      ./bc_gap_test matrixfile.grb sourcenodes.mtx[17;9H// read in the file in Matrix Market format from the input file[m[97m[40m[18;9H[92mchar[m[97m[40m *filename = argv [[92m1[m[97m[40m] ;[19;9Hprintf ([91m"matrix: [m[97m[40m[91m[40m%s\n[m[97m[40m[91m"[m[97m[40m, filename) ;[21;9H[96m// find the filename extension[m[97m[40m[22;9H[92msize_t[m[97m[40m len = strlen (filename) ;[23;9H[92mchar[m[97m[40m *ext = [92mNULL[m[97m[40m ;[24;9H[92mfor[m[97m[40m ([92mint[m[97m[40m k = len-[92m1[m[97m[40m ; k >= [92m0[m[97m[40m ; k--)[25;9H{[26;13H[92mif[m[97m[40m (filename [k] == [92m'.'[m[97m[40m)[27;13H{[28;17Hext = filename + k ;[29;17Hprintf ([91m"[[m[97m[40m[91m[40m%s[m[97m[40m[91m][m[97m[40m[91m[40m\n[m[97m[40m[91m"[m[97m[40m, ext) ;[30;17H[92mbreak[m[97m[40m ;[31;13H}[32;9H}[33;9H[92mbool[m[97m[40m is_binary = (ext != [92mNULL[m[97m[40m && strncmp (ext, [91m".grb"[m[97m[40m, [92m4[m[97m[40m) == [92m0[m[97m[40m) ;[35;9H[92mif[m[97m[40m (is_binary)[36;9H{[37;13Hprintf ([91m"Reading binary file: [m[97m[40m[91m[40m%s\n[m[97m[40m[91m"[m[97m[40m, filename) ;[38;13HLAGRAPH_OK (LAGraph_binread (&A, filename)) ;[39;9H}[40;9H[92melse[m[97m[40m[41;9H{[42;13Hprintf ([91m"Reading Matrix Market file: [m[97m[40m[91m[40m%s\n[m[97m[40m[91m"[m[97m[40m, filename) ;[43;13H[92mFILE[m[97m[40m *f = fopen (filename, [91m"r"[m[97m[40m) ;[44;13H[92mif[m[97m[40m (f == [92mNULL[m[97m[40m)[45;13H{[46;17Hprintf ([91m"Matrix file not found: [[m[97m[40m[91m[40m%s[m[97m[40m[91m][m[97m[40m[91m[40m\n[m[97m[40m[91m"[m[97m[40m, filename) ;[47;17Hexit ([92m1[m[97m[40m) ;[48;13H}[49;13HLAGRAPH_OK (LAGraph_mmread(&A, f));[50;13Hfclose (f) ;[51;9H}[53;9H[96m// read in source nodes in Matrix Market format from the input file[m[97m[40m[54;9Hfilename = argv [[92m2[m[97m[40m] ;[55;9Hprintf ([91m"sources: [m[97m[40m[91m[40m%s\n[m[97m[40m[91m"[m[97m[40m, filename) ;[56;9H[92mFILE[m[97m[40m *f = fopen (filename, [91m"r"[m[97m[40m) ;[57;9H[92mif[m[97m[40m (f == [92mNULL[m[97m[40m)[58;9H{[59;13Hprintf ([91m"Source node file not found: [[m[97m[40m[91m[40m%s[m[97m[40m[91m][m[97m[40m[91m[40m\n[m[97m[40m[91m"[m[97m[40m, filename) ;[60;13Hexit ([92m1[m[97m[40m) ;[61;9H}[62;9HLAGRAPH_OK (LAGraph_mmread (&SourceNodes, f)) ;[63;9Hfclose (f) ;[65;5H}
    [92melse[m[97m[40m
    {[69;9H[96m// Usage:  ./bc_gap_test < matrixfile.mtx[m[97m[40m[70;9Hprintf ([91m"matrix: from stdin[m[97m[40m[91m[40m\n[m[97m[40m[91m"[m[97m[40m) ;[72;9H[96m// read in the file in Matrix Market format from stdin[m[97m[40m[73;9HLAGRAPH_OK (LAGraph_mmread(&A, [92mstdin[m[97m[40m));[75;9H[96m// use nodes [1 2 3 4...] as the source nodes (in 1-based notation)[m[97m[40m[76;9HLAGRAPH_OK (GrB_Matrix_new (&SourceNodes, GrB_INT64, batch_size, [92m1[m[97m[40m)) ;[77;9H[92mfor[m[97m[40m ([92mint64_t[m[97m[40m i = [92m0[m[97m[40m ; i < batch_size ; i++)[78;9H{[79;63H77,5[10C15%[1;5H[?25h[?25l[79;1H"bc_gap_test.c" 576 lines --13%--[79;63H[K[79;63H77,5[10C15%[1;5H[?25h[?25l[27m[23m[29m[m[97m[40m[H[2J[1;9H[92mfor[m[97m[40m ([92mint64_t[m[97m[40m i = [92m0[m[97m[40m ; i < batch_size ; i++)[2;9H{[3;13HLAGRAPH_OK (GrB_Matrix_setElement (SourceNodes, i+[92m1[m[97m[40m, i, [92m0[m[97m[40m)) ;[4;9H}
    }[7;5H[92mdouble[m[97m[40m t_read = LAGraph_toc (tic) ;
    [96m// printf ("read time: %g sec\n", t_read) ;[m[97m[40m[10;5HLAGraph_tic (tic);[12;5H[96m// convert to pattern-only[m[97m[40m
    LAGRAPH_OK (LAGraph_pattern(&Abool, A, GrB_BOOL));[15;5HGrB_free (&A);
    A = Abool;
    Abool = [92mNULL[m[97m[40m ;[19;5H[96m// finish any pending computations[m[97m[40m
    GrB_Index nvals;
    GrB_Matrix_nvals (&nvals, SourceNodes);
    GrB_Matrix_nvals (&nvals, A);[24;5H[96m//--------------------------------------------------------------------------[25;5H// get the size of the problem.
[m[97m[40m    [96m//--------------------------------------------------------------------------[m[97m[40m[28;5HGrB_Index nrows, ncols;
    LAGRAPH_OK (GrB_Matrix_nrows(&nrows, A));
    LAGRAPH_OK (GrB_Matrix_ncols(&ncols, A));
    GrB_Index n = nrows;[33;5HGrB_Index nsource ;
    LAGRAPH_OK (GrB_Matrix_nrows(&nsource, SourceNodes));
    [92mif[m[97m[40m (nsource % batch_size != [92m0[m[97m[40m)
    {[37;9Hprintf ([91m"SourceNode size must be multiple of batch_size ([m[97m[40m[91m[40m%d[m[97m[40m[91m)[m[97m[40m[91m[40m\n[m[97m[40m[91m"[m[97m[40m,[38;13Hbatch_size) ;[39;9Hexit ([92m1[m[97m[40m) ;
    }[42;5H[92mdouble[m[97m[40m t_setup = LAGraph_toc (tic) ;
    [96m// printf ("setup time: %g sec\n", t_setup) ;[45;5H// AT = A'[m[97m[40m
    LAGraph_tic (tic);
    [92mbool[m[97m[40m A_is_symmetric ;
    LAGRAPH_OK (GrB_Matrix_new (&AT, GrB_BOOL, n, n)) ;
    LAGRAPH_OK (GrB_transpose (AT, [92mNULL[m[97m[40m, [92mNULL[m[97m[40m, A, [92mNULL[m[97m[40m)) ;
    LAGRAPH_OK (LAGraph_isequal (&A_is_symmetric, A, AT, [92mNULL[m[97m[40m)) ;
    [92mif[m[97m[40m (A_is_symmetric)
    {[53;9Hprintf ([91m"A is symmetric[m[97m[40m[91m[40m\n[m[97m[40m[91m"[m[97m[40m) ;[54;9HGrB_free (&AT) ;[55;9HAT = A ;
    }
    [92melse[m[97m[40m
    {[59;9Hprintf ([91m"A is unsymmetric[m[97m[40m[91m[40m\n[m[97m[40m[91m"[m[97m[40m) ;
    }
    [92mdouble[m[97m[40m t_transpose = LAGraph_toc (tic) ;
    [96m// printf ("transpose time: %g\n", t_transpose) ;[m[97m[40m[64;5H[95m#define K [m[97m[40m[92m1024[m[97m[40m
    [95m#define M (K*K)[m[97m[40m[67;5H[92mint[m[97m[40m [4m[30m[103mnch[m[97m[40munks ;[69;5H[96m/*
    double Chunks [16+1] = { 0,
          1*K,   2*K,  4*K,   8*K,
         16*K,  32*K, 64*K, 128*K,
        256*K, 512*K,    M,   2*M,
          4*M,   8*M, 16*M,  32*M } ;
    [m[97m[40m[4m[30m[103mnch[m[97m[40m[96munks = 8 ;
    */[78;5H/*[m[97m[40m[79;63H153,9[9C30%[1;9H[?25h[?25l[79;63H230,5[78;5H[?25h[?25l[1;78r[78;1H
[1;79r[78;1H[96m    double Chunks [3+1] = { 0,[m[97m[40m[79;63H[K[79;63H231,5[9C30%[78;5H[?25h[?25l[1;78r[78;1H
[1;79r[78;1H[96m          2*K,  4*K,   16*K  } ;[m[97m[40m[79;63H[K[79;63H232,5[9C30%[78;5H[?25h[?25l[1;78r[78;1H
[1;79r[78;1H[96m    [m[97m[40m[4m[30m[103mnch[m[97m[40m[96munks = 3 ;[m[97m[40m[79;63H[K[79;63H233,5[9C31%[78;5H[?25h[?25l[1;78r[78;1H
[1;79r[78;1H[96m    */[m[97m[40m[79;63H[K[79;63H234,5[9C31%[78;5H[?25h[?25l[1;78r[78;1H
[1;79r[79;63H[K[79;63H235,0-1[7C31%[78;1H[?25h[?25l[1;78r[78;1H
[1;79r[78;5H[92mdouble[m[97m[40m Chunks [[92m1[m[97m[40m+[92m1[m[97m[40m] = { [92m0[m[97m[40m,[79;63H[K[79;63H236,5[9C31%[78;5H[?25h[?25l[1;78r[78;1H
[1;79r[78;11H[92m4[m[97m[40m*K, [92m16[m[97m[40m*K, [92m64[m[97m[40m*K   } ;[79;63H[K[79;63H237,5[9C31%[78;5H[?25h[?25l[1;78r[78;1H
[1;79r[78;5H[4m[30m[103mnch[m[97m[40munks = [92m3[m[97m[40m ;[79;63H[K[79;63H238,5[9C32%[78;5H[?25h[?25l[1;78r[78;1H
[1;79r[79;63H[K[79;63H239,0-1[7C32%[78;1H[?25h[?25l[1;78r[78;1H
[1;79r[78;5H[92mfor[m[97m[40m ([92mint[m[97m[40m c = [92m1[m[97m[40m ; c <= [4m[30m[103mnch[m[97m[40munks ; c++)[79;63H[K[79;63H240,5[9C32%[78;5H[?25h[?25l[1;78r[78;1H
[1;79r[78;5H{[79;63H[K[79;63H241,5[9C32%[78;5H[?25h[?25l[1;78r[78;1H
[1;79r[78;9Hprintf ([91m" chunk test [m[97m[40m[91m[40m%d[m[97m[40m[91m: size [m[97m[40m[91m[40m%g\n[m[97m[40m[91m"[m[97m[40m, c, Chunks [c]) ;[79;63H[K[79;63H242,5[9C32%[78;5H[?25h[?25l[1;78r[78;1H
[1;79r[78;5H}[79;63H[K[79;63H243,5[9C33%[78;5H[?25h[?25l[1;78r[78;1H
[1;79r[79;63H[K[79;63H244,0-1[7C33%[78;1H[?25h[?25l[1;78r[78;1H
[1;79r[78;5H[96m/*[m[97m[40m[79;63H[K[79;63H245,5[9C33%[78;5H[?25h[?25l[1;78r[78;1H
[1;79r[78;1H[96m    int nt = 7 ;[m[97m[40m[79;63H[K[79;63H246,5[9C33%[78;5H[?25h[?25l[1;78r[78;1H
[1;79r[78;1H[96m    int Nthreads [7+1] = { 0,[m[97m[40m[79;63H[K[79;63H247,5[9C33%[78;5H[?25h[?25l[1;78r[78;1H
[1;79r[78;1H[96m        1, 2, 4, 8, 12, 20, 40 } ;[m[97m[40m[79;63H[K[79;63H248,5[9C34%[78;5H[?25h[?25l[1;78r[78;1H
[1;79r[78;1H[96m    */[m[97m[40m[79;63H[K[79;63H249,5[9C34%[78;5H[?25h[?25l[1;78r[78;1H
[1;79r[79;63H[K[79;63H250,0-1[7C34%[78;1H[?25h[?25l[1;78r[78;1H
[1;79r[78;5H[96m/*[m[97m[40m[79;63H[K[79;63H251,5[9C34%[78;5H[?25h[?25l[1;78r[78;1H
[1;79r[78;1H[96m    int nt = 5 ;[m[97m[40m[79;63H[K[79;63H252,5[9C34%[78;5H[?25h[?25l[1;78r[78;1H
[1;79r[78;1H[96m    int Nthreads [6+1] = { 0,[m[97m[40m[79;63H[K[79;63H253,5[9C35%[78;5H[?25h[?25l[1;78r[78;1H
[1;79r[78;1H[96m        1, 5, 10, 20, 40 } ;        // hypersparse[m[97m[40m[79;63H[K[79;63H254,5[9C35%[78;5H[?25h[?25l[1;78r[78;1H
[1;79r[78;1H[96m    */[m[97m[40m[79;63H[K[79;63H255,5[9C35%[78;5H[?25h[?25l[1;78r[78;1H
[1;79r[79;63H[K[79;63H256,0-1[7C35%[78;1H[?25h[?25l[79;65H5,5  [77;5H[?25h[?25l[79;65H4[76;5H[?25h[?25l[79;65H3[75;5H[?25h[?25l[79;65H2[74;5H[?25h[?25l[79;65H1[73;5H[?25h[?25l[79;65H0,0-1[72;1H[?25h[?25l[79;64H49,5  [71;5H[?25h[?25l[79;65H8[70;5H[?25h[?25l[79;65H7[69;5H[?25h[?25l[79;65H6[68;5H[?25h[?25l[79;65H5[67;5H[?25h[?25l[79;65H4,0-1[66;1H[?25h[?25l[79;65H3,5  [65;5H[?25h[?25l[79;65H2[64;5H[?25h[?25l[79;65H1[63;5H[?25h[?25l[79;65H0[62;5H[?25h[?25l[79;64H39,0-1[61;1H[?25h[?25l[79;65H8,5  [60;5H[?25h[?25l[79;65H7[59;5H[?25h[?25l[79;65H6[58;5H[?25h[?25l[79;67H12[58;12H[?25h[?25l[79;68H9[58;19H[?25h[?25l[79;67H20[58;20H[?25h[?25l[79;68H1[58;21H[?25h[?25l[79;1H[1m-- INSERT --[m[97m[40m[79;63H[K[79;63H236,21[8C35%[58;21H[?25h[?25l[92m0[m[97m[40m+[92m1[m[97m[40m] = { [92m0[m[97m[40m,[79;68H2[58;22H[?25h[79;1H[K[58;21H[?25l[79;63H236,21[8C35%[58;21H[?25h[?25l[79;68H0[58;20H[?25h[?1006l[?1002l[?2004l[?25l[79;1H"bc_gap_test.c"[79;63H[K[79;17H576L, 18278C written
[39;49m[?2004l[?1l>[?25h[?1049l[23;0;0t[0;36mslash $[0m gmake
( cd build ; cmake  .. ; make --jobs=8 )
-- CMAKE build type:          Release
-- CMAKE C Flags release:     -O3 -DNDEBUG
-- CMAKE compiler ID:         GNU
-- CMAKE thread library:      -lpthread
-- CMAKE have pthreads:       1
-- CMAKE have Win32 pthreads: 
-- CMAKE have OpenMP:         TRUE
-- Automatic selection of synchronization method
-- Using OpenMP to synchronize user threads
-- CMAKE C flags:  -std=c11 -O -lm -Wno-pragmas  -O3 -DNDEBUG -fopenmp -DUSER_OPENMP_THREADS  -DHAVE_PTHREADS 
-- Configuring done
-- Generating done
-- Build files have been written to: /home/davis/sparse/LAGraph/Test/BetweennessCentrality/build
make[1]: Entering directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[2]: Entering directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Entering directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Entering directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Entering directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Entering directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
[35m[1mScanning dependencies of target bc_gap_test[0m
make[3]: Leaving directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Leaving directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Leaving directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Leaving directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[3]: Entering directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
[ 37%] Built target bc_batch_exe
[ 37%] [32mBuilding C object CMakeFiles/bc_gap_test.dir/bc_gap_test.c.o[0m
[ 87%] Built target bc_exe
[ 87%] Built target bc_test
[100%] [32m[1mLinking C executable bc_gap_test[0m
make[3]: Leaving directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
[100%] Built target bc_gap_test
make[2]: Leaving directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
make[1]: Leaving directory '/home/davis/sparse/LAGraph/Test/BetweennessCentrality/build'
./build/bc_test < sample.mtx 2>stderr.txt
A is unsymmetric
Starting Betweenness Centrality Tests
 - nthreads: 8
 - ntrials: 1
 - Start Test: Betweenness Centrality (Brandes Algorithm)
generic generic generic generic generic generic generic generic generic generic generic  - End Test: Betweenness Centrality (Brandes Algorithm)
 - Start Test: Betweenness Centrality (Batch Algorithm)
 - End Test: Betweenness Centrality (Batch Algorithm)
 - Betweenness Centrality Numerical Results

   +-------------------------+
   | v_i | Brandes |  Batch  |
   +-------------------------+
   |     | (FP32)  |  (FP32) |
   +-------------------------+
   |   0 |    0.00 |    0.00 |
   |   1 |    0.00 |    0.00 |
   |   2 |    0.00 |    0.00 |
   |   3 |    0.00 |    0.00 |
   |   4 |    6.00 |    6.00 |
   |   5 |    1.00 |    1.00 |
   |   6 |    1.00 |    1.00 |
   |   7 |    0.00 |    0.00 |
   +-------------------------+
all tests passed
./build/bc_test < sample2.mtx 2>>stderr.txt
A is symmetric
Starting Betweenness Centrality Tests
 - nthreads: 8
 - ntrials: 1
 - Start Test: Betweenness Centrality (Brandes Algorithm)
generic generic generic generic generic generic generic generic generic generic generic generic generic generic  - End Test: Betweenness Centrality (Brandes Algorithm)
 - Start Test: Betweenness Centrality (Batch Algorithm)
 - End Test: Betweenness Centrality (Batch Algorithm)
 - Betweenness Centrality Numerical Results

   +-------------------------+
   | v_i | Brandes |  Batch  |
   +-------------------------+
   |     | (FP32)  |  (FP32) |
   +-------------------------+
   |   0 |    0.00 |    0.00 |
   |   1 |    1.00 |    1.00 |
   |   2 |    3.50 |    3.50 |
   |   3 |    0.00 |    0.00 |
   |   4 |    5.00 |    5.00 |
   |   5 |    8.50 |    8.50 |
   |   6 |    0.00 |    0.00 |
   |   7 |    0.00 |    0.00 |
   +-------------------------+
all tests passed
./build/bc_test < west0067.mtx 2>>stderr.txt
A is unsymmetric
Starting Betweenness Centrality Tests
 - nthreads: 8
 - ntrials: 1
 - Start Test: Betweenness Centrality (Brandes Algorithm)
generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic  - End Test: Betweenness Centrality (Brandes Algorithm)
 - Start Test: Betweenness Centrality (Batch Algorithm)
 - End Test: Betweenness Centrality (Batch Algorithm)
 - Betweenness Centrality Numerical Results

   +-------------------------+
   | v_i | Brandes |  Batch  |
   +-------------------------+
   |     | (FP32)  |  (FP32) |
   +-------------------------+
   |   0 |    4.65 |    4.65 |
   |   1 |    5.54 |    5.54 |
   |   2 |    1.89 |    1.89 |
   |   3 |    0.98 |    0.98 |
   |   4 |    7.29 |    7.29 |
   |   5 |    0.53 |    0.53 |
   |   6 |    1.12 |    1.12 |
   |   7 |    3.53 |    3.53 |
   |   8 |    3.45 |    3.45 |
   |   9 |    4.67 |    4.67 |
   |  10 |    2.24 |    2.24 |
   |  11 |    2.27 |    2.27 |
   |  12 |    1.24 |    1.24 |
   |  13 |    0.39 |    0.39 |
   |  14 |    0.18 |    0.18 |
   |  15 |   18.08 |   18.08 |
   |  16 |    0.20 |    0.20 |
   |  17 |    0.80 |    0.80 |
   |  18 |    0.58 |    0.58 |
   |  19 |   17.60 |   17.60 |
   |  20 |    2.11 |    2.11 |
   |  21 |    0.74 |    0.74 |
   |  22 |    0.39 |    0.39 |
   |  23 |   28.04 |   28.04 |
   |  24 |   18.51 |   18.51 |
   |  25 |    7.96 |    7.96 |
   |  26 |    7.39 |    7.39 |
   |  27 |    1.44 |    1.44 |
   |  28 |    0.68 |    0.68 |
   |  29 |   23.43 |   23.43 |
   |  30 |   23.82 |   23.82 |
   |  31 |    5.38 |    5.38 |
   |  32 |    2.22 |    2.22 |
   |  33 |    0.22 |    0.22 |
   |  34 |    0.22 |    0.22 |
   |  35 |   15.38 |   15.38 |
   |  36 |   17.76 |   17.76 |
   |  37 |    5.80 |    5.80 |
   |  38 |    2.45 |    2.45 |
   |  39 |    0.96 |    0.96 |
   |  40 |   24.64 |   24.64 |
   |  41 |    4.37 |    4.37 |
   |  42 |   12.41 |   12.41 |
   |  43 |    6.56 |    6.56 |
   |  44 |   26.51 |   26.51 |
   |  45 |    0.00 |    0.00 |
   |  46 |   12.13 |   12.13 |
   |  47 |    0.00 |    0.00 |
   |  48 |   12.61 |   12.61 |
   |  49 |    2.77 |    2.77 |
   |  50 |    0.70 |    0.70 |
   |  51 |    1.33 |    1.32 |
   |  52 |   15.48 |   15.48 |
   |  53 |    2.33 |    2.32 |
   |  54 |   30.00 |   30.00 |
   |  55 |    4.58 |    4.58 |
   |  56 |   28.11 |   28.11 |
   |  57 |    6.18 |    6.18 |
   |  58 |   15.85 |   15.85 |
   |  59 |   10.27 |   10.27 |
   |  60 |   15.11 |   15.11 |
   |  61 |    7.63 |    7.63 |
   |  62 |    9.65 |    9.65 |
   |  63 |    9.52 |    9.52 |
   |  64 |    6.41 |    6.41 |
   |  65 |    4.78 |    4.78 |
   |  66 |    5.92 |    5.92 |
   +-------------------------+
all tests passed
./build/bc_gap_test < LFAT5.mtx
matrix: from stdin
A is symmetric
 chunk test 1: size 4096
 chunk test 2: size 16384
 chunk test 3: size 65536
 thread test 1: 1
 thread test 2: 2
 thread test 3: 4
 thread test 4: 8

========== input graph: nodes: 14 edges: 46
nthreads max 8

Trial 1 : sources: [ 0 1 2 3 ]
---

Batch X3 time  1: 1:       0.0001 (sec), rate:      0.425
Batch X3 time  1: 2:       0.0001 (sec), rate:      0.468
Batch X3 time  1: 4:       0.0001 (sec), rate:      0.434
Batch X3 time  1: 8:       0.0113 (sec), rate:      0.004

Batch X3 time  2: 1:       0.0001 (sec), rate:      0.434
Batch X3 time  2: 2:       0.0001 (sec), rate:      0.449
Batch X3 time  2: 4:       0.0001 (sec), rate:      0.402
Batch X3 time  2: 8:       0.0076 (sec), rate:      0.006

Batch X3 time  3: 1:       0.0001 (sec), rate:      0.433
Batch X3 time  3: 2:       0.0001 (sec), rate:      0.486
Batch X3 time  3: 4:       0.0001 (sec), rate:      0.460
Batch X3 time  3: 8:       0.0196 (sec), rate:      0.002
---

Batch v4 time  1: 1:       0.0001 (sec), rate:      0.335
Batch v4 time  1: 2:       0.0001 (sec), rate:      0.521
Batch v4 time  1: 4:       0.0001 (sec), rate:      0.521
Batch v4 time  1: 8:       0.0001 (sec), rate:      0.460

Batch v4 time  2: 1:       0.0001 (sec), rate:      0.574
Batch v4 time  2: 2:       0.0001 (sec), rate:      0.548
Batch v4 time  2: 4:       0.0001 (sec), rate:      0.528
Batch v4 time  2: 8:       0.0001 (sec), rate:      0.475

Batch v4 time  3: 1:       0.0001 (sec), rate:      0.577
Batch v4 time  3: 2:       0.0001 (sec), rate:      0.553
Batch v4 time  3: 4:       0.0001 (sec), rate:      0.543
Batch v4 time  3: 8:       0.0001 (sec), rate:      0.474

ntrials: 1

Ave (BatchX3)  1: 1:      0.000 sec, rate      0.425
Ave (BatchX3)  1: 2:      0.000 sec, rate      0.468
Ave (BatchX3)  1: 4:      0.000 sec, rate      0.434
Ave (BatchX3)  1: 8:      0.011 sec, rate      0.004

Ave (BatchX3)  2: 1:      0.000 sec, rate      0.434
Ave (BatchX3)  2: 2:      0.000 sec, rate      0.449
Ave (BatchX3)  2: 4:      0.000 sec, rate      0.402
Ave (BatchX3)  2: 8:      0.008 sec, rate      0.006

Ave (BatchX3)  3: 1:      0.000 sec, rate      0.433
Ave (BatchX3)  3: 2:      0.000 sec, rate      0.486
Ave (BatchX3)  3: 4:      0.000 sec, rate      0.460
Ave (BatchX3)  3: 8:      0.020 sec, rate      0.002


Ave (Batch4)   1: 1:      0.000 sec, rate      0.335
Ave (Batch4)   1: 2:      0.000 sec, rate      0.521
Ave (Batch4)   1: 4:      0.000 sec, rate      0.521
Ave (Batch4)   1: 8:      0.000 sec, rate      0.460

Ave (Batch4)   2: 1:      0.000 sec, rate      0.574
Ave (Batch4)   2: 2:      0.000 sec, rate      0.548
Ave (Batch4)   2: 4:      0.000 sec, rate      0.528
Ave (Batch4)   2: 8:      0.000 sec, rate      0.475

Ave (Batch4)   3: 1:      0.000 sec, rate      0.577
Ave (Batch4)   3: 2:      0.000 sec, rate      0.553
Ave (Batch4)   3: 4:      0.000 sec, rate      0.543
Ave (Batch4)   3: 8:      0.000 sec, rate      0.474
./build/bc_gap_test: all tests passed
./build/bc_gap_test < west0067.mtx
matrix: from stdin
A is unsymmetric
 chunk test 1: size 4096
 chunk test 2: size 16384
 chunk test 3: size 65536
 thread test 1: 1
 thread test 2: 2
 thread test 3: 4
 thread test 4: 8

========== input graph: nodes: 67 edges: 294
nthreads max 8

Trial 1 : sources: [ 0 1 2 3 ]
---

Batch X3 time  1: 1:       0.0002 (sec), rate:      1.821
Batch X3 time  1: 2:       0.0002 (sec), rate:      1.773
Batch X3 time  1: 4:       0.0001 (sec), rate:      1.976
Batch X3 time  1: 8:       0.0229 (sec), rate:      0.013

Batch X3 time  2: 1:       0.0002 (sec), rate:      1.700
Batch X3 time  2: 2:       0.0002 (sec), rate:      1.941
Batch X3 time  2: 4:       0.0002 (sec), rate:      1.948
Batch X3 time  2: 8:       0.0158 (sec), rate:      0.019

Batch X3 time  3: 1:       0.0001 (sec), rate:      2.047
Batch X3 time  3: 2:       0.0001 (sec), rate:      2.126
Batch X3 time  3: 4:       0.0003 (sec), rate:      1.164
Batch X3 time  3: 8:       0.0151 (sec), rate:      0.020
---

Batch v4 time  1: 1:       0.0002 (sec), rate:      1.276
Batch v4 time  1: 2:       0.0002 (sec), rate:      1.800
Batch v4 time  1: 4:       0.0002 (sec), rate:      1.699
Batch v4 time  1: 8:       0.0002 (sec), rate:      1.451

Batch v4 time  2: 1:       0.0002 (sec), rate:      1.939
Batch v4 time  2: 2:       0.0002 (sec), rate:      1.821
Batch v4 time  2: 4:       0.0002 (sec), rate:      1.526
Batch v4 time  2: 8:       0.0002 (sec), rate:      1.309

Batch v4 time  3: 1:       0.0002 (sec), rate:      1.696
Batch v4 time  3: 2:       0.0002 (sec), rate:      1.622
Batch v4 time  3: 4:       0.0002 (sec), rate:      1.459
Batch v4 time  3: 8:       0.0002 (sec), rate:      1.327

ntrials: 1

Ave (BatchX3)  1: 1:      0.000 sec, rate      1.821
Ave (BatchX3)  1: 2:      0.000 sec, rate      1.773
Ave (BatchX3)  1: 4:      0.000 sec, rate      1.976
Ave (BatchX3)  1: 8:      0.023 sec, rate      0.013

Ave (BatchX3)  2: 1:      0.000 sec, rate      1.700
Ave (BatchX3)  2: 2:      0.000 sec, rate      1.941
Ave (BatchX3)  2: 4:      0.000 sec, rate      1.948
Ave (BatchX3)  2: 8:      0.016 sec, rate      0.019

Ave (BatchX3)  3: 1:      0.000 sec, rate      2.047
Ave (BatchX3)  3: 2:      0.000 sec, rate      2.126
Ave (BatchX3)  3: 4:      0.000 sec, rate      1.164
Ave (BatchX3)  3: 8:      0.015 sec, rate      0.020


Ave (Batch4)   1: 1:      0.000 sec, rate      1.276
Ave (Batch4)   1: 2:      0.000 sec, rate      1.800
Ave (Batch4)   1: 4:      0.000 sec, rate      1.699
Ave (Batch4)   1: 8:      0.000 sec, rate      1.451

Ave (Batch4)   2: 1:      0.000 sec, rate      1.939
Ave (Batch4)   2: 2:      0.000 sec, rate      1.821
Ave (Batch4)   2: 4:      0.000 sec, rate      1.526
Ave (Batch4)   2: 8:      0.000 sec, rate      1.309

Ave (Batch4)   3: 1:      0.000 sec, rate      1.696
Ave (Batch4)   3: 2:      0.000 sec, rate      1.622
Ave (Batch4)   3: 4:      0.000 sec, rate      1.459
Ave (Batch4)   3: 8:      0.000 sec, rate      1.327
./build/bc_gap_test: all tests passed
[0;36mslash $[0m exit
exit

Script done on 2020-01-08 21:59:25-0600
